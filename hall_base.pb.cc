// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hall_base.proto
#include "stdafx.h"
#include "hall_base.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace hall {
    namespace base {
        class AdditinalDataDefaultTypeInternal {
        public:
            ::google::protobuf::internal::ExplicitlyConstructed<AdditinalData>
                _instance;
        } _AdditinalData_default_instance_;
        class EnterGameReqDefaultTypeInternal {
        public:
            ::google::protobuf::internal::ExplicitlyConstructed<EnterGameReq>
                _instance;
        } _EnterGameReq_default_instance_;
        class EnterGameRespDefaultTypeInternal {
        public:
            ::google::protobuf::internal::ExplicitlyConstructed<EnterGameResp>
                _instance;
        } _EnterGameResp_default_instance_;
        class EnterGameOkNotifyDefaultTypeInternal {
        public:
            ::google::protobuf::internal::ExplicitlyConstructed<EnterGameOkNotify>
                _instance;
        } _EnterGameOkNotify_default_instance_;
        class LeaveGameNotifyDefaultTypeInternal {
        public:
            ::google::protobuf::internal::ExplicitlyConstructed<LeaveGameNotify>
                _instance;
        } _LeaveGameNotify_default_instance_;
        class UserGameResultDefaultTypeInternal {
        public:
            ::google::protobuf::internal::ExplicitlyConstructed<UserGameResult>
                _instance;
        } _UserGameResult_default_instance_;
        class RefreshGameResultDefaultTypeInternal {
        public:
            ::google::protobuf::internal::ExplicitlyConstructed<RefreshGameResult>
                _instance;
        } _RefreshGameResult_default_instance_;
    }  // namespace base
}  // namespace hall
namespace protobuf_hall_5fbase_2eproto {
    void InitDefaultsAdditinalDataImpl() {
        GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
        ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
        ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
        {
            void* ptr = &::hall::base::_AdditinalData_default_instance_;
            new (ptr) ::hall::base::AdditinalData();
            ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
        }
        ::hall::base::AdditinalData::InitAsDefaultInstance();
    }

    void InitDefaultsAdditinalData() {
        static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
        ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAdditinalDataImpl);
    }

    void InitDefaultsEnterGameReqImpl() {
        GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
        ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
        ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
        protobuf_game_5fbase_2eproto::InitDefaultsEnterNormalGameReq();
        protobuf_hall_5fbase_2eproto::InitDefaultsAdditinalData();
        {
            void* ptr = &::hall::base::_EnterGameReq_default_instance_;
            new (ptr) ::hall::base::EnterGameReq();
            ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
        }
        ::hall::base::EnterGameReq::InitAsDefaultInstance();
    }

    void InitDefaultsEnterGameReq() {
        static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
        ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsEnterGameReqImpl);
    }

    void InitDefaultsEnterGameRespImpl() {
        GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
        ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
        ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
        protobuf_hall_5fbase_2eproto::InitDefaultsAdditinalData();
        protobuf_game_5fbase_2eproto::InitDefaultsRoomData();
        {
            void* ptr = &::hall::base::_EnterGameResp_default_instance_;
            new (ptr) ::hall::base::EnterGameResp();
            ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
        }
        ::hall::base::EnterGameResp::InitAsDefaultInstance();
    }

    void InitDefaultsEnterGameResp() {
        static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
        ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsEnterGameRespImpl);
    }

    void InitDefaultsEnterGameOkNotifyImpl() {
        GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
        ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
        ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
        {
            void* ptr = &::hall::base::_EnterGameOkNotify_default_instance_;
            new (ptr) ::hall::base::EnterGameOkNotify();
            ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
        }
        ::hall::base::EnterGameOkNotify::InitAsDefaultInstance();
    }

    void InitDefaultsEnterGameOkNotify() {
        static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
        ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsEnterGameOkNotifyImpl);
    }

    void InitDefaultsLeaveGameNotifyImpl() {
        GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
        ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
        ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
        {
            void* ptr = &::hall::base::_LeaveGameNotify_default_instance_;
            new (ptr) ::hall::base::LeaveGameNotify();
            ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
        }
        ::hall::base::LeaveGameNotify::InitAsDefaultInstance();
    }

    void InitDefaultsLeaveGameNotify() {
        static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
        ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLeaveGameNotifyImpl);
    }

    void InitDefaultsUserGameResultImpl() {
        GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
        ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
        ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
        {
            void* ptr = &::hall::base::_UserGameResult_default_instance_;
            new (ptr) ::hall::base::UserGameResult();
            ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
        }
        ::hall::base::UserGameResult::InitAsDefaultInstance();
    }

    void InitDefaultsUserGameResult() {
        static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
        ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsUserGameResultImpl);
    }

    void InitDefaultsRefreshGameResultImpl() {
        GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
        ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
        ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
        protobuf_hall_5fbase_2eproto::InitDefaultsUserGameResult();
        {
            void* ptr = &::hall::base::_RefreshGameResult_default_instance_;
            new (ptr) ::hall::base::RefreshGameResult();
            ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
        }
        ::hall::base::RefreshGameResult::InitAsDefaultInstance();
    }

    void InitDefaultsRefreshGameResult() {
        static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
        ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRefreshGameResultImpl);
    }

    ::google::protobuf::Metadata file_level_metadata[7];

    const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hall::base::AdditinalData, _has_bits_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hall::base::AdditinalData, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hall::base::AdditinalData, original_req_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hall::base::AdditinalData, data_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hall::base::AdditinalData, data_len_),
        1,
        0,
        2,
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hall::base::EnterGameReq, _has_bits_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hall::base::EnterGameReq, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hall::base::EnterGameReq, entergame_req_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hall::base::EnterGameReq, additinal_data_),
        0,
        1,
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hall::base::EnterGameResp, _has_bits_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hall::base::EnterGameResp, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hall::base::EnterGameResp, code_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hall::base::EnterGameResp, userid_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hall::base::EnterGameResp, deposit_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hall::base::EnterGameResp, user_type_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hall::base::EnterGameResp, total_bout_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hall::base::EnterGameResp, win_bout_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hall::base::EnterGameResp, lose_bout_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hall::base::EnterGameResp, hardid_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hall::base::EnterGameResp, head_url_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hall::base::EnterGameResp, nick_name_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hall::base::EnterGameResp, additinal_data_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hall::base::EnterGameResp, roomdata_),
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        0,
        1,
        2,
        3,
        4,
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hall::base::EnterGameOkNotify, _has_bits_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hall::base::EnterGameOkNotify, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hall::base::EnterGameOkNotify, userid_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hall::base::EnterGameOkNotify, roomid_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hall::base::EnterGameOkNotify, tableno_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hall::base::EnterGameOkNotify, chairno_),
        0,
        1,
        2,
        3,
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hall::base::LeaveGameNotify, _has_bits_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hall::base::LeaveGameNotify, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hall::base::LeaveGameNotify, userid_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hall::base::LeaveGameNotify, roomid_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hall::base::LeaveGameNotify, tableno_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hall::base::LeaveGameNotify, chairno_),
        0,
        1,
        2,
        3,
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hall::base::UserGameResult, _has_bits_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hall::base::UserGameResult, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hall::base::UserGameResult, userid_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hall::base::UserGameResult, chairno_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hall::base::UserGameResult, base_deposit_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hall::base::UserGameResult, old_deposit_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hall::base::UserGameResult, diff_deposit_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hall::base::UserGameResult, cut_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hall::base::UserGameResult, fee_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hall::base::UserGameResult, extra_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hall::base::UserGameResult, timecost_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hall::base::UserGameResult, bout_count_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hall::base::UserGameResult, win_count_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hall::base::UserGameResult, loss_count_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hall::base::UserGameResult, standoff_count_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hall::base::UserGameResult, offline_count_),
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hall::base::RefreshGameResult, _has_bits_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hall::base::RefreshGameResult, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hall::base::RefreshGameResult, roomid_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hall::base::RefreshGameResult, tableno_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hall::base::RefreshGameResult, flag_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hall::base::RefreshGameResult, user_result_),
        1,
        0,
        2,
        ~0u,
    };
    static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 8, sizeof(::hall::base::AdditinalData)},
        {11, 18, sizeof(::hall::base::EnterGameReq)},
        {20, 37, sizeof(::hall::base::EnterGameResp)},
        {49, 58, sizeof(::hall::base::EnterGameOkNotify)},
        {62, 71, sizeof(::hall::base::LeaveGameNotify)},
        {75, 94, sizeof(::hall::base::UserGameResult)},
        {108, 117, sizeof(::hall::base::RefreshGameResult)},
    };

    static ::google::protobuf::Message const * const file_default_instances[] = {
        reinterpret_cast<const ::google::protobuf::Message*>(&::hall::base::_AdditinalData_default_instance_),
        reinterpret_cast<const ::google::protobuf::Message*>(&::hall::base::_EnterGameReq_default_instance_),
        reinterpret_cast<const ::google::protobuf::Message*>(&::hall::base::_EnterGameResp_default_instance_),
        reinterpret_cast<const ::google::protobuf::Message*>(&::hall::base::_EnterGameOkNotify_default_instance_),
        reinterpret_cast<const ::google::protobuf::Message*>(&::hall::base::_LeaveGameNotify_default_instance_),
        reinterpret_cast<const ::google::protobuf::Message*>(&::hall::base::_UserGameResult_default_instance_),
        reinterpret_cast<const ::google::protobuf::Message*>(&::hall::base::_RefreshGameResult_default_instance_),
    };

    void protobuf_AssignDescriptors() {
        AddDescriptors();
        ::google::protobuf::MessageFactory* factory = NULL;
        AssignDescriptors(
            "hall_base.proto", schemas, file_default_instances, TableStruct::offsets, factory,
            file_level_metadata, NULL, NULL);
    }

    void protobuf_AssignDescriptorsOnce() {
        static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
        ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
    }

    void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
    void protobuf_RegisterTypes(const ::std::string&) {
        protobuf_AssignDescriptorsOnce();
        ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 7);
    }

    void AddDescriptorsImpl() {
        InitDefaults();
        static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
            "\n\017hall_base.proto\022\thall.base\032\017game_base."
            "proto\"E\n\rAdditinalData\022\024\n\014original_req\030\001"
            " \001(\005\022\014\n\004data\030\002 \001(\014\022\020\n\010data_len\030\003 \001(\005\"v\n\014"
            "EnterGameReq\0224\n\rentergame_req\030\001 \001(\0132\035.ga"
            "me.base.EnterNormalGameReq\0220\n\016additinal_"
            "data\030\002 \001(\0132\030.hall.base.AdditinalData\"\230\002\n"
            "\rEnterGameResp\022\014\n\004code\030\001 \001(\005\022\016\n\006userid\030\002"
            " \001(\005\022\017\n\007deposit\030\003 \001(\003\022\021\n\tuser_type\030\004 \001(\005"
            "\022\022\n\ntotal_bout\030\005 \001(\005\022\020\n\010win_bout\030\006 \001(\005\022\021"
            "\n\tlose_bout\030\007 \001(\005\022\016\n\006hardid\030\010 \001(\t\022\020\n\010hea"
            "d_url\030\t \001(\t\022\021\n\tnick_name\030\n \001(\t\0220\n\016additi"
            "nal_data\030\013 \001(\0132\030.hall.base.AdditinalData"
            "\022%\n\010roomdata\030\014 \001(\0132\023.game.base.RoomData\""
            "U\n\021EnterGameOkNotify\022\016\n\006userid\030\001 \001(\005\022\016\n\006"
            "roomid\030\002 \001(\005\022\017\n\007tableno\030\003 \001(\003\022\017\n\007chairno"
            "\030\004 \001(\005\"S\n\017LeaveGameNotify\022\016\n\006userid\030\001 \001("
            "\005\022\016\n\006roomid\030\002 \001(\005\022\017\n\007tableno\030\003 \001(\003\022\017\n\007ch"
            "airno\030\004 \001(\005\"\227\002\n\016UserGameResult\022\016\n\006userid"
            "\030\001 \001(\005\022\017\n\007chairno\030\002 \001(\005\022\024\n\014base_deposit\030"
            "\003 \001(\003\022\023\n\013old_deposit\030\004 \001(\003\022\024\n\014diff_depos"
            "it\030\005 \001(\003\022\013\n\003cut\030\006 \001(\003\022\013\n\003fee\030\007 \001(\003\022\r\n\005ex"
            "tra\030\010 \001(\003\022\020\n\010timecost\030\t \001(\005\022\022\n\nbout_coun"
            "t\030\n \001(\005\022\021\n\twin_count\030\013 \001(\005\022\022\n\nloss_count"
            "\030\014 \001(\005\022\026\n\016standoff_count\030\r \001(\005\022\025\n\rofflin"
            "e_count\030\016 \001(\005\"r\n\021RefreshGameResult\022\016\n\006ro"
            "omid\030\001 \001(\005\022\017\n\007tableno\030\002 \001(\003\022\014\n\004flag\030\003 \001("
            "\005\022.\n\013user_result\030\004 \003(\0132\031.hall.base.UserG"
            "ameResult"
        };
        ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
            descriptor, 1089);
        ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
            "hall_base.proto", &protobuf_RegisterTypes);
        ::protobuf_game_5fbase_2eproto::AddDescriptors();
    }

    void AddDescriptors() {
        static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
        ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
    }
    // Force AddDescriptors() to be called at dynamic initialization time.
    struct StaticDescriptorInitializer {
        StaticDescriptorInitializer() {
            AddDescriptors();
        }
    } static_descriptor_initializer;
}  // namespace protobuf_hall_5fbase_2eproto
namespace hall {
    namespace base {

        // ===================================================================

        void AdditinalData::InitAsDefaultInstance() {}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
        const int AdditinalData::kOriginalReqFieldNumber;
        const int AdditinalData::kDataFieldNumber;
        const int AdditinalData::kDataLenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

        AdditinalData::AdditinalData()
            : ::google::protobuf::Message(), _internal_metadata_(NULL) {
            if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
                ::protobuf_hall_5fbase_2eproto::InitDefaultsAdditinalData();
            }
            SharedCtor();
            // @@protoc_insertion_point(constructor:hall.base.AdditinalData)
        }
        AdditinalData::AdditinalData(const AdditinalData& from)
            : ::google::protobuf::Message(),
            _internal_metadata_(NULL),
            _has_bits_(from._has_bits_),
            _cached_size_(0) {
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
            if (from.has_data()) {
                data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
            }
            ::memcpy(&original_req_, &from.original_req_,
                     static_cast<size_t>(reinterpret_cast<char*>(&data_len_) -
                     reinterpret_cast<char*>(&original_req_)) + sizeof(data_len_));
            // @@protoc_insertion_point(copy_constructor:hall.base.AdditinalData)
        }

        void AdditinalData::SharedCtor() {
            _cached_size_ = 0;
            data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
            ::memset(&original_req_, 0, static_cast<size_t>(
                reinterpret_cast<char*>(&data_len_) -
                reinterpret_cast<char*>(&original_req_)) + sizeof(data_len_));
        }

        AdditinalData::~AdditinalData() {
            // @@protoc_insertion_point(destructor:hall.base.AdditinalData)
            SharedDtor();
        }

        void AdditinalData::SharedDtor() {
            data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }

        void AdditinalData::SetCachedSize(int size) const {
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
        }
        const ::google::protobuf::Descriptor* AdditinalData::descriptor() {
            ::protobuf_hall_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
            return ::protobuf_hall_5fbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
        }

        const AdditinalData& AdditinalData::default_instance() {
            ::protobuf_hall_5fbase_2eproto::InitDefaultsAdditinalData();
            return *internal_default_instance();
        }

        AdditinalData* AdditinalData::New(::google::protobuf::Arena* arena) const {
            AdditinalData* n = new AdditinalData;
            if (arena != NULL) {
                arena->Own(n);
            }
            return n;
        }

        void AdditinalData::Clear() {
            // @@protoc_insertion_point(message_clear_start:hall.base.AdditinalData)
            ::google::protobuf::uint32 cached_has_bits = 0;
            // Prevent compiler warnings about cached_has_bits being unused
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
                GOOGLE_DCHECK(!data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
                (*data_.UnsafeRawStringPointer())->clear();
            }
            if (cached_has_bits & 6u) {
                ::memset(&original_req_, 0, static_cast<size_t>(
                    reinterpret_cast<char*>(&data_len_) -
                    reinterpret_cast<char*>(&original_req_)) + sizeof(data_len_));
            }
            _has_bits_.Clear();
            _internal_metadata_.Clear();
        }

        bool AdditinalData::MergePartialFromCodedStream(
            ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
            ::google::protobuf::uint32 tag;
            // @@protoc_insertion_point(parse_start:hall.base.AdditinalData)
            for (;;) {
                ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
                tag = p.first;
                if (!p.second) goto handle_unusual;
                switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
                    // optional int32 original_req = 1;
                    case 1: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
                            set_has_original_req();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &original_req_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // optional bytes data = 2;
                    case 2: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
                            DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                                input, this->mutable_data()));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // optional int32 data_len = 3;
                    case 3: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
                            set_has_data_len();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &data_len_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                    default: {
handle_unusual:
                        if (tag == 0) {
                            goto success;
                        }
                        DO_(::google::protobuf::internal::WireFormat::SkipField(
                            input, tag, _internal_metadata_.mutable_unknown_fields()));
                        break;
                    }
                }
            }
success:
            // @@protoc_insertion_point(parse_success:hall.base.AdditinalData)
            return true;
failure:
            // @@protoc_insertion_point(parse_failure:hall.base.AdditinalData)
            return false;
#undef DO_
        }

        void AdditinalData::SerializeWithCachedSizes(
            ::google::protobuf::io::CodedOutputStream* output) const {
            // @@protoc_insertion_point(serialize_start:hall.base.AdditinalData)
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            // optional int32 original_req = 1;
            if (cached_has_bits & 0x00000002u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->original_req(), output);
            }

            // optional bytes data = 2;
            if (cached_has_bits & 0x00000001u) {
                ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
                    2, this->data(), output);
            }

            // optional int32 data_len = 3;
            if (cached_has_bits & 0x00000004u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->data_len(), output);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
                    _internal_metadata_.unknown_fields(), output);
            }
            // @@protoc_insertion_point(serialize_end:hall.base.AdditinalData)
        }

        ::google::protobuf::uint8* AdditinalData::InternalSerializeWithCachedSizesToArray(
            bool deterministic, ::google::protobuf::uint8* target) const {
            (void) deterministic; // Unused
            // @@protoc_insertion_point(serialize_to_array_start:hall.base.AdditinalData)
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            // optional int32 original_req = 1;
            if (cached_has_bits & 0x00000002u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->original_req(), target);
            }

            // optional bytes data = 2;
            if (cached_has_bits & 0x00000001u) {
                target =
                    ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
                    2, this->data(), target);
            }

            // optional int32 data_len = 3;
            if (cached_has_bits & 0x00000004u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->data_len(), target);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                    _internal_metadata_.unknown_fields(), target);
            }
            // @@protoc_insertion_point(serialize_to_array_end:hall.base.AdditinalData)
            return target;
        }

        size_t AdditinalData::ByteSizeLong() const {
            // @@protoc_insertion_point(message_byte_size_start:hall.base.AdditinalData)
            size_t total_size = 0;

            if (_internal_metadata_.have_unknown_fields()) {
                total_size +=
                    ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
                    _internal_metadata_.unknown_fields());
            }
            if (_has_bits_[0 / 32] & 7u) {
                // optional bytes data = 2;
                if (has_data()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::BytesSize(
                        this->data());
                }

                // optional int32 original_req = 1;
                if (has_original_req()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::Int32Size(
                        this->original_req());
                }

                // optional int32 data_len = 3;
                if (has_data_len()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::Int32Size(
                        this->data_len());
                }

            }
            int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = cached_size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
            return total_size;
        }

        void AdditinalData::MergeFrom(const ::google::protobuf::Message& from) {
            // @@protoc_insertion_point(generalized_merge_from_start:hall.base.AdditinalData)
            GOOGLE_DCHECK_NE(&from, this);
            const AdditinalData* source =
                ::google::protobuf::internal::DynamicCastToGenerated<const AdditinalData>(
                &from);
            if (source == NULL) {
                // @@protoc_insertion_point(generalized_merge_from_cast_fail:hall.base.AdditinalData)
                ::google::protobuf::internal::ReflectionOps::Merge(from, this);
            } else {
                // @@protoc_insertion_point(generalized_merge_from_cast_success:hall.base.AdditinalData)
                MergeFrom(*source);
            }
        }

        void AdditinalData::MergeFrom(const AdditinalData& from) {
            // @@protoc_insertion_point(class_specific_merge_from_start:hall.base.AdditinalData)
            GOOGLE_DCHECK_NE(&from, this);
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = from._has_bits_[0];
            if (cached_has_bits & 7u) {
                if (cached_has_bits & 0x00000001u) {
                    set_has_data();
                    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
                }
                if (cached_has_bits & 0x00000002u) {
                    original_req_ = from.original_req_;
                }
                if (cached_has_bits & 0x00000004u) {
                    data_len_ = from.data_len_;
                }
                _has_bits_[0] |= cached_has_bits;
            }
        }

        void AdditinalData::CopyFrom(const ::google::protobuf::Message& from) {
            // @@protoc_insertion_point(generalized_copy_from_start:hall.base.AdditinalData)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        void AdditinalData::CopyFrom(const AdditinalData& from) {
            // @@protoc_insertion_point(class_specific_copy_from_start:hall.base.AdditinalData)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        bool AdditinalData::IsInitialized() const {
            return true;
        }

        void AdditinalData::Swap(AdditinalData* other) {
            if (other == this) return;
            InternalSwap(other);
        }
        void AdditinalData::InternalSwap(AdditinalData* other) {
            using std::swap;
            data_.Swap(&other->data_);
            swap(original_req_, other->original_req_);
            swap(data_len_, other->data_len_);
            swap(_has_bits_[0], other->_has_bits_[0]);
            _internal_metadata_.Swap(&other->_internal_metadata_);
            swap(_cached_size_, other->_cached_size_);
        }

        ::google::protobuf::Metadata AdditinalData::GetMetadata() const {
            protobuf_hall_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
            return ::protobuf_hall_5fbase_2eproto::file_level_metadata[kIndexInFileMessages];
        }


        // ===================================================================

        void EnterGameReq::InitAsDefaultInstance() {
            ::hall::base::_EnterGameReq_default_instance_._instance.get_mutable()->entergame_req_ = const_cast<::game::base::EnterNormalGameReq*>(
                ::game::base::EnterNormalGameReq::internal_default_instance());
            ::hall::base::_EnterGameReq_default_instance_._instance.get_mutable()->additinal_data_ = const_cast<::hall::base::AdditinalData*>(
                ::hall::base::AdditinalData::internal_default_instance());
        }
        void EnterGameReq::clear_entergame_req() {
            if (entergame_req_ != NULL) entergame_req_->Clear();
            clear_has_entergame_req();
        }
#if !defined(_MSC_VER) || _MSC_VER >= 1900
        const int EnterGameReq::kEntergameReqFieldNumber;
        const int EnterGameReq::kAdditinalDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

        EnterGameReq::EnterGameReq()
            : ::google::protobuf::Message(), _internal_metadata_(NULL) {
            if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
                ::protobuf_hall_5fbase_2eproto::InitDefaultsEnterGameReq();
            }
            SharedCtor();
            // @@protoc_insertion_point(constructor:hall.base.EnterGameReq)
        }
        EnterGameReq::EnterGameReq(const EnterGameReq& from)
            : ::google::protobuf::Message(),
            _internal_metadata_(NULL),
            _has_bits_(from._has_bits_),
            _cached_size_(0) {
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            if (from.has_entergame_req()) {
                entergame_req_ = new ::game::base::EnterNormalGameReq(*from.entergame_req_);
            } else {
                entergame_req_ = NULL;
            }
            if (from.has_additinal_data()) {
                additinal_data_ = new ::hall::base::AdditinalData(*from.additinal_data_);
            } else {
                additinal_data_ = NULL;
            }
            // @@protoc_insertion_point(copy_constructor:hall.base.EnterGameReq)
        }

        void EnterGameReq::SharedCtor() {
            _cached_size_ = 0;
            ::memset(&entergame_req_, 0, static_cast<size_t>(
                reinterpret_cast<char*>(&additinal_data_) -
                reinterpret_cast<char*>(&entergame_req_)) + sizeof(additinal_data_));
        }

        EnterGameReq::~EnterGameReq() {
            // @@protoc_insertion_point(destructor:hall.base.EnterGameReq)
            SharedDtor();
        }

        void EnterGameReq::SharedDtor() {
            if (this != internal_default_instance()) delete entergame_req_;
            if (this != internal_default_instance()) delete additinal_data_;
        }

        void EnterGameReq::SetCachedSize(int size) const {
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
        }
        const ::google::protobuf::Descriptor* EnterGameReq::descriptor() {
            ::protobuf_hall_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
            return ::protobuf_hall_5fbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
        }

        const EnterGameReq& EnterGameReq::default_instance() {
            ::protobuf_hall_5fbase_2eproto::InitDefaultsEnterGameReq();
            return *internal_default_instance();
        }

        EnterGameReq* EnterGameReq::New(::google::protobuf::Arena* arena) const {
            EnterGameReq* n = new EnterGameReq;
            if (arena != NULL) {
                arena->Own(n);
            }
            return n;
        }

        void EnterGameReq::Clear() {
            // @@protoc_insertion_point(message_clear_start:hall.base.EnterGameReq)
            ::google::protobuf::uint32 cached_has_bits = 0;
            // Prevent compiler warnings about cached_has_bits being unused
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            if (cached_has_bits & 3u) {
                if (cached_has_bits & 0x00000001u) {
                    GOOGLE_DCHECK(entergame_req_ != NULL);
                    entergame_req_->Clear();
                }
                if (cached_has_bits & 0x00000002u) {
                    GOOGLE_DCHECK(additinal_data_ != NULL);
                    additinal_data_->Clear();
                }
            }
            _has_bits_.Clear();
            _internal_metadata_.Clear();
        }

        bool EnterGameReq::MergePartialFromCodedStream(
            ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
            ::google::protobuf::uint32 tag;
            // @@protoc_insertion_point(parse_start:hall.base.EnterGameReq)
            for (;;) {
                ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
                tag = p.first;
                if (!p.second) goto handle_unusual;
                switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
                    // optional .game.base.EnterNormalGameReq entergame_req = 1;
                    case 1: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
                            DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                                input, mutable_entergame_req()));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // optional .hall.base.AdditinalData additinal_data = 2;
                    case 2: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
                            DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                                input, mutable_additinal_data()));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                    default: {
handle_unusual:
                        if (tag == 0) {
                            goto success;
                        }
                        DO_(::google::protobuf::internal::WireFormat::SkipField(
                            input, tag, _internal_metadata_.mutable_unknown_fields()));
                        break;
                    }
                }
            }
success:
            // @@protoc_insertion_point(parse_success:hall.base.EnterGameReq)
            return true;
failure:
            // @@protoc_insertion_point(parse_failure:hall.base.EnterGameReq)
            return false;
#undef DO_
        }

        void EnterGameReq::SerializeWithCachedSizes(
            ::google::protobuf::io::CodedOutputStream* output) const {
            // @@protoc_insertion_point(serialize_start:hall.base.EnterGameReq)
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            // optional .game.base.EnterNormalGameReq entergame_req = 1;
            if (cached_has_bits & 0x00000001u) {
                ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
                    1, *this->entergame_req_, output);
            }

            // optional .hall.base.AdditinalData additinal_data = 2;
            if (cached_has_bits & 0x00000002u) {
                ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
                    2, *this->additinal_data_, output);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
                    _internal_metadata_.unknown_fields(), output);
            }
            // @@protoc_insertion_point(serialize_end:hall.base.EnterGameReq)
        }

        ::google::protobuf::uint8* EnterGameReq::InternalSerializeWithCachedSizesToArray(
            bool deterministic, ::google::protobuf::uint8* target) const {
            (void) deterministic; // Unused
            // @@protoc_insertion_point(serialize_to_array_start:hall.base.EnterGameReq)
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            // optional .game.base.EnterNormalGameReq entergame_req = 1;
            if (cached_has_bits & 0x00000001u) {
                target = ::google::protobuf::internal::WireFormatLite::
                    InternalWriteMessageToArray(
                    1, *this->entergame_req_, deterministic, target);
            }

            // optional .hall.base.AdditinalData additinal_data = 2;
            if (cached_has_bits & 0x00000002u) {
                target = ::google::protobuf::internal::WireFormatLite::
                    InternalWriteMessageToArray(
                    2, *this->additinal_data_, deterministic, target);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                    _internal_metadata_.unknown_fields(), target);
            }
            // @@protoc_insertion_point(serialize_to_array_end:hall.base.EnterGameReq)
            return target;
        }

        size_t EnterGameReq::ByteSizeLong() const {
            // @@protoc_insertion_point(message_byte_size_start:hall.base.EnterGameReq)
            size_t total_size = 0;

            if (_internal_metadata_.have_unknown_fields()) {
                total_size +=
                    ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
                    _internal_metadata_.unknown_fields());
            }
            if (_has_bits_[0 / 32] & 3u) {
                // optional .game.base.EnterNormalGameReq entergame_req = 1;
                if (has_entergame_req()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::MessageSize(
                        *this->entergame_req_);
                }

                // optional .hall.base.AdditinalData additinal_data = 2;
                if (has_additinal_data()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::MessageSize(
                        *this->additinal_data_);
                }

            }
            int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = cached_size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
            return total_size;
        }

        void EnterGameReq::MergeFrom(const ::google::protobuf::Message& from) {
            // @@protoc_insertion_point(generalized_merge_from_start:hall.base.EnterGameReq)
            GOOGLE_DCHECK_NE(&from, this);
            const EnterGameReq* source =
                ::google::protobuf::internal::DynamicCastToGenerated<const EnterGameReq>(
                &from);
            if (source == NULL) {
                // @@protoc_insertion_point(generalized_merge_from_cast_fail:hall.base.EnterGameReq)
                ::google::protobuf::internal::ReflectionOps::Merge(from, this);
            } else {
                // @@protoc_insertion_point(generalized_merge_from_cast_success:hall.base.EnterGameReq)
                MergeFrom(*source);
            }
        }

        void EnterGameReq::MergeFrom(const EnterGameReq& from) {
            // @@protoc_insertion_point(class_specific_merge_from_start:hall.base.EnterGameReq)
            GOOGLE_DCHECK_NE(&from, this);
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = from._has_bits_[0];
            if (cached_has_bits & 3u) {
                if (cached_has_bits & 0x00000001u) {
                    mutable_entergame_req()->::game::base::EnterNormalGameReq::MergeFrom(from.entergame_req());
                }
                if (cached_has_bits & 0x00000002u) {
                    mutable_additinal_data()->::hall::base::AdditinalData::MergeFrom(from.additinal_data());
                }
            }
        }

        void EnterGameReq::CopyFrom(const ::google::protobuf::Message& from) {
            // @@protoc_insertion_point(generalized_copy_from_start:hall.base.EnterGameReq)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        void EnterGameReq::CopyFrom(const EnterGameReq& from) {
            // @@protoc_insertion_point(class_specific_copy_from_start:hall.base.EnterGameReq)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        bool EnterGameReq::IsInitialized() const {
            return true;
        }

        void EnterGameReq::Swap(EnterGameReq* other) {
            if (other == this) return;
            InternalSwap(other);
        }
        void EnterGameReq::InternalSwap(EnterGameReq* other) {
            using std::swap;
            swap(entergame_req_, other->entergame_req_);
            swap(additinal_data_, other->additinal_data_);
            swap(_has_bits_[0], other->_has_bits_[0]);
            _internal_metadata_.Swap(&other->_internal_metadata_);
            swap(_cached_size_, other->_cached_size_);
        }

        ::google::protobuf::Metadata EnterGameReq::GetMetadata() const {
            protobuf_hall_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
            return ::protobuf_hall_5fbase_2eproto::file_level_metadata[kIndexInFileMessages];
        }


        // ===================================================================

        void EnterGameResp::InitAsDefaultInstance() {
            ::hall::base::_EnterGameResp_default_instance_._instance.get_mutable()->additinal_data_ = const_cast<::hall::base::AdditinalData*>(
                ::hall::base::AdditinalData::internal_default_instance());
            ::hall::base::_EnterGameResp_default_instance_._instance.get_mutable()->roomdata_ = const_cast<::game::base::RoomData*>(
                ::game::base::RoomData::internal_default_instance());
        }
        void EnterGameResp::clear_roomdata() {
            if (roomdata_ != NULL) roomdata_->Clear();
            clear_has_roomdata();
        }
#if !defined(_MSC_VER) || _MSC_VER >= 1900
        const int EnterGameResp::kCodeFieldNumber;
        const int EnterGameResp::kUseridFieldNumber;
        const int EnterGameResp::kDepositFieldNumber;
        const int EnterGameResp::kUserTypeFieldNumber;
        const int EnterGameResp::kTotalBoutFieldNumber;
        const int EnterGameResp::kWinBoutFieldNumber;
        const int EnterGameResp::kLoseBoutFieldNumber;
        const int EnterGameResp::kHardidFieldNumber;
        const int EnterGameResp::kHeadUrlFieldNumber;
        const int EnterGameResp::kNickNameFieldNumber;
        const int EnterGameResp::kAdditinalDataFieldNumber;
        const int EnterGameResp::kRoomdataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

        EnterGameResp::EnterGameResp()
            : ::google::protobuf::Message(), _internal_metadata_(NULL) {
            if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
                ::protobuf_hall_5fbase_2eproto::InitDefaultsEnterGameResp();
            }
            SharedCtor();
            // @@protoc_insertion_point(constructor:hall.base.EnterGameResp)
        }
        EnterGameResp::EnterGameResp(const EnterGameResp& from)
            : ::google::protobuf::Message(),
            _internal_metadata_(NULL),
            _has_bits_(from._has_bits_),
            _cached_size_(0) {
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            hardid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
            if (from.has_hardid()) {
                hardid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hardid_);
            }
            head_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
            if (from.has_head_url()) {
                head_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.head_url_);
            }
            nick_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
            if (from.has_nick_name()) {
                nick_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nick_name_);
            }
            if (from.has_additinal_data()) {
                additinal_data_ = new ::hall::base::AdditinalData(*from.additinal_data_);
            } else {
                additinal_data_ = NULL;
            }
            if (from.has_roomdata()) {
                roomdata_ = new ::game::base::RoomData(*from.roomdata_);
            } else {
                roomdata_ = NULL;
            }
            ::memcpy(&code_, &from.code_,
                     static_cast<size_t>(reinterpret_cast<char*>(&lose_bout_) -
                     reinterpret_cast<char*>(&code_)) + sizeof(lose_bout_));
            // @@protoc_insertion_point(copy_constructor:hall.base.EnterGameResp)
        }

        void EnterGameResp::SharedCtor() {
            _cached_size_ = 0;
            hardid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
            head_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
            nick_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
            ::memset(&additinal_data_, 0, static_cast<size_t>(
                reinterpret_cast<char*>(&lose_bout_) -
                reinterpret_cast<char*>(&additinal_data_)) + sizeof(lose_bout_));
        }

        EnterGameResp::~EnterGameResp() {
            // @@protoc_insertion_point(destructor:hall.base.EnterGameResp)
            SharedDtor();
        }

        void EnterGameResp::SharedDtor() {
            hardid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
            head_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
            nick_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
            if (this != internal_default_instance()) delete additinal_data_;
            if (this != internal_default_instance()) delete roomdata_;
        }

        void EnterGameResp::SetCachedSize(int size) const {
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
        }
        const ::google::protobuf::Descriptor* EnterGameResp::descriptor() {
            ::protobuf_hall_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
            return ::protobuf_hall_5fbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
        }

        const EnterGameResp& EnterGameResp::default_instance() {
            ::protobuf_hall_5fbase_2eproto::InitDefaultsEnterGameResp();
            return *internal_default_instance();
        }

        EnterGameResp* EnterGameResp::New(::google::protobuf::Arena* arena) const {
            EnterGameResp* n = new EnterGameResp;
            if (arena != NULL) {
                arena->Own(n);
            }
            return n;
        }

        void EnterGameResp::Clear() {
            // @@protoc_insertion_point(message_clear_start:hall.base.EnterGameResp)
            ::google::protobuf::uint32 cached_has_bits = 0;
            // Prevent compiler warnings about cached_has_bits being unused
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            if (cached_has_bits & 31u) {
                if (cached_has_bits & 0x00000001u) {
                    GOOGLE_DCHECK(!hardid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
                    (*hardid_.UnsafeRawStringPointer())->clear();
                }
                if (cached_has_bits & 0x00000002u) {
                    GOOGLE_DCHECK(!head_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
                    (*head_url_.UnsafeRawStringPointer())->clear();
                }
                if (cached_has_bits & 0x00000004u) {
                    GOOGLE_DCHECK(!nick_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
                    (*nick_name_.UnsafeRawStringPointer())->clear();
                }
                if (cached_has_bits & 0x00000008u) {
                    GOOGLE_DCHECK(additinal_data_ != NULL);
                    additinal_data_->Clear();
                }
                if (cached_has_bits & 0x00000010u) {
                    GOOGLE_DCHECK(roomdata_ != NULL);
                    roomdata_->Clear();
                }
            }
            if (cached_has_bits & 224u) {
                ::memset(&code_, 0, static_cast<size_t>(
                    reinterpret_cast<char*>(&deposit_) -
                    reinterpret_cast<char*>(&code_)) + sizeof(deposit_));
            }
            if (cached_has_bits & 3840u) {
                ::memset(&user_type_, 0, static_cast<size_t>(
                    reinterpret_cast<char*>(&lose_bout_) -
                    reinterpret_cast<char*>(&user_type_)) + sizeof(lose_bout_));
            }
            _has_bits_.Clear();
            _internal_metadata_.Clear();
        }

        bool EnterGameResp::MergePartialFromCodedStream(
            ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
            ::google::protobuf::uint32 tag;
            // @@protoc_insertion_point(parse_start:hall.base.EnterGameResp)
            for (;;) {
                ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
                tag = p.first;
                if (!p.second) goto handle_unusual;
                switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
                    // optional int32 code = 1;
                    case 1: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
                            set_has_code();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &code_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // optional int32 userid = 2;
                    case 2: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
                            set_has_userid();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &userid_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // optional int64 deposit = 3;
                    case 3: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
                            set_has_deposit();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                                input, &deposit_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // optional int32 user_type = 4;
                    case 4: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
                            set_has_user_type();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &user_type_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // optional int32 total_bout = 5;
                    case 5: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
                            set_has_total_bout();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &total_bout_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // optional int32 win_bout = 6;
                    case 6: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
                            set_has_win_bout();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &win_bout_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // optional int32 lose_bout = 7;
                    case 7: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
                            set_has_lose_bout();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &lose_bout_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // optional string hardid = 8;
                    case 8: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
                            DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                                input, this->mutable_hardid()));
                            ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
                                this->hardid().data(), static_cast<int>(this->hardid().length()),
                                ::google::protobuf::internal::WireFormat::PARSE,
                                "hall.base.EnterGameResp.hardid");
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // optional string head_url = 9;
                    case 9: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
                            DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                                input, this->mutable_head_url()));
                            ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
                                this->head_url().data(), static_cast<int>(this->head_url().length()),
                                ::google::protobuf::internal::WireFormat::PARSE,
                                "hall.base.EnterGameResp.head_url");
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // optional string nick_name = 10;
                    case 10: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
                            DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                                input, this->mutable_nick_name()));
                            ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
                                this->nick_name().data(), static_cast<int>(this->nick_name().length()),
                                ::google::protobuf::internal::WireFormat::PARSE,
                                "hall.base.EnterGameResp.nick_name");
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                             // optional .hall.base.AdditinalData additinal_data = 11;
                    case 11: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
                            DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                                input, mutable_additinal_data()));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                             // optional .game.base.RoomData roomdata = 12;
                    case 12: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
                            DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                                input, mutable_roomdata()));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                    default: {
handle_unusual:
                        if (tag == 0) {
                            goto success;
                        }
                        DO_(::google::protobuf::internal::WireFormat::SkipField(
                            input, tag, _internal_metadata_.mutable_unknown_fields()));
                        break;
                    }
                }
            }
success:
            // @@protoc_insertion_point(parse_success:hall.base.EnterGameResp)
            return true;
failure:
            // @@protoc_insertion_point(parse_failure:hall.base.EnterGameResp)
            return false;
#undef DO_
        }

        void EnterGameResp::SerializeWithCachedSizes(
            ::google::protobuf::io::CodedOutputStream* output) const {
            // @@protoc_insertion_point(serialize_start:hall.base.EnterGameResp)
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            // optional int32 code = 1;
            if (cached_has_bits & 0x00000020u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
            }

            // optional int32 userid = 2;
            if (cached_has_bits & 0x00000040u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->userid(), output);
            }

            // optional int64 deposit = 3;
            if (cached_has_bits & 0x00000080u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->deposit(), output);
            }

            // optional int32 user_type = 4;
            if (cached_has_bits & 0x00000100u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->user_type(), output);
            }

            // optional int32 total_bout = 5;
            if (cached_has_bits & 0x00000200u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->total_bout(), output);
            }

            // optional int32 win_bout = 6;
            if (cached_has_bits & 0x00000400u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->win_bout(), output);
            }

            // optional int32 lose_bout = 7;
            if (cached_has_bits & 0x00000800u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->lose_bout(), output);
            }

            // optional string hardid = 8;
            if (cached_has_bits & 0x00000001u) {
                ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
                    this->hardid().data(), static_cast<int>(this->hardid().length()),
                    ::google::protobuf::internal::WireFormat::SERIALIZE,
                    "hall.base.EnterGameResp.hardid");
                ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
                    8, this->hardid(), output);
            }

            // optional string head_url = 9;
            if (cached_has_bits & 0x00000002u) {
                ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
                    this->head_url().data(), static_cast<int>(this->head_url().length()),
                    ::google::protobuf::internal::WireFormat::SERIALIZE,
                    "hall.base.EnterGameResp.head_url");
                ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
                    9, this->head_url(), output);
            }

            // optional string nick_name = 10;
            if (cached_has_bits & 0x00000004u) {
                ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
                    this->nick_name().data(), static_cast<int>(this->nick_name().length()),
                    ::google::protobuf::internal::WireFormat::SERIALIZE,
                    "hall.base.EnterGameResp.nick_name");
                ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
                    10, this->nick_name(), output);
            }

            // optional .hall.base.AdditinalData additinal_data = 11;
            if (cached_has_bits & 0x00000008u) {
                ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
                    11, *this->additinal_data_, output);
            }

            // optional .game.base.RoomData roomdata = 12;
            if (cached_has_bits & 0x00000010u) {
                ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
                    12, *this->roomdata_, output);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
                    _internal_metadata_.unknown_fields(), output);
            }
            // @@protoc_insertion_point(serialize_end:hall.base.EnterGameResp)
        }

        ::google::protobuf::uint8* EnterGameResp::InternalSerializeWithCachedSizesToArray(
            bool deterministic, ::google::protobuf::uint8* target) const {
            (void) deterministic; // Unused
            // @@protoc_insertion_point(serialize_to_array_start:hall.base.EnterGameResp)
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            // optional int32 code = 1;
            if (cached_has_bits & 0x00000020u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
            }

            // optional int32 userid = 2;
            if (cached_has_bits & 0x00000040u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->userid(), target);
            }

            // optional int64 deposit = 3;
            if (cached_has_bits & 0x00000080u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->deposit(), target);
            }

            // optional int32 user_type = 4;
            if (cached_has_bits & 0x00000100u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->user_type(), target);
            }

            // optional int32 total_bout = 5;
            if (cached_has_bits & 0x00000200u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->total_bout(), target);
            }

            // optional int32 win_bout = 6;
            if (cached_has_bits & 0x00000400u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->win_bout(), target);
            }

            // optional int32 lose_bout = 7;
            if (cached_has_bits & 0x00000800u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->lose_bout(), target);
            }

            // optional string hardid = 8;
            if (cached_has_bits & 0x00000001u) {
                ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
                    this->hardid().data(), static_cast<int>(this->hardid().length()),
                    ::google::protobuf::internal::WireFormat::SERIALIZE,
                    "hall.base.EnterGameResp.hardid");
                target =
                    ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
                    8, this->hardid(), target);
            }

            // optional string head_url = 9;
            if (cached_has_bits & 0x00000002u) {
                ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
                    this->head_url().data(), static_cast<int>(this->head_url().length()),
                    ::google::protobuf::internal::WireFormat::SERIALIZE,
                    "hall.base.EnterGameResp.head_url");
                target =
                    ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
                    9, this->head_url(), target);
            }

            // optional string nick_name = 10;
            if (cached_has_bits & 0x00000004u) {
                ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
                    this->nick_name().data(), static_cast<int>(this->nick_name().length()),
                    ::google::protobuf::internal::WireFormat::SERIALIZE,
                    "hall.base.EnterGameResp.nick_name");
                target =
                    ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
                    10, this->nick_name(), target);
            }

            // optional .hall.base.AdditinalData additinal_data = 11;
            if (cached_has_bits & 0x00000008u) {
                target = ::google::protobuf::internal::WireFormatLite::
                    InternalWriteMessageToArray(
                    11, *this->additinal_data_, deterministic, target);
            }

            // optional .game.base.RoomData roomdata = 12;
            if (cached_has_bits & 0x00000010u) {
                target = ::google::protobuf::internal::WireFormatLite::
                    InternalWriteMessageToArray(
                    12, *this->roomdata_, deterministic, target);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                    _internal_metadata_.unknown_fields(), target);
            }
            // @@protoc_insertion_point(serialize_to_array_end:hall.base.EnterGameResp)
            return target;
        }

        size_t EnterGameResp::ByteSizeLong() const {
            // @@protoc_insertion_point(message_byte_size_start:hall.base.EnterGameResp)
            size_t total_size = 0;

            if (_internal_metadata_.have_unknown_fields()) {
                total_size +=
                    ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
                    _internal_metadata_.unknown_fields());
            }
            if (_has_bits_[0 / 32] & 255u) {
                // optional string hardid = 8;
                if (has_hardid()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::StringSize(
                        this->hardid());
                }

                // optional string head_url = 9;
                if (has_head_url()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::StringSize(
                        this->head_url());
                }

                // optional string nick_name = 10;
                if (has_nick_name()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::StringSize(
                        this->nick_name());
                }

                // optional .hall.base.AdditinalData additinal_data = 11;
                if (has_additinal_data()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::MessageSize(
                        *this->additinal_data_);
                }

                // optional .game.base.RoomData roomdata = 12;
                if (has_roomdata()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::MessageSize(
                        *this->roomdata_);
                }

                // optional int32 code = 1;
                if (has_code()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::Int32Size(
                        this->code());
                }

                // optional int32 userid = 2;
                if (has_userid()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::Int32Size(
                        this->userid());
                }

                // optional int64 deposit = 3;
                if (has_deposit()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::Int64Size(
                        this->deposit());
                }

            }
            if (_has_bits_[8 / 32] & 3840u) {
                // optional int32 user_type = 4;
                if (has_user_type()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::Int32Size(
                        this->user_type());
                }

                // optional int32 total_bout = 5;
                if (has_total_bout()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::Int32Size(
                        this->total_bout());
                }

                // optional int32 win_bout = 6;
                if (has_win_bout()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::Int32Size(
                        this->win_bout());
                }

                // optional int32 lose_bout = 7;
                if (has_lose_bout()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::Int32Size(
                        this->lose_bout());
                }

            }
            int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = cached_size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
            return total_size;
        }

        void EnterGameResp::MergeFrom(const ::google::protobuf::Message& from) {
            // @@protoc_insertion_point(generalized_merge_from_start:hall.base.EnterGameResp)
            GOOGLE_DCHECK_NE(&from, this);
            const EnterGameResp* source =
                ::google::protobuf::internal::DynamicCastToGenerated<const EnterGameResp>(
                &from);
            if (source == NULL) {
                // @@protoc_insertion_point(generalized_merge_from_cast_fail:hall.base.EnterGameResp)
                ::google::protobuf::internal::ReflectionOps::Merge(from, this);
            } else {
                // @@protoc_insertion_point(generalized_merge_from_cast_success:hall.base.EnterGameResp)
                MergeFrom(*source);
            }
        }

        void EnterGameResp::MergeFrom(const EnterGameResp& from) {
            // @@protoc_insertion_point(class_specific_merge_from_start:hall.base.EnterGameResp)
            GOOGLE_DCHECK_NE(&from, this);
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = from._has_bits_[0];
            if (cached_has_bits & 255u) {
                if (cached_has_bits & 0x00000001u) {
                    set_has_hardid();
                    hardid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hardid_);
                }
                if (cached_has_bits & 0x00000002u) {
                    set_has_head_url();
                    head_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.head_url_);
                }
                if (cached_has_bits & 0x00000004u) {
                    set_has_nick_name();
                    nick_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nick_name_);
                }
                if (cached_has_bits & 0x00000008u) {
                    mutable_additinal_data()->::hall::base::AdditinalData::MergeFrom(from.additinal_data());
                }
                if (cached_has_bits & 0x00000010u) {
                    mutable_roomdata()->::game::base::RoomData::MergeFrom(from.roomdata());
                }
                if (cached_has_bits & 0x00000020u) {
                    code_ = from.code_;
                }
                if (cached_has_bits & 0x00000040u) {
                    userid_ = from.userid_;
                }
                if (cached_has_bits & 0x00000080u) {
                    deposit_ = from.deposit_;
                }
                _has_bits_[0] |= cached_has_bits;
            }
            if (cached_has_bits & 3840u) {
                if (cached_has_bits & 0x00000100u) {
                    user_type_ = from.user_type_;
                }
                if (cached_has_bits & 0x00000200u) {
                    total_bout_ = from.total_bout_;
                }
                if (cached_has_bits & 0x00000400u) {
                    win_bout_ = from.win_bout_;
                }
                if (cached_has_bits & 0x00000800u) {
                    lose_bout_ = from.lose_bout_;
                }
                _has_bits_[0] |= cached_has_bits;
            }
        }

        void EnterGameResp::CopyFrom(const ::google::protobuf::Message& from) {
            // @@protoc_insertion_point(generalized_copy_from_start:hall.base.EnterGameResp)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        void EnterGameResp::CopyFrom(const EnterGameResp& from) {
            // @@protoc_insertion_point(class_specific_copy_from_start:hall.base.EnterGameResp)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        bool EnterGameResp::IsInitialized() const {
            return true;
        }

        void EnterGameResp::Swap(EnterGameResp* other) {
            if (other == this) return;
            InternalSwap(other);
        }
        void EnterGameResp::InternalSwap(EnterGameResp* other) {
            using std::swap;
            hardid_.Swap(&other->hardid_);
            head_url_.Swap(&other->head_url_);
            nick_name_.Swap(&other->nick_name_);
            swap(additinal_data_, other->additinal_data_);
            swap(roomdata_, other->roomdata_);
            swap(code_, other->code_);
            swap(userid_, other->userid_);
            swap(deposit_, other->deposit_);
            swap(user_type_, other->user_type_);
            swap(total_bout_, other->total_bout_);
            swap(win_bout_, other->win_bout_);
            swap(lose_bout_, other->lose_bout_);
            swap(_has_bits_[0], other->_has_bits_[0]);
            _internal_metadata_.Swap(&other->_internal_metadata_);
            swap(_cached_size_, other->_cached_size_);
        }

        ::google::protobuf::Metadata EnterGameResp::GetMetadata() const {
            protobuf_hall_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
            return ::protobuf_hall_5fbase_2eproto::file_level_metadata[kIndexInFileMessages];
        }


        // ===================================================================

        void EnterGameOkNotify::InitAsDefaultInstance() {}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
        const int EnterGameOkNotify::kUseridFieldNumber;
        const int EnterGameOkNotify::kRoomidFieldNumber;
        const int EnterGameOkNotify::kTablenoFieldNumber;
        const int EnterGameOkNotify::kChairnoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

        EnterGameOkNotify::EnterGameOkNotify()
            : ::google::protobuf::Message(), _internal_metadata_(NULL) {
            if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
                ::protobuf_hall_5fbase_2eproto::InitDefaultsEnterGameOkNotify();
            }
            SharedCtor();
            // @@protoc_insertion_point(constructor:hall.base.EnterGameOkNotify)
        }
        EnterGameOkNotify::EnterGameOkNotify(const EnterGameOkNotify& from)
            : ::google::protobuf::Message(),
            _internal_metadata_(NULL),
            _has_bits_(from._has_bits_),
            _cached_size_(0) {
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            ::memcpy(&userid_, &from.userid_,
                     static_cast<size_t>(reinterpret_cast<char*>(&chairno_) -
                     reinterpret_cast<char*>(&userid_)) + sizeof(chairno_));
            // @@protoc_insertion_point(copy_constructor:hall.base.EnterGameOkNotify)
        }

        void EnterGameOkNotify::SharedCtor() {
            _cached_size_ = 0;
            ::memset(&userid_, 0, static_cast<size_t>(
                reinterpret_cast<char*>(&chairno_) -
                reinterpret_cast<char*>(&userid_)) + sizeof(chairno_));
        }

        EnterGameOkNotify::~EnterGameOkNotify() {
            // @@protoc_insertion_point(destructor:hall.base.EnterGameOkNotify)
            SharedDtor();
        }

        void EnterGameOkNotify::SharedDtor() {}

        void EnterGameOkNotify::SetCachedSize(int size) const {
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
        }
        const ::google::protobuf::Descriptor* EnterGameOkNotify::descriptor() {
            ::protobuf_hall_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
            return ::protobuf_hall_5fbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
        }

        const EnterGameOkNotify& EnterGameOkNotify::default_instance() {
            ::protobuf_hall_5fbase_2eproto::InitDefaultsEnterGameOkNotify();
            return *internal_default_instance();
        }

        EnterGameOkNotify* EnterGameOkNotify::New(::google::protobuf::Arena* arena) const {
            EnterGameOkNotify* n = new EnterGameOkNotify;
            if (arena != NULL) {
                arena->Own(n);
            }
            return n;
        }

        void EnterGameOkNotify::Clear() {
            // @@protoc_insertion_point(message_clear_start:hall.base.EnterGameOkNotify)
            ::google::protobuf::uint32 cached_has_bits = 0;
            // Prevent compiler warnings about cached_has_bits being unused
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            if (cached_has_bits & 15u) {
                ::memset(&userid_, 0, static_cast<size_t>(
                    reinterpret_cast<char*>(&chairno_) -
                    reinterpret_cast<char*>(&userid_)) + sizeof(chairno_));
            }
            _has_bits_.Clear();
            _internal_metadata_.Clear();
        }

        bool EnterGameOkNotify::MergePartialFromCodedStream(
            ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
            ::google::protobuf::uint32 tag;
            // @@protoc_insertion_point(parse_start:hall.base.EnterGameOkNotify)
            for (;;) {
                ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
                tag = p.first;
                if (!p.second) goto handle_unusual;
                switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
                    // optional int32 userid = 1;
                    case 1: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
                            set_has_userid();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &userid_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // optional int32 roomid = 2;
                    case 2: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
                            set_has_roomid();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &roomid_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // optional int64 tableno = 3;
                    case 3: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
                            set_has_tableno();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                                input, &tableno_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // optional int32 chairno = 4;
                    case 4: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
                            set_has_chairno();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &chairno_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                    default: {
handle_unusual:
                        if (tag == 0) {
                            goto success;
                        }
                        DO_(::google::protobuf::internal::WireFormat::SkipField(
                            input, tag, _internal_metadata_.mutable_unknown_fields()));
                        break;
                    }
                }
            }
success:
            // @@protoc_insertion_point(parse_success:hall.base.EnterGameOkNotify)
            return true;
failure:
            // @@protoc_insertion_point(parse_failure:hall.base.EnterGameOkNotify)
            return false;
#undef DO_
        }

        void EnterGameOkNotify::SerializeWithCachedSizes(
            ::google::protobuf::io::CodedOutputStream* output) const {
            // @@protoc_insertion_point(serialize_start:hall.base.EnterGameOkNotify)
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            // optional int32 userid = 1;
            if (cached_has_bits & 0x00000001u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
            }

            // optional int32 roomid = 2;
            if (cached_has_bits & 0x00000002u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roomid(), output);
            }

            // optional int64 tableno = 3;
            if (cached_has_bits & 0x00000004u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->tableno(), output);
            }

            // optional int32 chairno = 4;
            if (cached_has_bits & 0x00000008u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->chairno(), output);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
                    _internal_metadata_.unknown_fields(), output);
            }
            // @@protoc_insertion_point(serialize_end:hall.base.EnterGameOkNotify)
        }

        ::google::protobuf::uint8* EnterGameOkNotify::InternalSerializeWithCachedSizesToArray(
            bool deterministic, ::google::protobuf::uint8* target) const {
            (void) deterministic; // Unused
            // @@protoc_insertion_point(serialize_to_array_start:hall.base.EnterGameOkNotify)
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            // optional int32 userid = 1;
            if (cached_has_bits & 0x00000001u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
            }

            // optional int32 roomid = 2;
            if (cached_has_bits & 0x00000002u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roomid(), target);
            }

            // optional int64 tableno = 3;
            if (cached_has_bits & 0x00000004u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->tableno(), target);
            }

            // optional int32 chairno = 4;
            if (cached_has_bits & 0x00000008u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->chairno(), target);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                    _internal_metadata_.unknown_fields(), target);
            }
            // @@protoc_insertion_point(serialize_to_array_end:hall.base.EnterGameOkNotify)
            return target;
        }

        size_t EnterGameOkNotify::ByteSizeLong() const {
            // @@protoc_insertion_point(message_byte_size_start:hall.base.EnterGameOkNotify)
            size_t total_size = 0;

            if (_internal_metadata_.have_unknown_fields()) {
                total_size +=
                    ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
                    _internal_metadata_.unknown_fields());
            }
            if (_has_bits_[0 / 32] & 15u) {
                // optional int32 userid = 1;
                if (has_userid()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::Int32Size(
                        this->userid());
                }

                // optional int32 roomid = 2;
                if (has_roomid()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::Int32Size(
                        this->roomid());
                }

                // optional int64 tableno = 3;
                if (has_tableno()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::Int64Size(
                        this->tableno());
                }

                // optional int32 chairno = 4;
                if (has_chairno()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::Int32Size(
                        this->chairno());
                }

            }
            int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = cached_size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
            return total_size;
        }

        void EnterGameOkNotify::MergeFrom(const ::google::protobuf::Message& from) {
            // @@protoc_insertion_point(generalized_merge_from_start:hall.base.EnterGameOkNotify)
            GOOGLE_DCHECK_NE(&from, this);
            const EnterGameOkNotify* source =
                ::google::protobuf::internal::DynamicCastToGenerated<const EnterGameOkNotify>(
                &from);
            if (source == NULL) {
                // @@protoc_insertion_point(generalized_merge_from_cast_fail:hall.base.EnterGameOkNotify)
                ::google::protobuf::internal::ReflectionOps::Merge(from, this);
            } else {
                // @@protoc_insertion_point(generalized_merge_from_cast_success:hall.base.EnterGameOkNotify)
                MergeFrom(*source);
            }
        }

        void EnterGameOkNotify::MergeFrom(const EnterGameOkNotify& from) {
            // @@protoc_insertion_point(class_specific_merge_from_start:hall.base.EnterGameOkNotify)
            GOOGLE_DCHECK_NE(&from, this);
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = from._has_bits_[0];
            if (cached_has_bits & 15u) {
                if (cached_has_bits & 0x00000001u) {
                    userid_ = from.userid_;
                }
                if (cached_has_bits & 0x00000002u) {
                    roomid_ = from.roomid_;
                }
                if (cached_has_bits & 0x00000004u) {
                    tableno_ = from.tableno_;
                }
                if (cached_has_bits & 0x00000008u) {
                    chairno_ = from.chairno_;
                }
                _has_bits_[0] |= cached_has_bits;
            }
        }

        void EnterGameOkNotify::CopyFrom(const ::google::protobuf::Message& from) {
            // @@protoc_insertion_point(generalized_copy_from_start:hall.base.EnterGameOkNotify)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        void EnterGameOkNotify::CopyFrom(const EnterGameOkNotify& from) {
            // @@protoc_insertion_point(class_specific_copy_from_start:hall.base.EnterGameOkNotify)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        bool EnterGameOkNotify::IsInitialized() const {
            return true;
        }

        void EnterGameOkNotify::Swap(EnterGameOkNotify* other) {
            if (other == this) return;
            InternalSwap(other);
        }
        void EnterGameOkNotify::InternalSwap(EnterGameOkNotify* other) {
            using std::swap;
            swap(userid_, other->userid_);
            swap(roomid_, other->roomid_);
            swap(tableno_, other->tableno_);
            swap(chairno_, other->chairno_);
            swap(_has_bits_[0], other->_has_bits_[0]);
            _internal_metadata_.Swap(&other->_internal_metadata_);
            swap(_cached_size_, other->_cached_size_);
        }

        ::google::protobuf::Metadata EnterGameOkNotify::GetMetadata() const {
            protobuf_hall_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
            return ::protobuf_hall_5fbase_2eproto::file_level_metadata[kIndexInFileMessages];
        }


        // ===================================================================

        void LeaveGameNotify::InitAsDefaultInstance() {}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
        const int LeaveGameNotify::kUseridFieldNumber;
        const int LeaveGameNotify::kRoomidFieldNumber;
        const int LeaveGameNotify::kTablenoFieldNumber;
        const int LeaveGameNotify::kChairnoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

        LeaveGameNotify::LeaveGameNotify()
            : ::google::protobuf::Message(), _internal_metadata_(NULL) {
            if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
                ::protobuf_hall_5fbase_2eproto::InitDefaultsLeaveGameNotify();
            }
            SharedCtor();
            // @@protoc_insertion_point(constructor:hall.base.LeaveGameNotify)
        }
        LeaveGameNotify::LeaveGameNotify(const LeaveGameNotify& from)
            : ::google::protobuf::Message(),
            _internal_metadata_(NULL),
            _has_bits_(from._has_bits_),
            _cached_size_(0) {
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            ::memcpy(&userid_, &from.userid_,
                     static_cast<size_t>(reinterpret_cast<char*>(&chairno_) -
                     reinterpret_cast<char*>(&userid_)) + sizeof(chairno_));
            // @@protoc_insertion_point(copy_constructor:hall.base.LeaveGameNotify)
        }

        void LeaveGameNotify::SharedCtor() {
            _cached_size_ = 0;
            ::memset(&userid_, 0, static_cast<size_t>(
                reinterpret_cast<char*>(&chairno_) -
                reinterpret_cast<char*>(&userid_)) + sizeof(chairno_));
        }

        LeaveGameNotify::~LeaveGameNotify() {
            // @@protoc_insertion_point(destructor:hall.base.LeaveGameNotify)
            SharedDtor();
        }

        void LeaveGameNotify::SharedDtor() {}

        void LeaveGameNotify::SetCachedSize(int size) const {
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
        }
        const ::google::protobuf::Descriptor* LeaveGameNotify::descriptor() {
            ::protobuf_hall_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
            return ::protobuf_hall_5fbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
        }

        const LeaveGameNotify& LeaveGameNotify::default_instance() {
            ::protobuf_hall_5fbase_2eproto::InitDefaultsLeaveGameNotify();
            return *internal_default_instance();
        }

        LeaveGameNotify* LeaveGameNotify::New(::google::protobuf::Arena* arena) const {
            LeaveGameNotify* n = new LeaveGameNotify;
            if (arena != NULL) {
                arena->Own(n);
            }
            return n;
        }

        void LeaveGameNotify::Clear() {
            // @@protoc_insertion_point(message_clear_start:hall.base.LeaveGameNotify)
            ::google::protobuf::uint32 cached_has_bits = 0;
            // Prevent compiler warnings about cached_has_bits being unused
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            if (cached_has_bits & 15u) {
                ::memset(&userid_, 0, static_cast<size_t>(
                    reinterpret_cast<char*>(&chairno_) -
                    reinterpret_cast<char*>(&userid_)) + sizeof(chairno_));
            }
            _has_bits_.Clear();
            _internal_metadata_.Clear();
        }

        bool LeaveGameNotify::MergePartialFromCodedStream(
            ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
            ::google::protobuf::uint32 tag;
            // @@protoc_insertion_point(parse_start:hall.base.LeaveGameNotify)
            for (;;) {
                ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
                tag = p.first;
                if (!p.second) goto handle_unusual;
                switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
                    // optional int32 userid = 1;
                    case 1: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
                            set_has_userid();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &userid_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // optional int32 roomid = 2;
                    case 2: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
                            set_has_roomid();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &roomid_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // optional int64 tableno = 3;
                    case 3: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
                            set_has_tableno();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                                input, &tableno_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // optional int32 chairno = 4;
                    case 4: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
                            set_has_chairno();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &chairno_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                    default: {
handle_unusual:
                        if (tag == 0) {
                            goto success;
                        }
                        DO_(::google::protobuf::internal::WireFormat::SkipField(
                            input, tag, _internal_metadata_.mutable_unknown_fields()));
                        break;
                    }
                }
            }
success:
            // @@protoc_insertion_point(parse_success:hall.base.LeaveGameNotify)
            return true;
failure:
            // @@protoc_insertion_point(parse_failure:hall.base.LeaveGameNotify)
            return false;
#undef DO_
        }

        void LeaveGameNotify::SerializeWithCachedSizes(
            ::google::protobuf::io::CodedOutputStream* output) const {
            // @@protoc_insertion_point(serialize_start:hall.base.LeaveGameNotify)
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            // optional int32 userid = 1;
            if (cached_has_bits & 0x00000001u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
            }

            // optional int32 roomid = 2;
            if (cached_has_bits & 0x00000002u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roomid(), output);
            }

            // optional int64 tableno = 3;
            if (cached_has_bits & 0x00000004u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->tableno(), output);
            }

            // optional int32 chairno = 4;
            if (cached_has_bits & 0x00000008u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->chairno(), output);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
                    _internal_metadata_.unknown_fields(), output);
            }
            // @@protoc_insertion_point(serialize_end:hall.base.LeaveGameNotify)
        }

        ::google::protobuf::uint8* LeaveGameNotify::InternalSerializeWithCachedSizesToArray(
            bool deterministic, ::google::protobuf::uint8* target) const {
            (void) deterministic; // Unused
            // @@protoc_insertion_point(serialize_to_array_start:hall.base.LeaveGameNotify)
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            // optional int32 userid = 1;
            if (cached_has_bits & 0x00000001u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
            }

            // optional int32 roomid = 2;
            if (cached_has_bits & 0x00000002u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roomid(), target);
            }

            // optional int64 tableno = 3;
            if (cached_has_bits & 0x00000004u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->tableno(), target);
            }

            // optional int32 chairno = 4;
            if (cached_has_bits & 0x00000008u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->chairno(), target);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                    _internal_metadata_.unknown_fields(), target);
            }
            // @@protoc_insertion_point(serialize_to_array_end:hall.base.LeaveGameNotify)
            return target;
        }

        size_t LeaveGameNotify::ByteSizeLong() const {
            // @@protoc_insertion_point(message_byte_size_start:hall.base.LeaveGameNotify)
            size_t total_size = 0;

            if (_internal_metadata_.have_unknown_fields()) {
                total_size +=
                    ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
                    _internal_metadata_.unknown_fields());
            }
            if (_has_bits_[0 / 32] & 15u) {
                // optional int32 userid = 1;
                if (has_userid()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::Int32Size(
                        this->userid());
                }

                // optional int32 roomid = 2;
                if (has_roomid()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::Int32Size(
                        this->roomid());
                }

                // optional int64 tableno = 3;
                if (has_tableno()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::Int64Size(
                        this->tableno());
                }

                // optional int32 chairno = 4;
                if (has_chairno()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::Int32Size(
                        this->chairno());
                }

            }
            int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = cached_size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
            return total_size;
        }

        void LeaveGameNotify::MergeFrom(const ::google::protobuf::Message& from) {
            // @@protoc_insertion_point(generalized_merge_from_start:hall.base.LeaveGameNotify)
            GOOGLE_DCHECK_NE(&from, this);
            const LeaveGameNotify* source =
                ::google::protobuf::internal::DynamicCastToGenerated<const LeaveGameNotify>(
                &from);
            if (source == NULL) {
                // @@protoc_insertion_point(generalized_merge_from_cast_fail:hall.base.LeaveGameNotify)
                ::google::protobuf::internal::ReflectionOps::Merge(from, this);
            } else {
                // @@protoc_insertion_point(generalized_merge_from_cast_success:hall.base.LeaveGameNotify)
                MergeFrom(*source);
            }
        }

        void LeaveGameNotify::MergeFrom(const LeaveGameNotify& from) {
            // @@protoc_insertion_point(class_specific_merge_from_start:hall.base.LeaveGameNotify)
            GOOGLE_DCHECK_NE(&from, this);
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = from._has_bits_[0];
            if (cached_has_bits & 15u) {
                if (cached_has_bits & 0x00000001u) {
                    userid_ = from.userid_;
                }
                if (cached_has_bits & 0x00000002u) {
                    roomid_ = from.roomid_;
                }
                if (cached_has_bits & 0x00000004u) {
                    tableno_ = from.tableno_;
                }
                if (cached_has_bits & 0x00000008u) {
                    chairno_ = from.chairno_;
                }
                _has_bits_[0] |= cached_has_bits;
            }
        }

        void LeaveGameNotify::CopyFrom(const ::google::protobuf::Message& from) {
            // @@protoc_insertion_point(generalized_copy_from_start:hall.base.LeaveGameNotify)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        void LeaveGameNotify::CopyFrom(const LeaveGameNotify& from) {
            // @@protoc_insertion_point(class_specific_copy_from_start:hall.base.LeaveGameNotify)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        bool LeaveGameNotify::IsInitialized() const {
            return true;
        }

        void LeaveGameNotify::Swap(LeaveGameNotify* other) {
            if (other == this) return;
            InternalSwap(other);
        }
        void LeaveGameNotify::InternalSwap(LeaveGameNotify* other) {
            using std::swap;
            swap(userid_, other->userid_);
            swap(roomid_, other->roomid_);
            swap(tableno_, other->tableno_);
            swap(chairno_, other->chairno_);
            swap(_has_bits_[0], other->_has_bits_[0]);
            _internal_metadata_.Swap(&other->_internal_metadata_);
            swap(_cached_size_, other->_cached_size_);
        }

        ::google::protobuf::Metadata LeaveGameNotify::GetMetadata() const {
            protobuf_hall_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
            return ::protobuf_hall_5fbase_2eproto::file_level_metadata[kIndexInFileMessages];
        }


        // ===================================================================

        void UserGameResult::InitAsDefaultInstance() {}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
        const int UserGameResult::kUseridFieldNumber;
        const int UserGameResult::kChairnoFieldNumber;
        const int UserGameResult::kBaseDepositFieldNumber;
        const int UserGameResult::kOldDepositFieldNumber;
        const int UserGameResult::kDiffDepositFieldNumber;
        const int UserGameResult::kCutFieldNumber;
        const int UserGameResult::kFeeFieldNumber;
        const int UserGameResult::kExtraFieldNumber;
        const int UserGameResult::kTimecostFieldNumber;
        const int UserGameResult::kBoutCountFieldNumber;
        const int UserGameResult::kWinCountFieldNumber;
        const int UserGameResult::kLossCountFieldNumber;
        const int UserGameResult::kStandoffCountFieldNumber;
        const int UserGameResult::kOfflineCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

        UserGameResult::UserGameResult()
            : ::google::protobuf::Message(), _internal_metadata_(NULL) {
            if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
                ::protobuf_hall_5fbase_2eproto::InitDefaultsUserGameResult();
            }
            SharedCtor();
            // @@protoc_insertion_point(constructor:hall.base.UserGameResult)
        }
        UserGameResult::UserGameResult(const UserGameResult& from)
            : ::google::protobuf::Message(),
            _internal_metadata_(NULL),
            _has_bits_(from._has_bits_),
            _cached_size_(0) {
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            ::memcpy(&userid_, &from.userid_,
                     static_cast<size_t>(reinterpret_cast<char*>(&offline_count_) -
                     reinterpret_cast<char*>(&userid_)) + sizeof(offline_count_));
            // @@protoc_insertion_point(copy_constructor:hall.base.UserGameResult)
        }

        void UserGameResult::SharedCtor() {
            _cached_size_ = 0;
            ::memset(&userid_, 0, static_cast<size_t>(
                reinterpret_cast<char*>(&offline_count_) -
                reinterpret_cast<char*>(&userid_)) + sizeof(offline_count_));
        }

        UserGameResult::~UserGameResult() {
            // @@protoc_insertion_point(destructor:hall.base.UserGameResult)
            SharedDtor();
        }

        void UserGameResult::SharedDtor() {}

        void UserGameResult::SetCachedSize(int size) const {
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
        }
        const ::google::protobuf::Descriptor* UserGameResult::descriptor() {
            ::protobuf_hall_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
            return ::protobuf_hall_5fbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
        }

        const UserGameResult& UserGameResult::default_instance() {
            ::protobuf_hall_5fbase_2eproto::InitDefaultsUserGameResult();
            return *internal_default_instance();
        }

        UserGameResult* UserGameResult::New(::google::protobuf::Arena* arena) const {
            UserGameResult* n = new UserGameResult;
            if (arena != NULL) {
                arena->Own(n);
            }
            return n;
        }

        void UserGameResult::Clear() {
            // @@protoc_insertion_point(message_clear_start:hall.base.UserGameResult)
            ::google::protobuf::uint32 cached_has_bits = 0;
            // Prevent compiler warnings about cached_has_bits being unused
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            if (cached_has_bits & 255u) {
                ::memset(&userid_, 0, static_cast<size_t>(
                    reinterpret_cast<char*>(&extra_) -
                    reinterpret_cast<char*>(&userid_)) + sizeof(extra_));
            }
            if (cached_has_bits & 16128u) {
                ::memset(&timecost_, 0, static_cast<size_t>(
                    reinterpret_cast<char*>(&offline_count_) -
                    reinterpret_cast<char*>(&timecost_)) + sizeof(offline_count_));
            }
            _has_bits_.Clear();
            _internal_metadata_.Clear();
        }

        bool UserGameResult::MergePartialFromCodedStream(
            ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
            ::google::protobuf::uint32 tag;
            // @@protoc_insertion_point(parse_start:hall.base.UserGameResult)
            for (;;) {
                ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
                tag = p.first;
                if (!p.second) goto handle_unusual;
                switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
                    // optional int32 userid = 1;
                    case 1: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
                            set_has_userid();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &userid_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // optional int32 chairno = 2;
                    case 2: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
                            set_has_chairno();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &chairno_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // optional int64 base_deposit = 3;
                    case 3: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
                            set_has_base_deposit();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                                input, &base_deposit_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // optional int64 old_deposit = 4;
                    case 4: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
                            set_has_old_deposit();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                                input, &old_deposit_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // optional int64 diff_deposit = 5;
                    case 5: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
                            set_has_diff_deposit();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                                input, &diff_deposit_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // optional int64 cut = 6;
                    case 6: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
                            set_has_cut();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                                input, &cut_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // optional int64 fee = 7;
                    case 7: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
                            set_has_fee();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                                input, &fee_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // optional int64 extra = 8;
                    case 8: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
                            set_has_extra();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                                input, &extra_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // optional int32 timecost = 9;
                    case 9: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
                            set_has_timecost();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &timecost_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // optional int32 bout_count = 10;
                    case 10: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
                            set_has_bout_count();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &bout_count_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                             // optional int32 win_count = 11;
                    case 11: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
                            set_has_win_count();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &win_count_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                             // optional int32 loss_count = 12;
                    case 12: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
                            set_has_loss_count();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &loss_count_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                             // optional int32 standoff_count = 13;
                    case 13: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
                            set_has_standoff_count();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &standoff_count_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                             // optional int32 offline_count = 14;
                    case 14: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
                            set_has_offline_count();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &offline_count_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                    default: {
handle_unusual:
                        if (tag == 0) {
                            goto success;
                        }
                        DO_(::google::protobuf::internal::WireFormat::SkipField(
                            input, tag, _internal_metadata_.mutable_unknown_fields()));
                        break;
                    }
                }
            }
success:
            // @@protoc_insertion_point(parse_success:hall.base.UserGameResult)
            return true;
failure:
            // @@protoc_insertion_point(parse_failure:hall.base.UserGameResult)
            return false;
#undef DO_
        }

        void UserGameResult::SerializeWithCachedSizes(
            ::google::protobuf::io::CodedOutputStream* output) const {
            // @@protoc_insertion_point(serialize_start:hall.base.UserGameResult)
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            // optional int32 userid = 1;
            if (cached_has_bits & 0x00000001u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
            }

            // optional int32 chairno = 2;
            if (cached_has_bits & 0x00000002u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->chairno(), output);
            }

            // optional int64 base_deposit = 3;
            if (cached_has_bits & 0x00000004u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->base_deposit(), output);
            }

            // optional int64 old_deposit = 4;
            if (cached_has_bits & 0x00000008u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->old_deposit(), output);
            }

            // optional int64 diff_deposit = 5;
            if (cached_has_bits & 0x00000010u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->diff_deposit(), output);
            }

            // optional int64 cut = 6;
            if (cached_has_bits & 0x00000020u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->cut(), output);
            }

            // optional int64 fee = 7;
            if (cached_has_bits & 0x00000040u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->fee(), output);
            }

            // optional int64 extra = 8;
            if (cached_has_bits & 0x00000080u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->extra(), output);
            }

            // optional int32 timecost = 9;
            if (cached_has_bits & 0x00000100u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->timecost(), output);
            }

            // optional int32 bout_count = 10;
            if (cached_has_bits & 0x00000200u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->bout_count(), output);
            }

            // optional int32 win_count = 11;
            if (cached_has_bits & 0x00000400u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->win_count(), output);
            }

            // optional int32 loss_count = 12;
            if (cached_has_bits & 0x00000800u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->loss_count(), output);
            }

            // optional int32 standoff_count = 13;
            if (cached_has_bits & 0x00001000u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->standoff_count(), output);
            }

            // optional int32 offline_count = 14;
            if (cached_has_bits & 0x00002000u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->offline_count(), output);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
                    _internal_metadata_.unknown_fields(), output);
            }
            // @@protoc_insertion_point(serialize_end:hall.base.UserGameResult)
        }

        ::google::protobuf::uint8* UserGameResult::InternalSerializeWithCachedSizesToArray(
            bool deterministic, ::google::protobuf::uint8* target) const {
            (void) deterministic; // Unused
            // @@protoc_insertion_point(serialize_to_array_start:hall.base.UserGameResult)
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            // optional int32 userid = 1;
            if (cached_has_bits & 0x00000001u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
            }

            // optional int32 chairno = 2;
            if (cached_has_bits & 0x00000002u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->chairno(), target);
            }

            // optional int64 base_deposit = 3;
            if (cached_has_bits & 0x00000004u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->base_deposit(), target);
            }

            // optional int64 old_deposit = 4;
            if (cached_has_bits & 0x00000008u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->old_deposit(), target);
            }

            // optional int64 diff_deposit = 5;
            if (cached_has_bits & 0x00000010u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->diff_deposit(), target);
            }

            // optional int64 cut = 6;
            if (cached_has_bits & 0x00000020u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->cut(), target);
            }

            // optional int64 fee = 7;
            if (cached_has_bits & 0x00000040u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->fee(), target);
            }

            // optional int64 extra = 8;
            if (cached_has_bits & 0x00000080u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->extra(), target);
            }

            // optional int32 timecost = 9;
            if (cached_has_bits & 0x00000100u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->timecost(), target);
            }

            // optional int32 bout_count = 10;
            if (cached_has_bits & 0x00000200u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->bout_count(), target);
            }

            // optional int32 win_count = 11;
            if (cached_has_bits & 0x00000400u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->win_count(), target);
            }

            // optional int32 loss_count = 12;
            if (cached_has_bits & 0x00000800u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->loss_count(), target);
            }

            // optional int32 standoff_count = 13;
            if (cached_has_bits & 0x00001000u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->standoff_count(), target);
            }

            // optional int32 offline_count = 14;
            if (cached_has_bits & 0x00002000u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->offline_count(), target);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                    _internal_metadata_.unknown_fields(), target);
            }
            // @@protoc_insertion_point(serialize_to_array_end:hall.base.UserGameResult)
            return target;
        }

        size_t UserGameResult::ByteSizeLong() const {
            // @@protoc_insertion_point(message_byte_size_start:hall.base.UserGameResult)
            size_t total_size = 0;

            if (_internal_metadata_.have_unknown_fields()) {
                total_size +=
                    ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
                    _internal_metadata_.unknown_fields());
            }
            if (_has_bits_[0 / 32] & 255u) {
                // optional int32 userid = 1;
                if (has_userid()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::Int32Size(
                        this->userid());
                }

                // optional int32 chairno = 2;
                if (has_chairno()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::Int32Size(
                        this->chairno());
                }

                // optional int64 base_deposit = 3;
                if (has_base_deposit()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::Int64Size(
                        this->base_deposit());
                }

                // optional int64 old_deposit = 4;
                if (has_old_deposit()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::Int64Size(
                        this->old_deposit());
                }

                // optional int64 diff_deposit = 5;
                if (has_diff_deposit()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::Int64Size(
                        this->diff_deposit());
                }

                // optional int64 cut = 6;
                if (has_cut()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::Int64Size(
                        this->cut());
                }

                // optional int64 fee = 7;
                if (has_fee()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::Int64Size(
                        this->fee());
                }

                // optional int64 extra = 8;
                if (has_extra()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::Int64Size(
                        this->extra());
                }

            }
            if (_has_bits_[8 / 32] & 16128u) {
                // optional int32 timecost = 9;
                if (has_timecost()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::Int32Size(
                        this->timecost());
                }

                // optional int32 bout_count = 10;
                if (has_bout_count()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::Int32Size(
                        this->bout_count());
                }

                // optional int32 win_count = 11;
                if (has_win_count()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::Int32Size(
                        this->win_count());
                }

                // optional int32 loss_count = 12;
                if (has_loss_count()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::Int32Size(
                        this->loss_count());
                }

                // optional int32 standoff_count = 13;
                if (has_standoff_count()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::Int32Size(
                        this->standoff_count());
                }

                // optional int32 offline_count = 14;
                if (has_offline_count()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::Int32Size(
                        this->offline_count());
                }

            }
            int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = cached_size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
            return total_size;
        }

        void UserGameResult::MergeFrom(const ::google::protobuf::Message& from) {
            // @@protoc_insertion_point(generalized_merge_from_start:hall.base.UserGameResult)
            GOOGLE_DCHECK_NE(&from, this);
            const UserGameResult* source =
                ::google::protobuf::internal::DynamicCastToGenerated<const UserGameResult>(
                &from);
            if (source == NULL) {
                // @@protoc_insertion_point(generalized_merge_from_cast_fail:hall.base.UserGameResult)
                ::google::protobuf::internal::ReflectionOps::Merge(from, this);
            } else {
                // @@protoc_insertion_point(generalized_merge_from_cast_success:hall.base.UserGameResult)
                MergeFrom(*source);
            }
        }

        void UserGameResult::MergeFrom(const UserGameResult& from) {
            // @@protoc_insertion_point(class_specific_merge_from_start:hall.base.UserGameResult)
            GOOGLE_DCHECK_NE(&from, this);
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = from._has_bits_[0];
            if (cached_has_bits & 255u) {
                if (cached_has_bits & 0x00000001u) {
                    userid_ = from.userid_;
                }
                if (cached_has_bits & 0x00000002u) {
                    chairno_ = from.chairno_;
                }
                if (cached_has_bits & 0x00000004u) {
                    base_deposit_ = from.base_deposit_;
                }
                if (cached_has_bits & 0x00000008u) {
                    old_deposit_ = from.old_deposit_;
                }
                if (cached_has_bits & 0x00000010u) {
                    diff_deposit_ = from.diff_deposit_;
                }
                if (cached_has_bits & 0x00000020u) {
                    cut_ = from.cut_;
                }
                if (cached_has_bits & 0x00000040u) {
                    fee_ = from.fee_;
                }
                if (cached_has_bits & 0x00000080u) {
                    extra_ = from.extra_;
                }
                _has_bits_[0] |= cached_has_bits;
            }
            if (cached_has_bits & 16128u) {
                if (cached_has_bits & 0x00000100u) {
                    timecost_ = from.timecost_;
                }
                if (cached_has_bits & 0x00000200u) {
                    bout_count_ = from.bout_count_;
                }
                if (cached_has_bits & 0x00000400u) {
                    win_count_ = from.win_count_;
                }
                if (cached_has_bits & 0x00000800u) {
                    loss_count_ = from.loss_count_;
                }
                if (cached_has_bits & 0x00001000u) {
                    standoff_count_ = from.standoff_count_;
                }
                if (cached_has_bits & 0x00002000u) {
                    offline_count_ = from.offline_count_;
                }
                _has_bits_[0] |= cached_has_bits;
            }
        }

        void UserGameResult::CopyFrom(const ::google::protobuf::Message& from) {
            // @@protoc_insertion_point(generalized_copy_from_start:hall.base.UserGameResult)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        void UserGameResult::CopyFrom(const UserGameResult& from) {
            // @@protoc_insertion_point(class_specific_copy_from_start:hall.base.UserGameResult)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        bool UserGameResult::IsInitialized() const {
            return true;
        }

        void UserGameResult::Swap(UserGameResult* other) {
            if (other == this) return;
            InternalSwap(other);
        }
        void UserGameResult::InternalSwap(UserGameResult* other) {
            using std::swap;
            swap(userid_, other->userid_);
            swap(chairno_, other->chairno_);
            swap(base_deposit_, other->base_deposit_);
            swap(old_deposit_, other->old_deposit_);
            swap(diff_deposit_, other->diff_deposit_);
            swap(cut_, other->cut_);
            swap(fee_, other->fee_);
            swap(extra_, other->extra_);
            swap(timecost_, other->timecost_);
            swap(bout_count_, other->bout_count_);
            swap(win_count_, other->win_count_);
            swap(loss_count_, other->loss_count_);
            swap(standoff_count_, other->standoff_count_);
            swap(offline_count_, other->offline_count_);
            swap(_has_bits_[0], other->_has_bits_[0]);
            _internal_metadata_.Swap(&other->_internal_metadata_);
            swap(_cached_size_, other->_cached_size_);
        }

        ::google::protobuf::Metadata UserGameResult::GetMetadata() const {
            protobuf_hall_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
            return ::protobuf_hall_5fbase_2eproto::file_level_metadata[kIndexInFileMessages];
        }


        // ===================================================================

        void RefreshGameResult::InitAsDefaultInstance() {}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
        const int RefreshGameResult::kRoomidFieldNumber;
        const int RefreshGameResult::kTablenoFieldNumber;
        const int RefreshGameResult::kFlagFieldNumber;
        const int RefreshGameResult::kUserResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

        RefreshGameResult::RefreshGameResult()
            : ::google::protobuf::Message(), _internal_metadata_(NULL) {
            if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
                ::protobuf_hall_5fbase_2eproto::InitDefaultsRefreshGameResult();
            }
            SharedCtor();
            // @@protoc_insertion_point(constructor:hall.base.RefreshGameResult)
        }
        RefreshGameResult::RefreshGameResult(const RefreshGameResult& from)
            : ::google::protobuf::Message(),
            _internal_metadata_(NULL),
            _has_bits_(from._has_bits_),
            _cached_size_(0),
            user_result_(from.user_result_) {
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            ::memcpy(&tableno_, &from.tableno_,
                     static_cast<size_t>(reinterpret_cast<char*>(&flag_) -
                     reinterpret_cast<char*>(&tableno_)) + sizeof(flag_));
            // @@protoc_insertion_point(copy_constructor:hall.base.RefreshGameResult)
        }

        void RefreshGameResult::SharedCtor() {
            _cached_size_ = 0;
            ::memset(&tableno_, 0, static_cast<size_t>(
                reinterpret_cast<char*>(&flag_) -
                reinterpret_cast<char*>(&tableno_)) + sizeof(flag_));
        }

        RefreshGameResult::~RefreshGameResult() {
            // @@protoc_insertion_point(destructor:hall.base.RefreshGameResult)
            SharedDtor();
        }

        void RefreshGameResult::SharedDtor() {}

        void RefreshGameResult::SetCachedSize(int size) const {
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
        }
        const ::google::protobuf::Descriptor* RefreshGameResult::descriptor() {
            ::protobuf_hall_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
            return ::protobuf_hall_5fbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
        }

        const RefreshGameResult& RefreshGameResult::default_instance() {
            ::protobuf_hall_5fbase_2eproto::InitDefaultsRefreshGameResult();
            return *internal_default_instance();
        }

        RefreshGameResult* RefreshGameResult::New(::google::protobuf::Arena* arena) const {
            RefreshGameResult* n = new RefreshGameResult;
            if (arena != NULL) {
                arena->Own(n);
            }
            return n;
        }

        void RefreshGameResult::Clear() {
            // @@protoc_insertion_point(message_clear_start:hall.base.RefreshGameResult)
            ::google::protobuf::uint32 cached_has_bits = 0;
            // Prevent compiler warnings about cached_has_bits being unused
            (void) cached_has_bits;

            user_result_.Clear();
            cached_has_bits = _has_bits_[0];
            if (cached_has_bits & 7u) {
                ::memset(&tableno_, 0, static_cast<size_t>(
                    reinterpret_cast<char*>(&flag_) -
                    reinterpret_cast<char*>(&tableno_)) + sizeof(flag_));
            }
            _has_bits_.Clear();
            _internal_metadata_.Clear();
        }

        bool RefreshGameResult::MergePartialFromCodedStream(
            ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
            ::google::protobuf::uint32 tag;
            // @@protoc_insertion_point(parse_start:hall.base.RefreshGameResult)
            for (;;) {
                ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
                tag = p.first;
                if (!p.second) goto handle_unusual;
                switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
                    // optional int32 roomid = 1;
                    case 1: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
                            set_has_roomid();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &roomid_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // optional int64 tableno = 2;
                    case 2: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
                            set_has_tableno();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                                input, &tableno_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // optional int32 flag = 3;
                    case 3: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
                            set_has_flag();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &flag_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // repeated .hall.base.UserGameResult user_result = 4;
                    case 4: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
                            DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_user_result()));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                    default: {
handle_unusual:
                        if (tag == 0) {
                            goto success;
                        }
                        DO_(::google::protobuf::internal::WireFormat::SkipField(
                            input, tag, _internal_metadata_.mutable_unknown_fields()));
                        break;
                    }
                }
            }
success:
            // @@protoc_insertion_point(parse_success:hall.base.RefreshGameResult)
            return true;
failure:
            // @@protoc_insertion_point(parse_failure:hall.base.RefreshGameResult)
            return false;
#undef DO_
        }

        void RefreshGameResult::SerializeWithCachedSizes(
            ::google::protobuf::io::CodedOutputStream* output) const {
            // @@protoc_insertion_point(serialize_start:hall.base.RefreshGameResult)
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            // optional int32 roomid = 1;
            if (cached_has_bits & 0x00000002u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
            }

            // optional int64 tableno = 2;
            if (cached_has_bits & 0x00000001u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->tableno(), output);
            }

            // optional int32 flag = 3;
            if (cached_has_bits & 0x00000004u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->flag(), output);
            }

            // repeated .hall.base.UserGameResult user_result = 4;
            for (unsigned int i = 0,
                 n = static_cast<unsigned int>(this->user_result_size()); i < n; i++) {
                ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
                    4, this->user_result(static_cast<int>(i)), output);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
                    _internal_metadata_.unknown_fields(), output);
            }
            // @@protoc_insertion_point(serialize_end:hall.base.RefreshGameResult)
        }

        ::google::protobuf::uint8* RefreshGameResult::InternalSerializeWithCachedSizesToArray(
            bool deterministic, ::google::protobuf::uint8* target) const {
            (void) deterministic; // Unused
            // @@protoc_insertion_point(serialize_to_array_start:hall.base.RefreshGameResult)
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            // optional int32 roomid = 1;
            if (cached_has_bits & 0x00000002u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
            }

            // optional int64 tableno = 2;
            if (cached_has_bits & 0x00000001u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->tableno(), target);
            }

            // optional int32 flag = 3;
            if (cached_has_bits & 0x00000004u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->flag(), target);
            }

            // repeated .hall.base.UserGameResult user_result = 4;
            for (unsigned int i = 0,
                 n = static_cast<unsigned int>(this->user_result_size()); i < n; i++) {
                target = ::google::protobuf::internal::WireFormatLite::
                    InternalWriteMessageToArray(
                    4, this->user_result(static_cast<int>(i)), deterministic, target);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                    _internal_metadata_.unknown_fields(), target);
            }
            // @@protoc_insertion_point(serialize_to_array_end:hall.base.RefreshGameResult)
            return target;
        }

        size_t RefreshGameResult::ByteSizeLong() const {
            // @@protoc_insertion_point(message_byte_size_start:hall.base.RefreshGameResult)
            size_t total_size = 0;

            if (_internal_metadata_.have_unknown_fields()) {
                total_size +=
                    ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
                    _internal_metadata_.unknown_fields());
            }
            // repeated .hall.base.UserGameResult user_result = 4;
  {
      unsigned int count = static_cast<unsigned int>(this->user_result_size());
      total_size += 1UL * count;
      for (unsigned int i = 0; i < count; i++) {
          total_size +=
              ::google::protobuf::internal::WireFormatLite::MessageSize(
              this->user_result(static_cast<int>(i)));
      }
  }

  if (_has_bits_[0 / 32] & 7u) {
      // optional int64 tableno = 2;
      if (has_tableno()) {
          total_size += 1 +
              ::google::protobuf::internal::WireFormatLite::Int64Size(
              this->tableno());
      }

      // optional int32 roomid = 1;
      if (has_roomid()) {
          total_size += 1 +
              ::google::protobuf::internal::WireFormatLite::Int32Size(
              this->roomid());
      }

      // optional int32 flag = 3;
      if (has_flag()) {
          total_size += 1 +
              ::google::protobuf::internal::WireFormatLite::Int32Size(
              this->flag());
      }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
        }

        void RefreshGameResult::MergeFrom(const ::google::protobuf::Message& from) {
            // @@protoc_insertion_point(generalized_merge_from_start:hall.base.RefreshGameResult)
            GOOGLE_DCHECK_NE(&from, this);
            const RefreshGameResult* source =
                ::google::protobuf::internal::DynamicCastToGenerated<const RefreshGameResult>(
                &from);
            if (source == NULL) {
                // @@protoc_insertion_point(generalized_merge_from_cast_fail:hall.base.RefreshGameResult)
                ::google::protobuf::internal::ReflectionOps::Merge(from, this);
            } else {
                // @@protoc_insertion_point(generalized_merge_from_cast_success:hall.base.RefreshGameResult)
                MergeFrom(*source);
            }
        }

        void RefreshGameResult::MergeFrom(const RefreshGameResult& from) {
            // @@protoc_insertion_point(class_specific_merge_from_start:hall.base.RefreshGameResult)
            GOOGLE_DCHECK_NE(&from, this);
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            user_result_.MergeFrom(from.user_result_);
            cached_has_bits = from._has_bits_[0];
            if (cached_has_bits & 7u) {
                if (cached_has_bits & 0x00000001u) {
                    tableno_ = from.tableno_;
                }
                if (cached_has_bits & 0x00000002u) {
                    roomid_ = from.roomid_;
                }
                if (cached_has_bits & 0x00000004u) {
                    flag_ = from.flag_;
                }
                _has_bits_[0] |= cached_has_bits;
            }
        }

        void RefreshGameResult::CopyFrom(const ::google::protobuf::Message& from) {
            // @@protoc_insertion_point(generalized_copy_from_start:hall.base.RefreshGameResult)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        void RefreshGameResult::CopyFrom(const RefreshGameResult& from) {
            // @@protoc_insertion_point(class_specific_copy_from_start:hall.base.RefreshGameResult)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        bool RefreshGameResult::IsInitialized() const {
            return true;
        }

        void RefreshGameResult::Swap(RefreshGameResult* other) {
            if (other == this) return;
            InternalSwap(other);
        }
        void RefreshGameResult::InternalSwap(RefreshGameResult* other) {
            using std::swap;
            user_result_.InternalSwap(&other->user_result_);
            swap(tableno_, other->tableno_);
            swap(roomid_, other->roomid_);
            swap(flag_, other->flag_);
            swap(_has_bits_[0], other->_has_bits_[0]);
            _internal_metadata_.Swap(&other->_internal_metadata_);
            swap(_cached_size_, other->_cached_size_);
        }

        ::google::protobuf::Metadata RefreshGameResult::GetMetadata() const {
            protobuf_hall_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
            return ::protobuf_hall_5fbase_2eproto::file_level_metadata[kIndexInFileMessages];
        }


        // @@protoc_insertion_point(namespace_scope)
    }  // namespace base
}  // namespace hall

// @@protoc_insertion_point(global_scope)
