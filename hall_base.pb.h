// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hall_base.proto

#ifndef PROTOBUF_hall_5fbase_2eproto__INCLUDED
#define PROTOBUF_hall_5fbase_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "game_base.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_hall_5fbase_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[7];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsAdditinalDataImpl();
void InitDefaultsAdditinalData();
void InitDefaultsEnterGameReqImpl();
void InitDefaultsEnterGameReq();
void InitDefaultsEnterGameRespImpl();
void InitDefaultsEnterGameResp();
void InitDefaultsEnterGameOkNotifyImpl();
void InitDefaultsEnterGameOkNotify();
void InitDefaultsLeaveGameNotifyImpl();
void InitDefaultsLeaveGameNotify();
void InitDefaultsUserGameResultImpl();
void InitDefaultsUserGameResult();
void InitDefaultsRefreshGameResultImpl();
void InitDefaultsRefreshGameResult();
inline void InitDefaults() {
  InitDefaultsAdditinalData();
  InitDefaultsEnterGameReq();
  InitDefaultsEnterGameResp();
  InitDefaultsEnterGameOkNotify();
  InitDefaultsLeaveGameNotify();
  InitDefaultsUserGameResult();
  InitDefaultsRefreshGameResult();
}
}  // namespace protobuf_hall_5fbase_2eproto
namespace hall {
namespace base {
class AdditinalData;
class AdditinalDataDefaultTypeInternal;
extern AdditinalDataDefaultTypeInternal _AdditinalData_default_instance_;
class EnterGameOkNotify;
class EnterGameOkNotifyDefaultTypeInternal;
extern EnterGameOkNotifyDefaultTypeInternal _EnterGameOkNotify_default_instance_;
class EnterGameReq;
class EnterGameReqDefaultTypeInternal;
extern EnterGameReqDefaultTypeInternal _EnterGameReq_default_instance_;
class EnterGameResp;
class EnterGameRespDefaultTypeInternal;
extern EnterGameRespDefaultTypeInternal _EnterGameResp_default_instance_;
class LeaveGameNotify;
class LeaveGameNotifyDefaultTypeInternal;
extern LeaveGameNotifyDefaultTypeInternal _LeaveGameNotify_default_instance_;
class RefreshGameResult;
class RefreshGameResultDefaultTypeInternal;
extern RefreshGameResultDefaultTypeInternal _RefreshGameResult_default_instance_;
class UserGameResult;
class UserGameResultDefaultTypeInternal;
extern UserGameResultDefaultTypeInternal _UserGameResult_default_instance_;
}  // namespace base
}  // namespace hall
namespace hall {
namespace base {

// ===================================================================

class AdditinalData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hall.base.AdditinalData) */ {
 public:
  AdditinalData();
  virtual ~AdditinalData();

  AdditinalData(const AdditinalData& from);

  inline AdditinalData& operator=(const AdditinalData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AdditinalData(AdditinalData&& from) noexcept
    : AdditinalData() {
    *this = ::std::move(from);
  }

  inline AdditinalData& operator=(AdditinalData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AdditinalData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AdditinalData* internal_default_instance() {
    return reinterpret_cast<const AdditinalData*>(
               &_AdditinalData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(AdditinalData* other);
  friend void swap(AdditinalData& a, AdditinalData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AdditinalData* New() const PROTOBUF_FINAL { return New(NULL); }

  AdditinalData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AdditinalData& from);
  void MergeFrom(const AdditinalData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AdditinalData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes data = 2;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // optional int32 original_req = 1;
  bool has_original_req() const;
  void clear_original_req();
  static const int kOriginalReqFieldNumber = 1;
  ::google::protobuf::int32 original_req() const;
  void set_original_req(::google::protobuf::int32 value);

  // optional int32 data_len = 3;
  bool has_data_len() const;
  void clear_data_len();
  static const int kDataLenFieldNumber = 3;
  ::google::protobuf::int32 data_len() const;
  void set_data_len(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:hall.base.AdditinalData)
 private:
  void set_has_original_req();
  void clear_has_original_req();
  void set_has_data();
  void clear_has_data();
  void set_has_data_len();
  void clear_has_data_len();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::int32 original_req_;
  ::google::protobuf::int32 data_len_;
  friend struct ::protobuf_hall_5fbase_2eproto::TableStruct;
  friend void ::protobuf_hall_5fbase_2eproto::InitDefaultsAdditinalDataImpl();
};
// -------------------------------------------------------------------

class EnterGameReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hall.base.EnterGameReq) */ {
 public:
  EnterGameReq();
  virtual ~EnterGameReq();

  EnterGameReq(const EnterGameReq& from);

  inline EnterGameReq& operator=(const EnterGameReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EnterGameReq(EnterGameReq&& from) noexcept
    : EnterGameReq() {
    *this = ::std::move(from);
  }

  inline EnterGameReq& operator=(EnterGameReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EnterGameReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EnterGameReq* internal_default_instance() {
    return reinterpret_cast<const EnterGameReq*>(
               &_EnterGameReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(EnterGameReq* other);
  friend void swap(EnterGameReq& a, EnterGameReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EnterGameReq* New() const PROTOBUF_FINAL { return New(NULL); }

  EnterGameReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EnterGameReq& from);
  void MergeFrom(const EnterGameReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EnterGameReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game.base.EnterNormalGameReq entergame_req = 1;
  bool has_entergame_req() const;
  void clear_entergame_req();
  static const int kEntergameReqFieldNumber = 1;
  const ::game::base::EnterNormalGameReq& entergame_req() const;
  ::game::base::EnterNormalGameReq* release_entergame_req();
  ::game::base::EnterNormalGameReq* mutable_entergame_req();
  void set_allocated_entergame_req(::game::base::EnterNormalGameReq* entergame_req);

  // optional .hall.base.AdditinalData additinal_data = 2;
  bool has_additinal_data() const;
  void clear_additinal_data();
  static const int kAdditinalDataFieldNumber = 2;
  const ::hall::base::AdditinalData& additinal_data() const;
  ::hall::base::AdditinalData* release_additinal_data();
  ::hall::base::AdditinalData* mutable_additinal_data();
  void set_allocated_additinal_data(::hall::base::AdditinalData* additinal_data);

  // @@protoc_insertion_point(class_scope:hall.base.EnterGameReq)
 private:
  void set_has_entergame_req();
  void clear_has_entergame_req();
  void set_has_additinal_data();
  void clear_has_additinal_data();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::game::base::EnterNormalGameReq* entergame_req_;
  ::hall::base::AdditinalData* additinal_data_;
  friend struct ::protobuf_hall_5fbase_2eproto::TableStruct;
  friend void ::protobuf_hall_5fbase_2eproto::InitDefaultsEnterGameReqImpl();
};
// -------------------------------------------------------------------

class EnterGameResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hall.base.EnterGameResp) */ {
 public:
  EnterGameResp();
  virtual ~EnterGameResp();

  EnterGameResp(const EnterGameResp& from);

  inline EnterGameResp& operator=(const EnterGameResp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EnterGameResp(EnterGameResp&& from) noexcept
    : EnterGameResp() {
    *this = ::std::move(from);
  }

  inline EnterGameResp& operator=(EnterGameResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EnterGameResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EnterGameResp* internal_default_instance() {
    return reinterpret_cast<const EnterGameResp*>(
               &_EnterGameResp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(EnterGameResp* other);
  friend void swap(EnterGameResp& a, EnterGameResp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EnterGameResp* New() const PROTOBUF_FINAL { return New(NULL); }

  EnterGameResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EnterGameResp& from);
  void MergeFrom(const EnterGameResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EnterGameResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string hardid = 8;
  bool has_hardid() const;
  void clear_hardid();
  static const int kHardidFieldNumber = 8;
  const ::std::string& hardid() const;
  void set_hardid(const ::std::string& value);
  #if LANG_CXX11
  void set_hardid(::std::string&& value);
  #endif
  void set_hardid(const char* value);
  void set_hardid(const char* value, size_t size);
  ::std::string* mutable_hardid();
  ::std::string* release_hardid();
  void set_allocated_hardid(::std::string* hardid);

  // optional string head_url = 9;
  bool has_head_url() const;
  void clear_head_url();
  static const int kHeadUrlFieldNumber = 9;
  const ::std::string& head_url() const;
  void set_head_url(const ::std::string& value);
  #if LANG_CXX11
  void set_head_url(::std::string&& value);
  #endif
  void set_head_url(const char* value);
  void set_head_url(const char* value, size_t size);
  ::std::string* mutable_head_url();
  ::std::string* release_head_url();
  void set_allocated_head_url(::std::string* head_url);

  // optional string nick_name = 10;
  bool has_nick_name() const;
  void clear_nick_name();
  static const int kNickNameFieldNumber = 10;
  const ::std::string& nick_name() const;
  void set_nick_name(const ::std::string& value);
  #if LANG_CXX11
  void set_nick_name(::std::string&& value);
  #endif
  void set_nick_name(const char* value);
  void set_nick_name(const char* value, size_t size);
  ::std::string* mutable_nick_name();
  ::std::string* release_nick_name();
  void set_allocated_nick_name(::std::string* nick_name);

  // optional .hall.base.AdditinalData additinal_data = 11;
  bool has_additinal_data() const;
  void clear_additinal_data();
  static const int kAdditinalDataFieldNumber = 11;
  const ::hall::base::AdditinalData& additinal_data() const;
  ::hall::base::AdditinalData* release_additinal_data();
  ::hall::base::AdditinalData* mutable_additinal_data();
  void set_allocated_additinal_data(::hall::base::AdditinalData* additinal_data);

  // optional .game.base.RoomData roomdata = 12;
  bool has_roomdata() const;
  void clear_roomdata();
  static const int kRoomdataFieldNumber = 12;
  const ::game::base::RoomData& roomdata() const;
  ::game::base::RoomData* release_roomdata();
  ::game::base::RoomData* mutable_roomdata();
  void set_allocated_roomdata(::game::base::RoomData* roomdata);

  // optional int32 code = 1;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // optional int32 userid = 2;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 2;
  ::google::protobuf::int32 userid() const;
  void set_userid(::google::protobuf::int32 value);

  // optional int64 deposit = 3;
  bool has_deposit() const;
  void clear_deposit();
  static const int kDepositFieldNumber = 3;
  ::google::protobuf::int64 deposit() const;
  void set_deposit(::google::protobuf::int64 value);

  // optional int32 user_type = 4;
  bool has_user_type() const;
  void clear_user_type();
  static const int kUserTypeFieldNumber = 4;
  ::google::protobuf::int32 user_type() const;
  void set_user_type(::google::protobuf::int32 value);

  // optional int32 total_bout = 5;
  bool has_total_bout() const;
  void clear_total_bout();
  static const int kTotalBoutFieldNumber = 5;
  ::google::protobuf::int32 total_bout() const;
  void set_total_bout(::google::protobuf::int32 value);

  // optional int32 win_bout = 6;
  bool has_win_bout() const;
  void clear_win_bout();
  static const int kWinBoutFieldNumber = 6;
  ::google::protobuf::int32 win_bout() const;
  void set_win_bout(::google::protobuf::int32 value);

  // optional int32 lose_bout = 7;
  bool has_lose_bout() const;
  void clear_lose_bout();
  static const int kLoseBoutFieldNumber = 7;
  ::google::protobuf::int32 lose_bout() const;
  void set_lose_bout(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:hall.base.EnterGameResp)
 private:
  void set_has_code();
  void clear_has_code();
  void set_has_userid();
  void clear_has_userid();
  void set_has_deposit();
  void clear_has_deposit();
  void set_has_user_type();
  void clear_has_user_type();
  void set_has_total_bout();
  void clear_has_total_bout();
  void set_has_win_bout();
  void clear_has_win_bout();
  void set_has_lose_bout();
  void clear_has_lose_bout();
  void set_has_hardid();
  void clear_has_hardid();
  void set_has_head_url();
  void clear_has_head_url();
  void set_has_nick_name();
  void clear_has_nick_name();
  void set_has_additinal_data();
  void clear_has_additinal_data();
  void set_has_roomdata();
  void clear_has_roomdata();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr hardid_;
  ::google::protobuf::internal::ArenaStringPtr head_url_;
  ::google::protobuf::internal::ArenaStringPtr nick_name_;
  ::hall::base::AdditinalData* additinal_data_;
  ::game::base::RoomData* roomdata_;
  ::google::protobuf::int32 code_;
  ::google::protobuf::int32 userid_;
  ::google::protobuf::int64 deposit_;
  ::google::protobuf::int32 user_type_;
  ::google::protobuf::int32 total_bout_;
  ::google::protobuf::int32 win_bout_;
  ::google::protobuf::int32 lose_bout_;
  friend struct ::protobuf_hall_5fbase_2eproto::TableStruct;
  friend void ::protobuf_hall_5fbase_2eproto::InitDefaultsEnterGameRespImpl();
};
// -------------------------------------------------------------------

class EnterGameOkNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hall.base.EnterGameOkNotify) */ {
 public:
  EnterGameOkNotify();
  virtual ~EnterGameOkNotify();

  EnterGameOkNotify(const EnterGameOkNotify& from);

  inline EnterGameOkNotify& operator=(const EnterGameOkNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EnterGameOkNotify(EnterGameOkNotify&& from) noexcept
    : EnterGameOkNotify() {
    *this = ::std::move(from);
  }

  inline EnterGameOkNotify& operator=(EnterGameOkNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EnterGameOkNotify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EnterGameOkNotify* internal_default_instance() {
    return reinterpret_cast<const EnterGameOkNotify*>(
               &_EnterGameOkNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(EnterGameOkNotify* other);
  friend void swap(EnterGameOkNotify& a, EnterGameOkNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EnterGameOkNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  EnterGameOkNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EnterGameOkNotify& from);
  void MergeFrom(const EnterGameOkNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EnterGameOkNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  ::google::protobuf::int32 userid() const;
  void set_userid(::google::protobuf::int32 value);

  // optional int32 roomid = 2;
  bool has_roomid() const;
  void clear_roomid();
  static const int kRoomidFieldNumber = 2;
  ::google::protobuf::int32 roomid() const;
  void set_roomid(::google::protobuf::int32 value);

  // optional int64 tableno = 3;
  bool has_tableno() const;
  void clear_tableno();
  static const int kTablenoFieldNumber = 3;
  ::google::protobuf::int64 tableno() const;
  void set_tableno(::google::protobuf::int64 value);

  // optional int32 chairno = 4;
  bool has_chairno() const;
  void clear_chairno();
  static const int kChairnoFieldNumber = 4;
  ::google::protobuf::int32 chairno() const;
  void set_chairno(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:hall.base.EnterGameOkNotify)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_roomid();
  void clear_has_roomid();
  void set_has_tableno();
  void clear_has_tableno();
  void set_has_chairno();
  void clear_has_chairno();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 roomid_;
  ::google::protobuf::int64 tableno_;
  ::google::protobuf::int32 chairno_;
  friend struct ::protobuf_hall_5fbase_2eproto::TableStruct;
  friend void ::protobuf_hall_5fbase_2eproto::InitDefaultsEnterGameOkNotifyImpl();
};
// -------------------------------------------------------------------

class LeaveGameNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hall.base.LeaveGameNotify) */ {
 public:
  LeaveGameNotify();
  virtual ~LeaveGameNotify();

  LeaveGameNotify(const LeaveGameNotify& from);

  inline LeaveGameNotify& operator=(const LeaveGameNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LeaveGameNotify(LeaveGameNotify&& from) noexcept
    : LeaveGameNotify() {
    *this = ::std::move(from);
  }

  inline LeaveGameNotify& operator=(LeaveGameNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LeaveGameNotify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LeaveGameNotify* internal_default_instance() {
    return reinterpret_cast<const LeaveGameNotify*>(
               &_LeaveGameNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(LeaveGameNotify* other);
  friend void swap(LeaveGameNotify& a, LeaveGameNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LeaveGameNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  LeaveGameNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LeaveGameNotify& from);
  void MergeFrom(const LeaveGameNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LeaveGameNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  ::google::protobuf::int32 userid() const;
  void set_userid(::google::protobuf::int32 value);

  // optional int32 roomid = 2;
  bool has_roomid() const;
  void clear_roomid();
  static const int kRoomidFieldNumber = 2;
  ::google::protobuf::int32 roomid() const;
  void set_roomid(::google::protobuf::int32 value);

  // optional int64 tableno = 3;
  bool has_tableno() const;
  void clear_tableno();
  static const int kTablenoFieldNumber = 3;
  ::google::protobuf::int64 tableno() const;
  void set_tableno(::google::protobuf::int64 value);

  // optional int32 chairno = 4;
  bool has_chairno() const;
  void clear_chairno();
  static const int kChairnoFieldNumber = 4;
  ::google::protobuf::int32 chairno() const;
  void set_chairno(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:hall.base.LeaveGameNotify)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_roomid();
  void clear_has_roomid();
  void set_has_tableno();
  void clear_has_tableno();
  void set_has_chairno();
  void clear_has_chairno();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 roomid_;
  ::google::protobuf::int64 tableno_;
  ::google::protobuf::int32 chairno_;
  friend struct ::protobuf_hall_5fbase_2eproto::TableStruct;
  friend void ::protobuf_hall_5fbase_2eproto::InitDefaultsLeaveGameNotifyImpl();
};
// -------------------------------------------------------------------

class UserGameResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hall.base.UserGameResult) */ {
 public:
  UserGameResult();
  virtual ~UserGameResult();

  UserGameResult(const UserGameResult& from);

  inline UserGameResult& operator=(const UserGameResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserGameResult(UserGameResult&& from) noexcept
    : UserGameResult() {
    *this = ::std::move(from);
  }

  inline UserGameResult& operator=(UserGameResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserGameResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserGameResult* internal_default_instance() {
    return reinterpret_cast<const UserGameResult*>(
               &_UserGameResult_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(UserGameResult* other);
  friend void swap(UserGameResult& a, UserGameResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserGameResult* New() const PROTOBUF_FINAL { return New(NULL); }

  UserGameResult* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserGameResult& from);
  void MergeFrom(const UserGameResult& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserGameResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  ::google::protobuf::int32 userid() const;
  void set_userid(::google::protobuf::int32 value);

  // optional int32 chairno = 2;
  bool has_chairno() const;
  void clear_chairno();
  static const int kChairnoFieldNumber = 2;
  ::google::protobuf::int32 chairno() const;
  void set_chairno(::google::protobuf::int32 value);

  // optional int64 base_deposit = 3;
  bool has_base_deposit() const;
  void clear_base_deposit();
  static const int kBaseDepositFieldNumber = 3;
  ::google::protobuf::int64 base_deposit() const;
  void set_base_deposit(::google::protobuf::int64 value);

  // optional int64 old_deposit = 4;
  bool has_old_deposit() const;
  void clear_old_deposit();
  static const int kOldDepositFieldNumber = 4;
  ::google::protobuf::int64 old_deposit() const;
  void set_old_deposit(::google::protobuf::int64 value);

  // optional int64 diff_deposit = 5;
  bool has_diff_deposit() const;
  void clear_diff_deposit();
  static const int kDiffDepositFieldNumber = 5;
  ::google::protobuf::int64 diff_deposit() const;
  void set_diff_deposit(::google::protobuf::int64 value);

  // optional int64 cut = 6;
  bool has_cut() const;
  void clear_cut();
  static const int kCutFieldNumber = 6;
  ::google::protobuf::int64 cut() const;
  void set_cut(::google::protobuf::int64 value);

  // optional int64 fee = 7;
  bool has_fee() const;
  void clear_fee();
  static const int kFeeFieldNumber = 7;
  ::google::protobuf::int64 fee() const;
  void set_fee(::google::protobuf::int64 value);

  // optional int64 extra = 8;
  bool has_extra() const;
  void clear_extra();
  static const int kExtraFieldNumber = 8;
  ::google::protobuf::int64 extra() const;
  void set_extra(::google::protobuf::int64 value);

  // optional int32 timecost = 9;
  bool has_timecost() const;
  void clear_timecost();
  static const int kTimecostFieldNumber = 9;
  ::google::protobuf::int32 timecost() const;
  void set_timecost(::google::protobuf::int32 value);

  // optional int32 bout_count = 10;
  bool has_bout_count() const;
  void clear_bout_count();
  static const int kBoutCountFieldNumber = 10;
  ::google::protobuf::int32 bout_count() const;
  void set_bout_count(::google::protobuf::int32 value);

  // optional int32 win_count = 11;
  bool has_win_count() const;
  void clear_win_count();
  static const int kWinCountFieldNumber = 11;
  ::google::protobuf::int32 win_count() const;
  void set_win_count(::google::protobuf::int32 value);

  // optional int32 loss_count = 12;
  bool has_loss_count() const;
  void clear_loss_count();
  static const int kLossCountFieldNumber = 12;
  ::google::protobuf::int32 loss_count() const;
  void set_loss_count(::google::protobuf::int32 value);

  // optional int32 standoff_count = 13;
  bool has_standoff_count() const;
  void clear_standoff_count();
  static const int kStandoffCountFieldNumber = 13;
  ::google::protobuf::int32 standoff_count() const;
  void set_standoff_count(::google::protobuf::int32 value);

  // optional int32 offline_count = 14;
  bool has_offline_count() const;
  void clear_offline_count();
  static const int kOfflineCountFieldNumber = 14;
  ::google::protobuf::int32 offline_count() const;
  void set_offline_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:hall.base.UserGameResult)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_chairno();
  void clear_has_chairno();
  void set_has_base_deposit();
  void clear_has_base_deposit();
  void set_has_old_deposit();
  void clear_has_old_deposit();
  void set_has_diff_deposit();
  void clear_has_diff_deposit();
  void set_has_cut();
  void clear_has_cut();
  void set_has_fee();
  void clear_has_fee();
  void set_has_extra();
  void clear_has_extra();
  void set_has_timecost();
  void clear_has_timecost();
  void set_has_bout_count();
  void clear_has_bout_count();
  void set_has_win_count();
  void clear_has_win_count();
  void set_has_loss_count();
  void clear_has_loss_count();
  void set_has_standoff_count();
  void clear_has_standoff_count();
  void set_has_offline_count();
  void clear_has_offline_count();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 chairno_;
  ::google::protobuf::int64 base_deposit_;
  ::google::protobuf::int64 old_deposit_;
  ::google::protobuf::int64 diff_deposit_;
  ::google::protobuf::int64 cut_;
  ::google::protobuf::int64 fee_;
  ::google::protobuf::int64 extra_;
  ::google::protobuf::int32 timecost_;
  ::google::protobuf::int32 bout_count_;
  ::google::protobuf::int32 win_count_;
  ::google::protobuf::int32 loss_count_;
  ::google::protobuf::int32 standoff_count_;
  ::google::protobuf::int32 offline_count_;
  friend struct ::protobuf_hall_5fbase_2eproto::TableStruct;
  friend void ::protobuf_hall_5fbase_2eproto::InitDefaultsUserGameResultImpl();
};
// -------------------------------------------------------------------

class RefreshGameResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hall.base.RefreshGameResult) */ {
 public:
  RefreshGameResult();
  virtual ~RefreshGameResult();

  RefreshGameResult(const RefreshGameResult& from);

  inline RefreshGameResult& operator=(const RefreshGameResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RefreshGameResult(RefreshGameResult&& from) noexcept
    : RefreshGameResult() {
    *this = ::std::move(from);
  }

  inline RefreshGameResult& operator=(RefreshGameResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RefreshGameResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RefreshGameResult* internal_default_instance() {
    return reinterpret_cast<const RefreshGameResult*>(
               &_RefreshGameResult_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(RefreshGameResult* other);
  friend void swap(RefreshGameResult& a, RefreshGameResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RefreshGameResult* New() const PROTOBUF_FINAL { return New(NULL); }

  RefreshGameResult* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RefreshGameResult& from);
  void MergeFrom(const RefreshGameResult& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RefreshGameResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .hall.base.UserGameResult user_result = 4;
  int user_result_size() const;
  void clear_user_result();
  static const int kUserResultFieldNumber = 4;
  const ::hall::base::UserGameResult& user_result(int index) const;
  ::hall::base::UserGameResult* mutable_user_result(int index);
  ::hall::base::UserGameResult* add_user_result();
  ::google::protobuf::RepeatedPtrField< ::hall::base::UserGameResult >*
      mutable_user_result();
  const ::google::protobuf::RepeatedPtrField< ::hall::base::UserGameResult >&
      user_result() const;

  // optional int64 tableno = 2;
  bool has_tableno() const;
  void clear_tableno();
  static const int kTablenoFieldNumber = 2;
  ::google::protobuf::int64 tableno() const;
  void set_tableno(::google::protobuf::int64 value);

  // optional int32 roomid = 1;
  bool has_roomid() const;
  void clear_roomid();
  static const int kRoomidFieldNumber = 1;
  ::google::protobuf::int32 roomid() const;
  void set_roomid(::google::protobuf::int32 value);

  // optional int32 flag = 3;
  bool has_flag() const;
  void clear_flag();
  static const int kFlagFieldNumber = 3;
  ::google::protobuf::int32 flag() const;
  void set_flag(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:hall.base.RefreshGameResult)
 private:
  void set_has_roomid();
  void clear_has_roomid();
  void set_has_tableno();
  void clear_has_tableno();
  void set_has_flag();
  void clear_has_flag();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::hall::base::UserGameResult > user_result_;
  ::google::protobuf::int64 tableno_;
  ::google::protobuf::int32 roomid_;
  ::google::protobuf::int32 flag_;
  friend struct ::protobuf_hall_5fbase_2eproto::TableStruct;
  friend void ::protobuf_hall_5fbase_2eproto::InitDefaultsRefreshGameResultImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AdditinalData

// optional int32 original_req = 1;
inline bool AdditinalData::has_original_req() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AdditinalData::set_has_original_req() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AdditinalData::clear_has_original_req() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AdditinalData::clear_original_req() {
  original_req_ = 0;
  clear_has_original_req();
}
inline ::google::protobuf::int32 AdditinalData::original_req() const {
  // @@protoc_insertion_point(field_get:hall.base.AdditinalData.original_req)
  return original_req_;
}
inline void AdditinalData::set_original_req(::google::protobuf::int32 value) {
  set_has_original_req();
  original_req_ = value;
  // @@protoc_insertion_point(field_set:hall.base.AdditinalData.original_req)
}

// optional bytes data = 2;
inline bool AdditinalData::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AdditinalData::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AdditinalData::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AdditinalData::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
inline const ::std::string& AdditinalData::data() const {
  // @@protoc_insertion_point(field_get:hall.base.AdditinalData.data)
  return data_.GetNoArena();
}
inline void AdditinalData::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hall.base.AdditinalData.data)
}
#if LANG_CXX11
inline void AdditinalData::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hall.base.AdditinalData.data)
}
#endif
inline void AdditinalData::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hall.base.AdditinalData.data)
}
inline void AdditinalData::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hall.base.AdditinalData.data)
}
inline ::std::string* AdditinalData::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:hall.base.AdditinalData.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AdditinalData::release_data() {
  // @@protoc_insertion_point(field_release:hall.base.AdditinalData.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AdditinalData::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:hall.base.AdditinalData.data)
}

// optional int32 data_len = 3;
inline bool AdditinalData::has_data_len() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AdditinalData::set_has_data_len() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AdditinalData::clear_has_data_len() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AdditinalData::clear_data_len() {
  data_len_ = 0;
  clear_has_data_len();
}
inline ::google::protobuf::int32 AdditinalData::data_len() const {
  // @@protoc_insertion_point(field_get:hall.base.AdditinalData.data_len)
  return data_len_;
}
inline void AdditinalData::set_data_len(::google::protobuf::int32 value) {
  set_has_data_len();
  data_len_ = value;
  // @@protoc_insertion_point(field_set:hall.base.AdditinalData.data_len)
}

// -------------------------------------------------------------------

// EnterGameReq

// optional .game.base.EnterNormalGameReq entergame_req = 1;
inline bool EnterGameReq::has_entergame_req() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EnterGameReq::set_has_entergame_req() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EnterGameReq::clear_has_entergame_req() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::game::base::EnterNormalGameReq& EnterGameReq::entergame_req() const {
  const ::game::base::EnterNormalGameReq* p = entergame_req_;
  // @@protoc_insertion_point(field_get:hall.base.EnterGameReq.entergame_req)
  return p != NULL ? *p : *reinterpret_cast<const ::game::base::EnterNormalGameReq*>(
      &::game::base::_EnterNormalGameReq_default_instance_);
}
inline ::game::base::EnterNormalGameReq* EnterGameReq::release_entergame_req() {
  // @@protoc_insertion_point(field_release:hall.base.EnterGameReq.entergame_req)
  clear_has_entergame_req();
  ::game::base::EnterNormalGameReq* temp = entergame_req_;
  entergame_req_ = NULL;
  return temp;
}
inline ::game::base::EnterNormalGameReq* EnterGameReq::mutable_entergame_req() {
  set_has_entergame_req();
  if (entergame_req_ == NULL) {
    entergame_req_ = new ::game::base::EnterNormalGameReq;
  }
  // @@protoc_insertion_point(field_mutable:hall.base.EnterGameReq.entergame_req)
  return entergame_req_;
}
inline void EnterGameReq::set_allocated_entergame_req(::game::base::EnterNormalGameReq* entergame_req) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(entergame_req_);
  }
  if (entergame_req) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      entergame_req = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, entergame_req, submessage_arena);
    }
    set_has_entergame_req();
  } else {
    clear_has_entergame_req();
  }
  entergame_req_ = entergame_req;
  // @@protoc_insertion_point(field_set_allocated:hall.base.EnterGameReq.entergame_req)
}

// optional .hall.base.AdditinalData additinal_data = 2;
inline bool EnterGameReq::has_additinal_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EnterGameReq::set_has_additinal_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EnterGameReq::clear_has_additinal_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EnterGameReq::clear_additinal_data() {
  if (additinal_data_ != NULL) additinal_data_->Clear();
  clear_has_additinal_data();
}
inline const ::hall::base::AdditinalData& EnterGameReq::additinal_data() const {
  const ::hall::base::AdditinalData* p = additinal_data_;
  // @@protoc_insertion_point(field_get:hall.base.EnterGameReq.additinal_data)
  return p != NULL ? *p : *reinterpret_cast<const ::hall::base::AdditinalData*>(
      &::hall::base::_AdditinalData_default_instance_);
}
inline ::hall::base::AdditinalData* EnterGameReq::release_additinal_data() {
  // @@protoc_insertion_point(field_release:hall.base.EnterGameReq.additinal_data)
  clear_has_additinal_data();
  ::hall::base::AdditinalData* temp = additinal_data_;
  additinal_data_ = NULL;
  return temp;
}
inline ::hall::base::AdditinalData* EnterGameReq::mutable_additinal_data() {
  set_has_additinal_data();
  if (additinal_data_ == NULL) {
    additinal_data_ = new ::hall::base::AdditinalData;
  }
  // @@protoc_insertion_point(field_mutable:hall.base.EnterGameReq.additinal_data)
  return additinal_data_;
}
inline void EnterGameReq::set_allocated_additinal_data(::hall::base::AdditinalData* additinal_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete additinal_data_;
  }
  if (additinal_data) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      additinal_data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, additinal_data, submessage_arena);
    }
    set_has_additinal_data();
  } else {
    clear_has_additinal_data();
  }
  additinal_data_ = additinal_data;
  // @@protoc_insertion_point(field_set_allocated:hall.base.EnterGameReq.additinal_data)
}

// -------------------------------------------------------------------

// EnterGameResp

// optional int32 code = 1;
inline bool EnterGameResp::has_code() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void EnterGameResp::set_has_code() {
  _has_bits_[0] |= 0x00000020u;
}
inline void EnterGameResp::clear_has_code() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void EnterGameResp::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 EnterGameResp::code() const {
  // @@protoc_insertion_point(field_get:hall.base.EnterGameResp.code)
  return code_;
}
inline void EnterGameResp::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:hall.base.EnterGameResp.code)
}

// optional int32 userid = 2;
inline bool EnterGameResp::has_userid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void EnterGameResp::set_has_userid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void EnterGameResp::clear_has_userid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void EnterGameResp::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 EnterGameResp::userid() const {
  // @@protoc_insertion_point(field_get:hall.base.EnterGameResp.userid)
  return userid_;
}
inline void EnterGameResp::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:hall.base.EnterGameResp.userid)
}

// optional int64 deposit = 3;
inline bool EnterGameResp::has_deposit() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void EnterGameResp::set_has_deposit() {
  _has_bits_[0] |= 0x00000080u;
}
inline void EnterGameResp::clear_has_deposit() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void EnterGameResp::clear_deposit() {
  deposit_ = GOOGLE_LONGLONG(0);
  clear_has_deposit();
}
inline ::google::protobuf::int64 EnterGameResp::deposit() const {
  // @@protoc_insertion_point(field_get:hall.base.EnterGameResp.deposit)
  return deposit_;
}
inline void EnterGameResp::set_deposit(::google::protobuf::int64 value) {
  set_has_deposit();
  deposit_ = value;
  // @@protoc_insertion_point(field_set:hall.base.EnterGameResp.deposit)
}

// optional int32 user_type = 4;
inline bool EnterGameResp::has_user_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void EnterGameResp::set_has_user_type() {
  _has_bits_[0] |= 0x00000100u;
}
inline void EnterGameResp::clear_has_user_type() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void EnterGameResp::clear_user_type() {
  user_type_ = 0;
  clear_has_user_type();
}
inline ::google::protobuf::int32 EnterGameResp::user_type() const {
  // @@protoc_insertion_point(field_get:hall.base.EnterGameResp.user_type)
  return user_type_;
}
inline void EnterGameResp::set_user_type(::google::protobuf::int32 value) {
  set_has_user_type();
  user_type_ = value;
  // @@protoc_insertion_point(field_set:hall.base.EnterGameResp.user_type)
}

// optional int32 total_bout = 5;
inline bool EnterGameResp::has_total_bout() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void EnterGameResp::set_has_total_bout() {
  _has_bits_[0] |= 0x00000200u;
}
inline void EnterGameResp::clear_has_total_bout() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void EnterGameResp::clear_total_bout() {
  total_bout_ = 0;
  clear_has_total_bout();
}
inline ::google::protobuf::int32 EnterGameResp::total_bout() const {
  // @@protoc_insertion_point(field_get:hall.base.EnterGameResp.total_bout)
  return total_bout_;
}
inline void EnterGameResp::set_total_bout(::google::protobuf::int32 value) {
  set_has_total_bout();
  total_bout_ = value;
  // @@protoc_insertion_point(field_set:hall.base.EnterGameResp.total_bout)
}

// optional int32 win_bout = 6;
inline bool EnterGameResp::has_win_bout() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void EnterGameResp::set_has_win_bout() {
  _has_bits_[0] |= 0x00000400u;
}
inline void EnterGameResp::clear_has_win_bout() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void EnterGameResp::clear_win_bout() {
  win_bout_ = 0;
  clear_has_win_bout();
}
inline ::google::protobuf::int32 EnterGameResp::win_bout() const {
  // @@protoc_insertion_point(field_get:hall.base.EnterGameResp.win_bout)
  return win_bout_;
}
inline void EnterGameResp::set_win_bout(::google::protobuf::int32 value) {
  set_has_win_bout();
  win_bout_ = value;
  // @@protoc_insertion_point(field_set:hall.base.EnterGameResp.win_bout)
}

// optional int32 lose_bout = 7;
inline bool EnterGameResp::has_lose_bout() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void EnterGameResp::set_has_lose_bout() {
  _has_bits_[0] |= 0x00000800u;
}
inline void EnterGameResp::clear_has_lose_bout() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void EnterGameResp::clear_lose_bout() {
  lose_bout_ = 0;
  clear_has_lose_bout();
}
inline ::google::protobuf::int32 EnterGameResp::lose_bout() const {
  // @@protoc_insertion_point(field_get:hall.base.EnterGameResp.lose_bout)
  return lose_bout_;
}
inline void EnterGameResp::set_lose_bout(::google::protobuf::int32 value) {
  set_has_lose_bout();
  lose_bout_ = value;
  // @@protoc_insertion_point(field_set:hall.base.EnterGameResp.lose_bout)
}

// optional string hardid = 8;
inline bool EnterGameResp::has_hardid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EnterGameResp::set_has_hardid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EnterGameResp::clear_has_hardid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EnterGameResp::clear_hardid() {
  hardid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hardid();
}
inline const ::std::string& EnterGameResp::hardid() const {
  // @@protoc_insertion_point(field_get:hall.base.EnterGameResp.hardid)
  return hardid_.GetNoArena();
}
inline void EnterGameResp::set_hardid(const ::std::string& value) {
  set_has_hardid();
  hardid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hall.base.EnterGameResp.hardid)
}
#if LANG_CXX11
inline void EnterGameResp::set_hardid(::std::string&& value) {
  set_has_hardid();
  hardid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hall.base.EnterGameResp.hardid)
}
#endif
inline void EnterGameResp::set_hardid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_hardid();
  hardid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hall.base.EnterGameResp.hardid)
}
inline void EnterGameResp::set_hardid(const char* value, size_t size) {
  set_has_hardid();
  hardid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hall.base.EnterGameResp.hardid)
}
inline ::std::string* EnterGameResp::mutable_hardid() {
  set_has_hardid();
  // @@protoc_insertion_point(field_mutable:hall.base.EnterGameResp.hardid)
  return hardid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EnterGameResp::release_hardid() {
  // @@protoc_insertion_point(field_release:hall.base.EnterGameResp.hardid)
  clear_has_hardid();
  return hardid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EnterGameResp::set_allocated_hardid(::std::string* hardid) {
  if (hardid != NULL) {
    set_has_hardid();
  } else {
    clear_has_hardid();
  }
  hardid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hardid);
  // @@protoc_insertion_point(field_set_allocated:hall.base.EnterGameResp.hardid)
}

// optional string head_url = 9;
inline bool EnterGameResp::has_head_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EnterGameResp::set_has_head_url() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EnterGameResp::clear_has_head_url() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EnterGameResp::clear_head_url() {
  head_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_head_url();
}
inline const ::std::string& EnterGameResp::head_url() const {
  // @@protoc_insertion_point(field_get:hall.base.EnterGameResp.head_url)
  return head_url_.GetNoArena();
}
inline void EnterGameResp::set_head_url(const ::std::string& value) {
  set_has_head_url();
  head_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hall.base.EnterGameResp.head_url)
}
#if LANG_CXX11
inline void EnterGameResp::set_head_url(::std::string&& value) {
  set_has_head_url();
  head_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hall.base.EnterGameResp.head_url)
}
#endif
inline void EnterGameResp::set_head_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_head_url();
  head_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hall.base.EnterGameResp.head_url)
}
inline void EnterGameResp::set_head_url(const char* value, size_t size) {
  set_has_head_url();
  head_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hall.base.EnterGameResp.head_url)
}
inline ::std::string* EnterGameResp::mutable_head_url() {
  set_has_head_url();
  // @@protoc_insertion_point(field_mutable:hall.base.EnterGameResp.head_url)
  return head_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EnterGameResp::release_head_url() {
  // @@protoc_insertion_point(field_release:hall.base.EnterGameResp.head_url)
  clear_has_head_url();
  return head_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EnterGameResp::set_allocated_head_url(::std::string* head_url) {
  if (head_url != NULL) {
    set_has_head_url();
  } else {
    clear_has_head_url();
  }
  head_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), head_url);
  // @@protoc_insertion_point(field_set_allocated:hall.base.EnterGameResp.head_url)
}

// optional string nick_name = 10;
inline bool EnterGameResp::has_nick_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EnterGameResp::set_has_nick_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EnterGameResp::clear_has_nick_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EnterGameResp::clear_nick_name() {
  nick_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nick_name();
}
inline const ::std::string& EnterGameResp::nick_name() const {
  // @@protoc_insertion_point(field_get:hall.base.EnterGameResp.nick_name)
  return nick_name_.GetNoArena();
}
inline void EnterGameResp::set_nick_name(const ::std::string& value) {
  set_has_nick_name();
  nick_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hall.base.EnterGameResp.nick_name)
}
#if LANG_CXX11
inline void EnterGameResp::set_nick_name(::std::string&& value) {
  set_has_nick_name();
  nick_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hall.base.EnterGameResp.nick_name)
}
#endif
inline void EnterGameResp::set_nick_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nick_name();
  nick_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hall.base.EnterGameResp.nick_name)
}
inline void EnterGameResp::set_nick_name(const char* value, size_t size) {
  set_has_nick_name();
  nick_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hall.base.EnterGameResp.nick_name)
}
inline ::std::string* EnterGameResp::mutable_nick_name() {
  set_has_nick_name();
  // @@protoc_insertion_point(field_mutable:hall.base.EnterGameResp.nick_name)
  return nick_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EnterGameResp::release_nick_name() {
  // @@protoc_insertion_point(field_release:hall.base.EnterGameResp.nick_name)
  clear_has_nick_name();
  return nick_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EnterGameResp::set_allocated_nick_name(::std::string* nick_name) {
  if (nick_name != NULL) {
    set_has_nick_name();
  } else {
    clear_has_nick_name();
  }
  nick_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nick_name);
  // @@protoc_insertion_point(field_set_allocated:hall.base.EnterGameResp.nick_name)
}

// optional .hall.base.AdditinalData additinal_data = 11;
inline bool EnterGameResp::has_additinal_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EnterGameResp::set_has_additinal_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EnterGameResp::clear_has_additinal_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EnterGameResp::clear_additinal_data() {
  if (additinal_data_ != NULL) additinal_data_->Clear();
  clear_has_additinal_data();
}
inline const ::hall::base::AdditinalData& EnterGameResp::additinal_data() const {
  const ::hall::base::AdditinalData* p = additinal_data_;
  // @@protoc_insertion_point(field_get:hall.base.EnterGameResp.additinal_data)
  return p != NULL ? *p : *reinterpret_cast<const ::hall::base::AdditinalData*>(
      &::hall::base::_AdditinalData_default_instance_);
}
inline ::hall::base::AdditinalData* EnterGameResp::release_additinal_data() {
  // @@protoc_insertion_point(field_release:hall.base.EnterGameResp.additinal_data)
  clear_has_additinal_data();
  ::hall::base::AdditinalData* temp = additinal_data_;
  additinal_data_ = NULL;
  return temp;
}
inline ::hall::base::AdditinalData* EnterGameResp::mutable_additinal_data() {
  set_has_additinal_data();
  if (additinal_data_ == NULL) {
    additinal_data_ = new ::hall::base::AdditinalData;
  }
  // @@protoc_insertion_point(field_mutable:hall.base.EnterGameResp.additinal_data)
  return additinal_data_;
}
inline void EnterGameResp::set_allocated_additinal_data(::hall::base::AdditinalData* additinal_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete additinal_data_;
  }
  if (additinal_data) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      additinal_data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, additinal_data, submessage_arena);
    }
    set_has_additinal_data();
  } else {
    clear_has_additinal_data();
  }
  additinal_data_ = additinal_data;
  // @@protoc_insertion_point(field_set_allocated:hall.base.EnterGameResp.additinal_data)
}

// optional .game.base.RoomData roomdata = 12;
inline bool EnterGameResp::has_roomdata() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void EnterGameResp::set_has_roomdata() {
  _has_bits_[0] |= 0x00000010u;
}
inline void EnterGameResp::clear_has_roomdata() {
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::game::base::RoomData& EnterGameResp::roomdata() const {
  const ::game::base::RoomData* p = roomdata_;
  // @@protoc_insertion_point(field_get:hall.base.EnterGameResp.roomdata)
  return p != NULL ? *p : *reinterpret_cast<const ::game::base::RoomData*>(
      &::game::base::_RoomData_default_instance_);
}
inline ::game::base::RoomData* EnterGameResp::release_roomdata() {
  // @@protoc_insertion_point(field_release:hall.base.EnterGameResp.roomdata)
  clear_has_roomdata();
  ::game::base::RoomData* temp = roomdata_;
  roomdata_ = NULL;
  return temp;
}
inline ::game::base::RoomData* EnterGameResp::mutable_roomdata() {
  set_has_roomdata();
  if (roomdata_ == NULL) {
    roomdata_ = new ::game::base::RoomData;
  }
  // @@protoc_insertion_point(field_mutable:hall.base.EnterGameResp.roomdata)
  return roomdata_;
}
inline void EnterGameResp::set_allocated_roomdata(::game::base::RoomData* roomdata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(roomdata_);
  }
  if (roomdata) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      roomdata = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, roomdata, submessage_arena);
    }
    set_has_roomdata();
  } else {
    clear_has_roomdata();
  }
  roomdata_ = roomdata;
  // @@protoc_insertion_point(field_set_allocated:hall.base.EnterGameResp.roomdata)
}

// -------------------------------------------------------------------

// EnterGameOkNotify

// optional int32 userid = 1;
inline bool EnterGameOkNotify::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EnterGameOkNotify::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EnterGameOkNotify::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EnterGameOkNotify::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 EnterGameOkNotify::userid() const {
  // @@protoc_insertion_point(field_get:hall.base.EnterGameOkNotify.userid)
  return userid_;
}
inline void EnterGameOkNotify::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:hall.base.EnterGameOkNotify.userid)
}

// optional int32 roomid = 2;
inline bool EnterGameOkNotify::has_roomid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EnterGameOkNotify::set_has_roomid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EnterGameOkNotify::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EnterGameOkNotify::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
inline ::google::protobuf::int32 EnterGameOkNotify::roomid() const {
  // @@protoc_insertion_point(field_get:hall.base.EnterGameOkNotify.roomid)
  return roomid_;
}
inline void EnterGameOkNotify::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:hall.base.EnterGameOkNotify.roomid)
}

// optional int64 tableno = 3;
inline bool EnterGameOkNotify::has_tableno() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EnterGameOkNotify::set_has_tableno() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EnterGameOkNotify::clear_has_tableno() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EnterGameOkNotify::clear_tableno() {
  tableno_ = GOOGLE_LONGLONG(0);
  clear_has_tableno();
}
inline ::google::protobuf::int64 EnterGameOkNotify::tableno() const {
  // @@protoc_insertion_point(field_get:hall.base.EnterGameOkNotify.tableno)
  return tableno_;
}
inline void EnterGameOkNotify::set_tableno(::google::protobuf::int64 value) {
  set_has_tableno();
  tableno_ = value;
  // @@protoc_insertion_point(field_set:hall.base.EnterGameOkNotify.tableno)
}

// optional int32 chairno = 4;
inline bool EnterGameOkNotify::has_chairno() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EnterGameOkNotify::set_has_chairno() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EnterGameOkNotify::clear_has_chairno() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EnterGameOkNotify::clear_chairno() {
  chairno_ = 0;
  clear_has_chairno();
}
inline ::google::protobuf::int32 EnterGameOkNotify::chairno() const {
  // @@protoc_insertion_point(field_get:hall.base.EnterGameOkNotify.chairno)
  return chairno_;
}
inline void EnterGameOkNotify::set_chairno(::google::protobuf::int32 value) {
  set_has_chairno();
  chairno_ = value;
  // @@protoc_insertion_point(field_set:hall.base.EnterGameOkNotify.chairno)
}

// -------------------------------------------------------------------

// LeaveGameNotify

// optional int32 userid = 1;
inline bool LeaveGameNotify::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LeaveGameNotify::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LeaveGameNotify::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LeaveGameNotify::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 LeaveGameNotify::userid() const {
  // @@protoc_insertion_point(field_get:hall.base.LeaveGameNotify.userid)
  return userid_;
}
inline void LeaveGameNotify::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:hall.base.LeaveGameNotify.userid)
}

// optional int32 roomid = 2;
inline bool LeaveGameNotify::has_roomid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LeaveGameNotify::set_has_roomid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LeaveGameNotify::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LeaveGameNotify::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
inline ::google::protobuf::int32 LeaveGameNotify::roomid() const {
  // @@protoc_insertion_point(field_get:hall.base.LeaveGameNotify.roomid)
  return roomid_;
}
inline void LeaveGameNotify::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:hall.base.LeaveGameNotify.roomid)
}

// optional int64 tableno = 3;
inline bool LeaveGameNotify::has_tableno() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LeaveGameNotify::set_has_tableno() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LeaveGameNotify::clear_has_tableno() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LeaveGameNotify::clear_tableno() {
  tableno_ = GOOGLE_LONGLONG(0);
  clear_has_tableno();
}
inline ::google::protobuf::int64 LeaveGameNotify::tableno() const {
  // @@protoc_insertion_point(field_get:hall.base.LeaveGameNotify.tableno)
  return tableno_;
}
inline void LeaveGameNotify::set_tableno(::google::protobuf::int64 value) {
  set_has_tableno();
  tableno_ = value;
  // @@protoc_insertion_point(field_set:hall.base.LeaveGameNotify.tableno)
}

// optional int32 chairno = 4;
inline bool LeaveGameNotify::has_chairno() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LeaveGameNotify::set_has_chairno() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LeaveGameNotify::clear_has_chairno() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LeaveGameNotify::clear_chairno() {
  chairno_ = 0;
  clear_has_chairno();
}
inline ::google::protobuf::int32 LeaveGameNotify::chairno() const {
  // @@protoc_insertion_point(field_get:hall.base.LeaveGameNotify.chairno)
  return chairno_;
}
inline void LeaveGameNotify::set_chairno(::google::protobuf::int32 value) {
  set_has_chairno();
  chairno_ = value;
  // @@protoc_insertion_point(field_set:hall.base.LeaveGameNotify.chairno)
}

// -------------------------------------------------------------------

// UserGameResult

// optional int32 userid = 1;
inline bool UserGameResult::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserGameResult::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserGameResult::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserGameResult::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 UserGameResult::userid() const {
  // @@protoc_insertion_point(field_get:hall.base.UserGameResult.userid)
  return userid_;
}
inline void UserGameResult::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:hall.base.UserGameResult.userid)
}

// optional int32 chairno = 2;
inline bool UserGameResult::has_chairno() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserGameResult::set_has_chairno() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserGameResult::clear_has_chairno() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserGameResult::clear_chairno() {
  chairno_ = 0;
  clear_has_chairno();
}
inline ::google::protobuf::int32 UserGameResult::chairno() const {
  // @@protoc_insertion_point(field_get:hall.base.UserGameResult.chairno)
  return chairno_;
}
inline void UserGameResult::set_chairno(::google::protobuf::int32 value) {
  set_has_chairno();
  chairno_ = value;
  // @@protoc_insertion_point(field_set:hall.base.UserGameResult.chairno)
}

// optional int64 base_deposit = 3;
inline bool UserGameResult::has_base_deposit() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserGameResult::set_has_base_deposit() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserGameResult::clear_has_base_deposit() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserGameResult::clear_base_deposit() {
  base_deposit_ = GOOGLE_LONGLONG(0);
  clear_has_base_deposit();
}
inline ::google::protobuf::int64 UserGameResult::base_deposit() const {
  // @@protoc_insertion_point(field_get:hall.base.UserGameResult.base_deposit)
  return base_deposit_;
}
inline void UserGameResult::set_base_deposit(::google::protobuf::int64 value) {
  set_has_base_deposit();
  base_deposit_ = value;
  // @@protoc_insertion_point(field_set:hall.base.UserGameResult.base_deposit)
}

// optional int64 old_deposit = 4;
inline bool UserGameResult::has_old_deposit() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserGameResult::set_has_old_deposit() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserGameResult::clear_has_old_deposit() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserGameResult::clear_old_deposit() {
  old_deposit_ = GOOGLE_LONGLONG(0);
  clear_has_old_deposit();
}
inline ::google::protobuf::int64 UserGameResult::old_deposit() const {
  // @@protoc_insertion_point(field_get:hall.base.UserGameResult.old_deposit)
  return old_deposit_;
}
inline void UserGameResult::set_old_deposit(::google::protobuf::int64 value) {
  set_has_old_deposit();
  old_deposit_ = value;
  // @@protoc_insertion_point(field_set:hall.base.UserGameResult.old_deposit)
}

// optional int64 diff_deposit = 5;
inline bool UserGameResult::has_diff_deposit() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserGameResult::set_has_diff_deposit() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserGameResult::clear_has_diff_deposit() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserGameResult::clear_diff_deposit() {
  diff_deposit_ = GOOGLE_LONGLONG(0);
  clear_has_diff_deposit();
}
inline ::google::protobuf::int64 UserGameResult::diff_deposit() const {
  // @@protoc_insertion_point(field_get:hall.base.UserGameResult.diff_deposit)
  return diff_deposit_;
}
inline void UserGameResult::set_diff_deposit(::google::protobuf::int64 value) {
  set_has_diff_deposit();
  diff_deposit_ = value;
  // @@protoc_insertion_point(field_set:hall.base.UserGameResult.diff_deposit)
}

// optional int64 cut = 6;
inline bool UserGameResult::has_cut() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UserGameResult::set_has_cut() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UserGameResult::clear_has_cut() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UserGameResult::clear_cut() {
  cut_ = GOOGLE_LONGLONG(0);
  clear_has_cut();
}
inline ::google::protobuf::int64 UserGameResult::cut() const {
  // @@protoc_insertion_point(field_get:hall.base.UserGameResult.cut)
  return cut_;
}
inline void UserGameResult::set_cut(::google::protobuf::int64 value) {
  set_has_cut();
  cut_ = value;
  // @@protoc_insertion_point(field_set:hall.base.UserGameResult.cut)
}

// optional int64 fee = 7;
inline bool UserGameResult::has_fee() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UserGameResult::set_has_fee() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UserGameResult::clear_has_fee() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UserGameResult::clear_fee() {
  fee_ = GOOGLE_LONGLONG(0);
  clear_has_fee();
}
inline ::google::protobuf::int64 UserGameResult::fee() const {
  // @@protoc_insertion_point(field_get:hall.base.UserGameResult.fee)
  return fee_;
}
inline void UserGameResult::set_fee(::google::protobuf::int64 value) {
  set_has_fee();
  fee_ = value;
  // @@protoc_insertion_point(field_set:hall.base.UserGameResult.fee)
}

// optional int64 extra = 8;
inline bool UserGameResult::has_extra() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void UserGameResult::set_has_extra() {
  _has_bits_[0] |= 0x00000080u;
}
inline void UserGameResult::clear_has_extra() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void UserGameResult::clear_extra() {
  extra_ = GOOGLE_LONGLONG(0);
  clear_has_extra();
}
inline ::google::protobuf::int64 UserGameResult::extra() const {
  // @@protoc_insertion_point(field_get:hall.base.UserGameResult.extra)
  return extra_;
}
inline void UserGameResult::set_extra(::google::protobuf::int64 value) {
  set_has_extra();
  extra_ = value;
  // @@protoc_insertion_point(field_set:hall.base.UserGameResult.extra)
}

// optional int32 timecost = 9;
inline bool UserGameResult::has_timecost() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void UserGameResult::set_has_timecost() {
  _has_bits_[0] |= 0x00000100u;
}
inline void UserGameResult::clear_has_timecost() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void UserGameResult::clear_timecost() {
  timecost_ = 0;
  clear_has_timecost();
}
inline ::google::protobuf::int32 UserGameResult::timecost() const {
  // @@protoc_insertion_point(field_get:hall.base.UserGameResult.timecost)
  return timecost_;
}
inline void UserGameResult::set_timecost(::google::protobuf::int32 value) {
  set_has_timecost();
  timecost_ = value;
  // @@protoc_insertion_point(field_set:hall.base.UserGameResult.timecost)
}

// optional int32 bout_count = 10;
inline bool UserGameResult::has_bout_count() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void UserGameResult::set_has_bout_count() {
  _has_bits_[0] |= 0x00000200u;
}
inline void UserGameResult::clear_has_bout_count() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void UserGameResult::clear_bout_count() {
  bout_count_ = 0;
  clear_has_bout_count();
}
inline ::google::protobuf::int32 UserGameResult::bout_count() const {
  // @@protoc_insertion_point(field_get:hall.base.UserGameResult.bout_count)
  return bout_count_;
}
inline void UserGameResult::set_bout_count(::google::protobuf::int32 value) {
  set_has_bout_count();
  bout_count_ = value;
  // @@protoc_insertion_point(field_set:hall.base.UserGameResult.bout_count)
}

// optional int32 win_count = 11;
inline bool UserGameResult::has_win_count() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void UserGameResult::set_has_win_count() {
  _has_bits_[0] |= 0x00000400u;
}
inline void UserGameResult::clear_has_win_count() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void UserGameResult::clear_win_count() {
  win_count_ = 0;
  clear_has_win_count();
}
inline ::google::protobuf::int32 UserGameResult::win_count() const {
  // @@protoc_insertion_point(field_get:hall.base.UserGameResult.win_count)
  return win_count_;
}
inline void UserGameResult::set_win_count(::google::protobuf::int32 value) {
  set_has_win_count();
  win_count_ = value;
  // @@protoc_insertion_point(field_set:hall.base.UserGameResult.win_count)
}

// optional int32 loss_count = 12;
inline bool UserGameResult::has_loss_count() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void UserGameResult::set_has_loss_count() {
  _has_bits_[0] |= 0x00000800u;
}
inline void UserGameResult::clear_has_loss_count() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void UserGameResult::clear_loss_count() {
  loss_count_ = 0;
  clear_has_loss_count();
}
inline ::google::protobuf::int32 UserGameResult::loss_count() const {
  // @@protoc_insertion_point(field_get:hall.base.UserGameResult.loss_count)
  return loss_count_;
}
inline void UserGameResult::set_loss_count(::google::protobuf::int32 value) {
  set_has_loss_count();
  loss_count_ = value;
  // @@protoc_insertion_point(field_set:hall.base.UserGameResult.loss_count)
}

// optional int32 standoff_count = 13;
inline bool UserGameResult::has_standoff_count() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void UserGameResult::set_has_standoff_count() {
  _has_bits_[0] |= 0x00001000u;
}
inline void UserGameResult::clear_has_standoff_count() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void UserGameResult::clear_standoff_count() {
  standoff_count_ = 0;
  clear_has_standoff_count();
}
inline ::google::protobuf::int32 UserGameResult::standoff_count() const {
  // @@protoc_insertion_point(field_get:hall.base.UserGameResult.standoff_count)
  return standoff_count_;
}
inline void UserGameResult::set_standoff_count(::google::protobuf::int32 value) {
  set_has_standoff_count();
  standoff_count_ = value;
  // @@protoc_insertion_point(field_set:hall.base.UserGameResult.standoff_count)
}

// optional int32 offline_count = 14;
inline bool UserGameResult::has_offline_count() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void UserGameResult::set_has_offline_count() {
  _has_bits_[0] |= 0x00002000u;
}
inline void UserGameResult::clear_has_offline_count() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void UserGameResult::clear_offline_count() {
  offline_count_ = 0;
  clear_has_offline_count();
}
inline ::google::protobuf::int32 UserGameResult::offline_count() const {
  // @@protoc_insertion_point(field_get:hall.base.UserGameResult.offline_count)
  return offline_count_;
}
inline void UserGameResult::set_offline_count(::google::protobuf::int32 value) {
  set_has_offline_count();
  offline_count_ = value;
  // @@protoc_insertion_point(field_set:hall.base.UserGameResult.offline_count)
}

// -------------------------------------------------------------------

// RefreshGameResult

// optional int32 roomid = 1;
inline bool RefreshGameResult::has_roomid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RefreshGameResult::set_has_roomid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RefreshGameResult::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RefreshGameResult::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
inline ::google::protobuf::int32 RefreshGameResult::roomid() const {
  // @@protoc_insertion_point(field_get:hall.base.RefreshGameResult.roomid)
  return roomid_;
}
inline void RefreshGameResult::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:hall.base.RefreshGameResult.roomid)
}

// optional int64 tableno = 2;
inline bool RefreshGameResult::has_tableno() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RefreshGameResult::set_has_tableno() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RefreshGameResult::clear_has_tableno() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RefreshGameResult::clear_tableno() {
  tableno_ = GOOGLE_LONGLONG(0);
  clear_has_tableno();
}
inline ::google::protobuf::int64 RefreshGameResult::tableno() const {
  // @@protoc_insertion_point(field_get:hall.base.RefreshGameResult.tableno)
  return tableno_;
}
inline void RefreshGameResult::set_tableno(::google::protobuf::int64 value) {
  set_has_tableno();
  tableno_ = value;
  // @@protoc_insertion_point(field_set:hall.base.RefreshGameResult.tableno)
}

// optional int32 flag = 3;
inline bool RefreshGameResult::has_flag() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RefreshGameResult::set_has_flag() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RefreshGameResult::clear_has_flag() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RefreshGameResult::clear_flag() {
  flag_ = 0;
  clear_has_flag();
}
inline ::google::protobuf::int32 RefreshGameResult::flag() const {
  // @@protoc_insertion_point(field_get:hall.base.RefreshGameResult.flag)
  return flag_;
}
inline void RefreshGameResult::set_flag(::google::protobuf::int32 value) {
  set_has_flag();
  flag_ = value;
  // @@protoc_insertion_point(field_set:hall.base.RefreshGameResult.flag)
}

// repeated .hall.base.UserGameResult user_result = 4;
inline int RefreshGameResult::user_result_size() const {
  return user_result_.size();
}
inline void RefreshGameResult::clear_user_result() {
  user_result_.Clear();
}
inline const ::hall::base::UserGameResult& RefreshGameResult::user_result(int index) const {
  // @@protoc_insertion_point(field_get:hall.base.RefreshGameResult.user_result)
  return user_result_.Get(index);
}
inline ::hall::base::UserGameResult* RefreshGameResult::mutable_user_result(int index) {
  // @@protoc_insertion_point(field_mutable:hall.base.RefreshGameResult.user_result)
  return user_result_.Mutable(index);
}
inline ::hall::base::UserGameResult* RefreshGameResult::add_user_result() {
  // @@protoc_insertion_point(field_add:hall.base.RefreshGameResult.user_result)
  return user_result_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::hall::base::UserGameResult >*
RefreshGameResult::mutable_user_result() {
  // @@protoc_insertion_point(field_mutable_list:hall.base.RefreshGameResult.user_result)
  return &user_result_;
}
inline const ::google::protobuf::RepeatedPtrField< ::hall::base::UserGameResult >&
RefreshGameResult::user_result() const {
  // @@protoc_insertion_point(field_list:hall.base.RefreshGameResult.user_result)
  return user_result_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace base
}  // namespace hall

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_hall_5fbase_2eproto__INCLUDED
