// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game_base.proto

#ifndef PROTOBUF_game_5fbase_2eproto__INCLUDED
#define PROTOBUF_game_5fbase_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_game_5fbase_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[59];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsBytesDataImpl();
void InitDefaultsBytesData();
void InitDefaultsRoomDataImpl();
void InitDefaultsRoomData();
void InitDefaultsUserImpl();
void InitDefaultsUser();
void InitDefaultsTableUserInfoImpl();
void InitDefaultsTableUserInfo();
void InitDefaultsChairInfoImpl();
void InitDefaultsChairInfo();
void InitDefaultsTableImpl();
void InitDefaultsTable();
void InitDefaultsRoomImpl();
void InitDefaultsRoom();
void InitDefaultsUserResultImpl();
void InitDefaultsUserResult();
void InitDefaultsTablePlayersInfoImpl();
void InitDefaultsTablePlayersInfo();
void InitDefaultsPulseReqImpl();
void InitDefaultsPulseReq();
void InitDefaultsPulseRespImpl();
void InitDefaultsPulseResp();
void InitDefaultsEnterNormalGameReqImpl();
void InitDefaultsEnterNormalGameReq();
void InitDefaultsEnterNormalGameRespImpl();
void InitDefaultsEnterNormalGameResp();
void InitDefaultsEnterPrivateGameReqImpl();
void InitDefaultsEnterPrivateGameReq();
void InitDefaultsEnterPrivateGameRespImpl();
void InitDefaultsEnterPrivateGameResp();
void InitDefaultsEnterMatchGameReqImpl();
void InitDefaultsEnterMatchGameReq();
void InitDefaultsEnterMatchGameRespImpl();
void InitDefaultsEnterMatchGameResp();
void InitDefaultsLeaveGameReqImpl();
void InitDefaultsLeaveGameReq();
void InitDefaultsLeaveGameRespImpl();
void InitDefaultsLeaveGameResp();
void InitDefaultsGiveUpReqImpl();
void InitDefaultsGiveUpReq();
void InitDefaultsGiveUpRespImpl();
void InitDefaultsGiveUpResp();
void InitDefaultsLooker2PlayerReqImpl();
void InitDefaultsLooker2PlayerReq();
void InitDefaultsLooker2PlayerRespImpl();
void InitDefaultsLooker2PlayerResp();
void InitDefaultsPlayer2LookerReqImpl();
void InitDefaultsPlayer2LookerReq();
void InitDefaultsPlayer2LookerRespImpl();
void InitDefaultsPlayer2LookerResp();
void InitDefaultsSwitchTableReqImpl();
void InitDefaultsSwitchTableReq();
void InitDefaultsSwitchTableRespImpl();
void InitDefaultsSwitchTableResp();
void InitDefaultsTableChatReqImpl();
void InitDefaultsTableChatReq();
void InitDefaultsTableChatNotifyImpl();
void InitDefaultsTableChatNotify();
void InitDefaultsTableChatRespImpl();
void InitDefaultsTableChatResp();
void InitDefaultsStartGameReqImpl();
void InitDefaultsStartGameReq();
void InitDefaultsGetTablePlayersInfoReqImpl();
void InitDefaultsGetTablePlayersInfoReq();
void InitDefaultsGetTablePlayersInfoRespImpl();
void InitDefaultsGetTablePlayersInfoResp();
void InitDefaultsCountdownStartNotifyImpl();
void InitDefaultsCountdownStartNotify();
void InitDefaultsCountdownStopNotifyImpl();
void InitDefaultsCountdownStopNotify();
void InitDefaultsGameStartNotifyImpl();
void InitDefaultsGameStartNotify();
void InitDefaultsPlayerGiveupNotifyImpl();
void InitDefaultsPlayerGiveupNotify();
void InitDefaultsGameResultNotifyImpl();
void InitDefaultsGameResultNotify();
void InitDefaultsUserSitDownNotifyImpl();
void InitDefaultsUserSitDownNotify();
void InitDefaultsUserStandUpNotifyImpl();
void InitDefaultsUserStandUpNotify();
void InitDefaultsUserLeaveNotifyImpl();
void InitDefaultsUserLeaveNotify();
void InitDefaultsUserDepositChangeNotifyImpl();
void InitDefaultsUserDepositChangeNotify();
void InitDefaultsMallProductImpl();
void InitDefaultsMallProduct();
void InitDefaultsGetMallProductsReqImpl();
void InitDefaultsGetMallProductsReq();
void InitDefaultsGetMallProductsRespImpl();
void InitDefaultsGetMallProductsResp();
void InitDefaultsMallShopingReqImpl();
void InitDefaultsMallShopingReq();
void InitDefaultsMallShopingRespImpl();
void InitDefaultsMallShopingResp();
void InitDefaultsRobotSvrValidateReqImpl();
void InitDefaultsRobotSvrValidateReq();
void InitDefaultsRobotSvrValidateRespImpl();
void InitDefaultsRobotSvrValidateResp();
void InitDefaultsGetGameUsersReqImpl();
void InitDefaultsGetGameUsersReq();
void InitDefaultsGetGameUsersRespImpl();
void InitDefaultsGetGameUsersResp();
void InitDefaultsRS_UserEnterGameNotifyImpl();
void InitDefaultsRS_UserEnterGameNotify();
void InitDefaultsRS_SwitchLookerPlayerNotifyImpl();
void InitDefaultsRS_SwitchLookerPlayerNotify();
void InitDefaultsRS_StartGameNotifyImpl();
void InitDefaultsRS_StartGameNotify();
void InitDefaultsRS_UserRefreshResultNotifyImpl();
void InitDefaultsRS_UserRefreshResultNotify();
void InitDefaultsRS_RefreshResultNotifyImpl();
void InitDefaultsRS_RefreshResultNotify();
void InitDefaultsRS_UserLeaveGameNotifyImpl();
void InitDefaultsRS_UserLeaveGameNotify();
void InitDefaultsRS_SwitchTableNotifyImpl();
void InitDefaultsRS_SwitchTableNotify();
void InitDefaultsRS_NewRoomNotifyImpl();
void InitDefaultsRS_NewRoomNotify();
inline void InitDefaults() {
  InitDefaultsBytesData();
  InitDefaultsRoomData();
  InitDefaultsUser();
  InitDefaultsTableUserInfo();
  InitDefaultsChairInfo();
  InitDefaultsTable();
  InitDefaultsRoom();
  InitDefaultsUserResult();
  InitDefaultsTablePlayersInfo();
  InitDefaultsPulseReq();
  InitDefaultsPulseResp();
  InitDefaultsEnterNormalGameReq();
  InitDefaultsEnterNormalGameResp();
  InitDefaultsEnterPrivateGameReq();
  InitDefaultsEnterPrivateGameResp();
  InitDefaultsEnterMatchGameReq();
  InitDefaultsEnterMatchGameResp();
  InitDefaultsLeaveGameReq();
  InitDefaultsLeaveGameResp();
  InitDefaultsGiveUpReq();
  InitDefaultsGiveUpResp();
  InitDefaultsLooker2PlayerReq();
  InitDefaultsLooker2PlayerResp();
  InitDefaultsPlayer2LookerReq();
  InitDefaultsPlayer2LookerResp();
  InitDefaultsSwitchTableReq();
  InitDefaultsSwitchTableResp();
  InitDefaultsTableChatReq();
  InitDefaultsTableChatNotify();
  InitDefaultsTableChatResp();
  InitDefaultsStartGameReq();
  InitDefaultsGetTablePlayersInfoReq();
  InitDefaultsGetTablePlayersInfoResp();
  InitDefaultsCountdownStartNotify();
  InitDefaultsCountdownStopNotify();
  InitDefaultsGameStartNotify();
  InitDefaultsPlayerGiveupNotify();
  InitDefaultsGameResultNotify();
  InitDefaultsUserSitDownNotify();
  InitDefaultsUserStandUpNotify();
  InitDefaultsUserLeaveNotify();
  InitDefaultsUserDepositChangeNotify();
  InitDefaultsMallProduct();
  InitDefaultsGetMallProductsReq();
  InitDefaultsGetMallProductsResp();
  InitDefaultsMallShopingReq();
  InitDefaultsMallShopingResp();
  InitDefaultsRobotSvrValidateReq();
  InitDefaultsRobotSvrValidateResp();
  InitDefaultsGetGameUsersReq();
  InitDefaultsGetGameUsersResp();
  InitDefaultsRS_UserEnterGameNotify();
  InitDefaultsRS_SwitchLookerPlayerNotify();
  InitDefaultsRS_StartGameNotify();
  InitDefaultsRS_UserRefreshResultNotify();
  InitDefaultsRS_RefreshResultNotify();
  InitDefaultsRS_UserLeaveGameNotify();
  InitDefaultsRS_SwitchTableNotify();
  InitDefaultsRS_NewRoomNotify();
}
}  // namespace protobuf_game_5fbase_2eproto
namespace game {
namespace base {
class BytesData;
class BytesDataDefaultTypeInternal;
extern BytesDataDefaultTypeInternal _BytesData_default_instance_;
class ChairInfo;
class ChairInfoDefaultTypeInternal;
extern ChairInfoDefaultTypeInternal _ChairInfo_default_instance_;
class CountdownStartNotify;
class CountdownStartNotifyDefaultTypeInternal;
extern CountdownStartNotifyDefaultTypeInternal _CountdownStartNotify_default_instance_;
class CountdownStopNotify;
class CountdownStopNotifyDefaultTypeInternal;
extern CountdownStopNotifyDefaultTypeInternal _CountdownStopNotify_default_instance_;
class EnterMatchGameReq;
class EnterMatchGameReqDefaultTypeInternal;
extern EnterMatchGameReqDefaultTypeInternal _EnterMatchGameReq_default_instance_;
class EnterMatchGameResp;
class EnterMatchGameRespDefaultTypeInternal;
extern EnterMatchGameRespDefaultTypeInternal _EnterMatchGameResp_default_instance_;
class EnterNormalGameReq;
class EnterNormalGameReqDefaultTypeInternal;
extern EnterNormalGameReqDefaultTypeInternal _EnterNormalGameReq_default_instance_;
class EnterNormalGameResp;
class EnterNormalGameRespDefaultTypeInternal;
extern EnterNormalGameRespDefaultTypeInternal _EnterNormalGameResp_default_instance_;
class EnterPrivateGameReq;
class EnterPrivateGameReqDefaultTypeInternal;
extern EnterPrivateGameReqDefaultTypeInternal _EnterPrivateGameReq_default_instance_;
class EnterPrivateGameResp;
class EnterPrivateGameRespDefaultTypeInternal;
extern EnterPrivateGameRespDefaultTypeInternal _EnterPrivateGameResp_default_instance_;
class GameResultNotify;
class GameResultNotifyDefaultTypeInternal;
extern GameResultNotifyDefaultTypeInternal _GameResultNotify_default_instance_;
class GameStartNotify;
class GameStartNotifyDefaultTypeInternal;
extern GameStartNotifyDefaultTypeInternal _GameStartNotify_default_instance_;
class GetGameUsersReq;
class GetGameUsersReqDefaultTypeInternal;
extern GetGameUsersReqDefaultTypeInternal _GetGameUsersReq_default_instance_;
class GetGameUsersResp;
class GetGameUsersRespDefaultTypeInternal;
extern GetGameUsersRespDefaultTypeInternal _GetGameUsersResp_default_instance_;
class GetMallProductsReq;
class GetMallProductsReqDefaultTypeInternal;
extern GetMallProductsReqDefaultTypeInternal _GetMallProductsReq_default_instance_;
class GetMallProductsResp;
class GetMallProductsRespDefaultTypeInternal;
extern GetMallProductsRespDefaultTypeInternal _GetMallProductsResp_default_instance_;
class GetTablePlayersInfoReq;
class GetTablePlayersInfoReqDefaultTypeInternal;
extern GetTablePlayersInfoReqDefaultTypeInternal _GetTablePlayersInfoReq_default_instance_;
class GetTablePlayersInfoResp;
class GetTablePlayersInfoRespDefaultTypeInternal;
extern GetTablePlayersInfoRespDefaultTypeInternal _GetTablePlayersInfoResp_default_instance_;
class GiveUpReq;
class GiveUpReqDefaultTypeInternal;
extern GiveUpReqDefaultTypeInternal _GiveUpReq_default_instance_;
class GiveUpResp;
class GiveUpRespDefaultTypeInternal;
extern GiveUpRespDefaultTypeInternal _GiveUpResp_default_instance_;
class LeaveGameReq;
class LeaveGameReqDefaultTypeInternal;
extern LeaveGameReqDefaultTypeInternal _LeaveGameReq_default_instance_;
class LeaveGameResp;
class LeaveGameRespDefaultTypeInternal;
extern LeaveGameRespDefaultTypeInternal _LeaveGameResp_default_instance_;
class Looker2PlayerReq;
class Looker2PlayerReqDefaultTypeInternal;
extern Looker2PlayerReqDefaultTypeInternal _Looker2PlayerReq_default_instance_;
class Looker2PlayerResp;
class Looker2PlayerRespDefaultTypeInternal;
extern Looker2PlayerRespDefaultTypeInternal _Looker2PlayerResp_default_instance_;
class MallProduct;
class MallProductDefaultTypeInternal;
extern MallProductDefaultTypeInternal _MallProduct_default_instance_;
class MallShopingReq;
class MallShopingReqDefaultTypeInternal;
extern MallShopingReqDefaultTypeInternal _MallShopingReq_default_instance_;
class MallShopingResp;
class MallShopingRespDefaultTypeInternal;
extern MallShopingRespDefaultTypeInternal _MallShopingResp_default_instance_;
class Player2LookerReq;
class Player2LookerReqDefaultTypeInternal;
extern Player2LookerReqDefaultTypeInternal _Player2LookerReq_default_instance_;
class Player2LookerResp;
class Player2LookerRespDefaultTypeInternal;
extern Player2LookerRespDefaultTypeInternal _Player2LookerResp_default_instance_;
class PlayerGiveupNotify;
class PlayerGiveupNotifyDefaultTypeInternal;
extern PlayerGiveupNotifyDefaultTypeInternal _PlayerGiveupNotify_default_instance_;
class PulseReq;
class PulseReqDefaultTypeInternal;
extern PulseReqDefaultTypeInternal _PulseReq_default_instance_;
class PulseResp;
class PulseRespDefaultTypeInternal;
extern PulseRespDefaultTypeInternal _PulseResp_default_instance_;
class RS_NewRoomNotify;
class RS_NewRoomNotifyDefaultTypeInternal;
extern RS_NewRoomNotifyDefaultTypeInternal _RS_NewRoomNotify_default_instance_;
class RS_RefreshResultNotify;
class RS_RefreshResultNotifyDefaultTypeInternal;
extern RS_RefreshResultNotifyDefaultTypeInternal _RS_RefreshResultNotify_default_instance_;
class RS_StartGameNotify;
class RS_StartGameNotifyDefaultTypeInternal;
extern RS_StartGameNotifyDefaultTypeInternal _RS_StartGameNotify_default_instance_;
class RS_SwitchLookerPlayerNotify;
class RS_SwitchLookerPlayerNotifyDefaultTypeInternal;
extern RS_SwitchLookerPlayerNotifyDefaultTypeInternal _RS_SwitchLookerPlayerNotify_default_instance_;
class RS_SwitchTableNotify;
class RS_SwitchTableNotifyDefaultTypeInternal;
extern RS_SwitchTableNotifyDefaultTypeInternal _RS_SwitchTableNotify_default_instance_;
class RS_UserEnterGameNotify;
class RS_UserEnterGameNotifyDefaultTypeInternal;
extern RS_UserEnterGameNotifyDefaultTypeInternal _RS_UserEnterGameNotify_default_instance_;
class RS_UserLeaveGameNotify;
class RS_UserLeaveGameNotifyDefaultTypeInternal;
extern RS_UserLeaveGameNotifyDefaultTypeInternal _RS_UserLeaveGameNotify_default_instance_;
class RS_UserRefreshResultNotify;
class RS_UserRefreshResultNotifyDefaultTypeInternal;
extern RS_UserRefreshResultNotifyDefaultTypeInternal _RS_UserRefreshResultNotify_default_instance_;
class RobotSvrValidateReq;
class RobotSvrValidateReqDefaultTypeInternal;
extern RobotSvrValidateReqDefaultTypeInternal _RobotSvrValidateReq_default_instance_;
class RobotSvrValidateResp;
class RobotSvrValidateRespDefaultTypeInternal;
extern RobotSvrValidateRespDefaultTypeInternal _RobotSvrValidateResp_default_instance_;
class Room;
class RoomDefaultTypeInternal;
extern RoomDefaultTypeInternal _Room_default_instance_;
class RoomData;
class RoomDataDefaultTypeInternal;
extern RoomDataDefaultTypeInternal _RoomData_default_instance_;
class StartGameReq;
class StartGameReqDefaultTypeInternal;
extern StartGameReqDefaultTypeInternal _StartGameReq_default_instance_;
class SwitchTableReq;
class SwitchTableReqDefaultTypeInternal;
extern SwitchTableReqDefaultTypeInternal _SwitchTableReq_default_instance_;
class SwitchTableResp;
class SwitchTableRespDefaultTypeInternal;
extern SwitchTableRespDefaultTypeInternal _SwitchTableResp_default_instance_;
class Table;
class TableDefaultTypeInternal;
extern TableDefaultTypeInternal _Table_default_instance_;
class TableChatNotify;
class TableChatNotifyDefaultTypeInternal;
extern TableChatNotifyDefaultTypeInternal _TableChatNotify_default_instance_;
class TableChatReq;
class TableChatReqDefaultTypeInternal;
extern TableChatReqDefaultTypeInternal _TableChatReq_default_instance_;
class TableChatResp;
class TableChatRespDefaultTypeInternal;
extern TableChatRespDefaultTypeInternal _TableChatResp_default_instance_;
class TablePlayersInfo;
class TablePlayersInfoDefaultTypeInternal;
extern TablePlayersInfoDefaultTypeInternal _TablePlayersInfo_default_instance_;
class TableUserInfo;
class TableUserInfoDefaultTypeInternal;
extern TableUserInfoDefaultTypeInternal _TableUserInfo_default_instance_;
class User;
class UserDefaultTypeInternal;
extern UserDefaultTypeInternal _User_default_instance_;
class UserDepositChangeNotify;
class UserDepositChangeNotifyDefaultTypeInternal;
extern UserDepositChangeNotifyDefaultTypeInternal _UserDepositChangeNotify_default_instance_;
class UserLeaveNotify;
class UserLeaveNotifyDefaultTypeInternal;
extern UserLeaveNotifyDefaultTypeInternal _UserLeaveNotify_default_instance_;
class UserResult;
class UserResultDefaultTypeInternal;
extern UserResultDefaultTypeInternal _UserResult_default_instance_;
class UserSitDownNotify;
class UserSitDownNotifyDefaultTypeInternal;
extern UserSitDownNotifyDefaultTypeInternal _UserSitDownNotify_default_instance_;
class UserStandUpNotify;
class UserStandUpNotifyDefaultTypeInternal;
extern UserStandUpNotifyDefaultTypeInternal _UserStandUpNotify_default_instance_;
}  // namespace base
}  // namespace game
namespace game {
namespace base {

// ===================================================================

class BytesData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:game.base.BytesData) */ {
 public:
  BytesData();
  virtual ~BytesData();

  BytesData(const BytesData& from);

  inline BytesData& operator=(const BytesData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BytesData(BytesData&& from) noexcept
    : BytesData() {
    *this = ::std::move(from);
  }

  inline BytesData& operator=(BytesData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BytesData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BytesData* internal_default_instance() {
    return reinterpret_cast<const BytesData*>(
               &_BytesData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(BytesData* other);
  friend void swap(BytesData& a, BytesData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BytesData* New() const PROTOBUF_FINAL { return New(NULL); }

  BytesData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BytesData& from);
  void MergeFrom(const BytesData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BytesData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes data = 1;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // optional int32 data_len = 2;
  bool has_data_len() const;
  void clear_data_len();
  static const int kDataLenFieldNumber = 2;
  ::google::protobuf::int32 data_len() const;
  void set_data_len(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game.base.BytesData)
 private:
  void set_has_data();
  void clear_has_data();
  void set_has_data_len();
  void clear_has_data_len();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::int32 data_len_;
  friend struct ::protobuf_game_5fbase_2eproto::TableStruct;
  friend void ::protobuf_game_5fbase_2eproto::InitDefaultsBytesDataImpl();
};
// -------------------------------------------------------------------

class RoomData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:game.base.RoomData) */ {
 public:
  RoomData();
  virtual ~RoomData();

  RoomData(const RoomData& from);

  inline RoomData& operator=(const RoomData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RoomData(RoomData&& from) noexcept
    : RoomData() {
    *this = ::std::move(from);
  }

  inline RoomData& operator=(RoomData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoomData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoomData* internal_default_instance() {
    return reinterpret_cast<const RoomData*>(
               &_RoomData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(RoomData* other);
  friend void swap(RoomData& a, RoomData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RoomData* New() const PROTOBUF_FINAL { return New(NULL); }

  RoomData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RoomData& from);
  void MergeFrom(const RoomData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RoomData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 roomid = 1;
  bool has_roomid() const;
  void clear_roomid();
  static const int kRoomidFieldNumber = 1;
  ::google::protobuf::int32 roomid() const;
  void set_roomid(::google::protobuf::int32 value);

  // optional int32 options = 2;
  bool has_options() const;
  void clear_options();
  static const int kOptionsFieldNumber = 2;
  ::google::protobuf::int32 options() const;
  void set_options(::google::protobuf::int32 value);

  // optional int32 configs = 3;
  bool has_configs() const;
  void clear_configs();
  static const int kConfigsFieldNumber = 3;
  ::google::protobuf::int32 configs() const;
  void set_configs(::google::protobuf::int32 value);

  // optional int32 manages = 4;
  bool has_manages() const;
  void clear_manages();
  static const int kManagesFieldNumber = 4;
  ::google::protobuf::int32 manages() const;
  void set_manages(::google::protobuf::int32 value);

  // optional int32 max_table_cout = 5;
  bool has_max_table_cout() const;
  void clear_max_table_cout();
  static const int kMaxTableCoutFieldNumber = 5;
  ::google::protobuf::int32 max_table_cout() const;
  void set_max_table_cout(::google::protobuf::int32 value);

  // optional int32 chaircount_per_table = 6;
  bool has_chaircount_per_table() const;
  void clear_chaircount_per_table();
  static const int kChaircountPerTableFieldNumber = 6;
  ::google::protobuf::int32 chaircount_per_table() const;
  void set_chaircount_per_table(::google::protobuf::int32 value);

  // optional int64 min_deposit = 7;
  bool has_min_deposit() const;
  void clear_min_deposit();
  static const int kMinDepositFieldNumber = 7;
  ::google::protobuf::int64 min_deposit() const;
  void set_min_deposit(::google::protobuf::int64 value);

  // optional int64 max_deposit = 8;
  bool has_max_deposit() const;
  void clear_max_deposit();
  static const int kMaxDepositFieldNumber = 8;
  ::google::protobuf::int64 max_deposit() const;
  void set_max_deposit(::google::protobuf::int64 value);

  // optional int32 min_player_count = 9;
  bool has_min_player_count() const;
  void clear_min_player_count();
  static const int kMinPlayerCountFieldNumber = 9;
  ::google::protobuf::int32 min_player_count() const;
  void set_min_player_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game.base.RoomData)
 private:
  void set_has_roomid();
  void clear_has_roomid();
  void set_has_options();
  void clear_has_options();
  void set_has_configs();
  void clear_has_configs();
  void set_has_manages();
  void clear_has_manages();
  void set_has_max_table_cout();
  void clear_has_max_table_cout();
  void set_has_chaircount_per_table();
  void clear_has_chaircount_per_table();
  void set_has_min_deposit();
  void clear_has_min_deposit();
  void set_has_max_deposit();
  void clear_has_max_deposit();
  void set_has_min_player_count();
  void clear_has_min_player_count();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 roomid_;
  ::google::protobuf::int32 options_;
  ::google::protobuf::int32 configs_;
  ::google::protobuf::int32 manages_;
  ::google::protobuf::int32 max_table_cout_;
  ::google::protobuf::int32 chaircount_per_table_;
  ::google::protobuf::int64 min_deposit_;
  ::google::protobuf::int64 max_deposit_;
  ::google::protobuf::int32 min_player_count_;
  friend struct ::protobuf_game_5fbase_2eproto::TableStruct;
  friend void ::protobuf_game_5fbase_2eproto::InitDefaultsRoomDataImpl();
};
// -------------------------------------------------------------------

class User : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:game.base.User) */ {
 public:
  User();
  virtual ~User();

  User(const User& from);

  inline User& operator=(const User& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  User(User&& from) noexcept
    : User() {
    *this = ::std::move(from);
  }

  inline User& operator=(User&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const User& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const User* internal_default_instance() {
    return reinterpret_cast<const User*>(
               &_User_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(User* other);
  friend void swap(User& a, User& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline User* New() const PROTOBUF_FINAL { return New(NULL); }

  User* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const User& from);
  void MergeFrom(const User& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(User* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string head_url = 11;
  bool has_head_url() const;
  void clear_head_url();
  static const int kHeadUrlFieldNumber = 11;
  const ::std::string& head_url() const;
  void set_head_url(const ::std::string& value);
  #if LANG_CXX11
  void set_head_url(::std::string&& value);
  #endif
  void set_head_url(const char* value);
  void set_head_url(const char* value, size_t size);
  ::std::string* mutable_head_url();
  ::std::string* release_head_url();
  void set_allocated_head_url(::std::string* head_url);

  // optional string hardid = 12;
  bool has_hardid() const;
  void clear_hardid();
  static const int kHardidFieldNumber = 12;
  const ::std::string& hardid() const;
  void set_hardid(const ::std::string& value);
  #if LANG_CXX11
  void set_hardid(::std::string&& value);
  #endif
  void set_hardid(const char* value);
  void set_hardid(const char* value, size_t size);
  ::std::string* mutable_hardid();
  ::std::string* release_hardid();
  void set_allocated_hardid(::std::string* hardid);

  // optional string nick_name = 13;
  bool has_nick_name() const;
  void clear_nick_name();
  static const int kNickNameFieldNumber = 13;
  const ::std::string& nick_name() const;
  void set_nick_name(const ::std::string& value);
  #if LANG_CXX11
  void set_nick_name(::std::string&& value);
  #endif
  void set_nick_name(const char* value);
  void set_nick_name(const char* value, size_t size);
  ::std::string* mutable_nick_name();
  ::std::string* release_nick_name();
  void set_allocated_nick_name(::std::string* nick_name);

  // optional int32 userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  ::google::protobuf::int32 userid() const;
  void set_userid(::google::protobuf::int32 value);

  // optional int32 roomid = 2;
  bool has_roomid() const;
  void clear_roomid();
  static const int kRoomidFieldNumber = 2;
  ::google::protobuf::int32 roomid() const;
  void set_roomid(::google::protobuf::int32 value);

  // optional int32 tableno = 3;
  bool has_tableno() const;
  void clear_tableno();
  static const int kTablenoFieldNumber = 3;
  ::google::protobuf::int32 tableno() const;
  void set_tableno(::google::protobuf::int32 value);

  // optional int32 chairno = 4;
  bool has_chairno() const;
  void clear_chairno();
  static const int kChairnoFieldNumber = 4;
  ::google::protobuf::int32 chairno() const;
  void set_chairno(::google::protobuf::int32 value);

  // optional int64 deposit = 6;
  bool has_deposit() const;
  void clear_deposit();
  static const int kDepositFieldNumber = 6;
  ::google::protobuf::int64 deposit() const;
  void set_deposit(::google::protobuf::int64 value);

  // optional int32 user_type = 5;
  bool has_user_type() const;
  void clear_user_type();
  static const int kUserTypeFieldNumber = 5;
  ::google::protobuf::int32 user_type() const;
  void set_user_type(::google::protobuf::int32 value);

  // optional int32 total_bout = 7;
  bool has_total_bout() const;
  void clear_total_bout();
  static const int kTotalBoutFieldNumber = 7;
  ::google::protobuf::int32 total_bout() const;
  void set_total_bout(::google::protobuf::int32 value);

  // optional int32 win_bout = 8;
  bool has_win_bout() const;
  void clear_win_bout();
  static const int kWinBoutFieldNumber = 8;
  ::google::protobuf::int32 win_bout() const;
  void set_win_bout(::google::protobuf::int32 value);

  // optional int32 loss_bout = 9;
  bool has_loss_bout() const;
  void clear_loss_bout();
  static const int kLossBoutFieldNumber = 9;
  ::google::protobuf::int32 loss_bout() const;
  void set_loss_bout(::google::protobuf::int32 value);

  // optional int32 offline_count = 10;
  bool has_offline_count() const;
  void clear_offline_count();
  static const int kOfflineCountFieldNumber = 10;
  ::google::protobuf::int32 offline_count() const;
  void set_offline_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game.base.User)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_roomid();
  void clear_has_roomid();
  void set_has_tableno();
  void clear_has_tableno();
  void set_has_chairno();
  void clear_has_chairno();
  void set_has_user_type();
  void clear_has_user_type();
  void set_has_deposit();
  void clear_has_deposit();
  void set_has_total_bout();
  void clear_has_total_bout();
  void set_has_win_bout();
  void clear_has_win_bout();
  void set_has_loss_bout();
  void clear_has_loss_bout();
  void set_has_offline_count();
  void clear_has_offline_count();
  void set_has_head_url();
  void clear_has_head_url();
  void set_has_hardid();
  void clear_has_hardid();
  void set_has_nick_name();
  void clear_has_nick_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr head_url_;
  ::google::protobuf::internal::ArenaStringPtr hardid_;
  ::google::protobuf::internal::ArenaStringPtr nick_name_;
  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 roomid_;
  ::google::protobuf::int32 tableno_;
  ::google::protobuf::int32 chairno_;
  ::google::protobuf::int64 deposit_;
  ::google::protobuf::int32 user_type_;
  ::google::protobuf::int32 total_bout_;
  ::google::protobuf::int32 win_bout_;
  ::google::protobuf::int32 loss_bout_;
  ::google::protobuf::int32 offline_count_;
  friend struct ::protobuf_game_5fbase_2eproto::TableStruct;
  friend void ::protobuf_game_5fbase_2eproto::InitDefaultsUserImpl();
};
// -------------------------------------------------------------------

class TableUserInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:game.base.TableUserInfo) */ {
 public:
  TableUserInfo();
  virtual ~TableUserInfo();

  TableUserInfo(const TableUserInfo& from);

  inline TableUserInfo& operator=(const TableUserInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TableUserInfo(TableUserInfo&& from) noexcept
    : TableUserInfo() {
    *this = ::std::move(from);
  }

  inline TableUserInfo& operator=(TableUserInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TableUserInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TableUserInfo* internal_default_instance() {
    return reinterpret_cast<const TableUserInfo*>(
               &_TableUserInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(TableUserInfo* other);
  friend void swap(TableUserInfo& a, TableUserInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TableUserInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  TableUserInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TableUserInfo& from);
  void MergeFrom(const TableUserInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TableUserInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  ::google::protobuf::int32 userid() const;
  void set_userid(::google::protobuf::int32 value);

  // optional int32 user_type = 2;
  bool has_user_type() const;
  void clear_user_type();
  static const int kUserTypeFieldNumber = 2;
  ::google::protobuf::int32 user_type() const;
  void set_user_type(::google::protobuf::int32 value);

  // optional int32 bind_timestamp = 3;
  bool has_bind_timestamp() const;
  void clear_bind_timestamp();
  static const int kBindTimestampFieldNumber = 3;
  ::google::protobuf::int32 bind_timestamp() const;
  void set_bind_timestamp(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game.base.TableUserInfo)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_user_type();
  void clear_has_user_type();
  void set_has_bind_timestamp();
  void clear_has_bind_timestamp();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 user_type_;
  ::google::protobuf::int32 bind_timestamp_;
  friend struct ::protobuf_game_5fbase_2eproto::TableStruct;
  friend void ::protobuf_game_5fbase_2eproto::InitDefaultsTableUserInfoImpl();
};
// -------------------------------------------------------------------

class ChairInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:game.base.ChairInfo) */ {
 public:
  ChairInfo();
  virtual ~ChairInfo();

  ChairInfo(const ChairInfo& from);

  inline ChairInfo& operator=(const ChairInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChairInfo(ChairInfo&& from) noexcept
    : ChairInfo() {
    *this = ::std::move(from);
  }

  inline ChairInfo& operator=(ChairInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChairInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChairInfo* internal_default_instance() {
    return reinterpret_cast<const ChairInfo*>(
               &_ChairInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(ChairInfo* other);
  friend void swap(ChairInfo& a, ChairInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChairInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  ChairInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChairInfo& from);
  void MergeFrom(const ChairInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChairInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 chairno = 1;
  bool has_chairno() const;
  void clear_chairno();
  static const int kChairnoFieldNumber = 1;
  ::google::protobuf::int32 chairno() const;
  void set_chairno(::google::protobuf::int32 value);

  // optional int32 userid = 2;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 2;
  ::google::protobuf::int32 userid() const;
  void set_userid(::google::protobuf::int32 value);

  // optional int32 chair_status = 3;
  bool has_chair_status() const;
  void clear_chair_status();
  static const int kChairStatusFieldNumber = 3;
  ::google::protobuf::int32 chair_status() const;
  void set_chair_status(::google::protobuf::int32 value);

  // optional int32 bind_timestamp = 4;
  bool has_bind_timestamp() const;
  void clear_bind_timestamp();
  static const int kBindTimestampFieldNumber = 4;
  ::google::protobuf::int32 bind_timestamp() const;
  void set_bind_timestamp(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game.base.ChairInfo)
 private:
  void set_has_chairno();
  void clear_has_chairno();
  void set_has_userid();
  void clear_has_userid();
  void set_has_chair_status();
  void clear_has_chair_status();
  void set_has_bind_timestamp();
  void clear_has_bind_timestamp();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 chairno_;
  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 chair_status_;
  ::google::protobuf::int32 bind_timestamp_;
  friend struct ::protobuf_game_5fbase_2eproto::TableStruct;
  friend void ::protobuf_game_5fbase_2eproto::InitDefaultsChairInfoImpl();
};
// -------------------------------------------------------------------

class Table : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:game.base.Table) */ {
 public:
  Table();
  virtual ~Table();

  Table(const Table& from);

  inline Table& operator=(const Table& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Table(Table&& from) noexcept
    : Table() {
    *this = ::std::move(from);
  }

  inline Table& operator=(Table&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Table& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Table* internal_default_instance() {
    return reinterpret_cast<const Table*>(
               &_Table_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(Table* other);
  friend void swap(Table& a, Table& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Table* New() const PROTOBUF_FINAL { return New(NULL); }

  Table* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Table& from);
  void MergeFrom(const Table& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Table* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .game.base.ChairInfo chairs = 9;
  int chairs_size() const;
  void clear_chairs();
  static const int kChairsFieldNumber = 9;
  const ::game::base::ChairInfo& chairs(int index) const;
  ::game::base::ChairInfo* mutable_chairs(int index);
  ::game::base::ChairInfo* add_chairs();
  ::google::protobuf::RepeatedPtrField< ::game::base::ChairInfo >*
      mutable_chairs();
  const ::google::protobuf::RepeatedPtrField< ::game::base::ChairInfo >&
      chairs() const;

  // repeated .game.base.TableUserInfo table_users = 10;
  int table_users_size() const;
  void clear_table_users();
  static const int kTableUsersFieldNumber = 10;
  const ::game::base::TableUserInfo& table_users(int index) const;
  ::game::base::TableUserInfo* mutable_table_users(int index);
  ::game::base::TableUserInfo* add_table_users();
  ::google::protobuf::RepeatedPtrField< ::game::base::TableUserInfo >*
      mutable_table_users();
  const ::google::protobuf::RepeatedPtrField< ::game::base::TableUserInfo >&
      table_users() const;

  // optional int32 tableno = 1;
  bool has_tableno() const;
  void clear_tableno();
  static const int kTablenoFieldNumber = 1;
  ::google::protobuf::int32 tableno() const;
  void set_tableno(::google::protobuf::int32 value);

  // optional int32 roomid = 2;
  bool has_roomid() const;
  void clear_roomid();
  static const int kRoomidFieldNumber = 2;
  ::google::protobuf::int32 roomid() const;
  void set_roomid(::google::protobuf::int32 value);

  // optional int32 chair_count = 3;
  bool has_chair_count() const;
  void clear_chair_count();
  static const int kChairCountFieldNumber = 3;
  ::google::protobuf::int32 chair_count() const;
  void set_chair_count(::google::protobuf::int32 value);

  // optional int32 banker_chair = 4;
  bool has_banker_chair() const;
  void clear_banker_chair();
  static const int kBankerChairFieldNumber = 4;
  ::google::protobuf::int32 banker_chair() const;
  void set_banker_chair(::google::protobuf::int32 value);

  // optional int64 min_deposit = 5;
  bool has_min_deposit() const;
  void clear_min_deposit();
  static const int kMinDepositFieldNumber = 5;
  ::google::protobuf::int64 min_deposit() const;
  void set_min_deposit(::google::protobuf::int64 value);

  // optional int64 max_deposit = 6;
  bool has_max_deposit() const;
  void clear_max_deposit();
  static const int kMaxDepositFieldNumber = 6;
  ::google::protobuf::int64 max_deposit() const;
  void set_max_deposit(::google::protobuf::int64 value);

  // optional int64 base_deposit = 7;
  bool has_base_deposit() const;
  void clear_base_deposit();
  static const int kBaseDepositFieldNumber = 7;
  ::google::protobuf::int64 base_deposit() const;
  void set_base_deposit(::google::protobuf::int64 value);

  // optional int32 table_status = 8;
  bool has_table_status() const;
  void clear_table_status();
  static const int kTableStatusFieldNumber = 8;
  ::google::protobuf::int32 table_status() const;
  void set_table_status(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game.base.Table)
 private:
  void set_has_tableno();
  void clear_has_tableno();
  void set_has_roomid();
  void clear_has_roomid();
  void set_has_chair_count();
  void clear_has_chair_count();
  void set_has_banker_chair();
  void clear_has_banker_chair();
  void set_has_min_deposit();
  void clear_has_min_deposit();
  void set_has_max_deposit();
  void clear_has_max_deposit();
  void set_has_base_deposit();
  void clear_has_base_deposit();
  void set_has_table_status();
  void clear_has_table_status();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::game::base::ChairInfo > chairs_;
  ::google::protobuf::RepeatedPtrField< ::game::base::TableUserInfo > table_users_;
  ::google::protobuf::int32 tableno_;
  ::google::protobuf::int32 roomid_;
  ::google::protobuf::int32 chair_count_;
  ::google::protobuf::int32 banker_chair_;
  ::google::protobuf::int64 min_deposit_;
  ::google::protobuf::int64 max_deposit_;
  ::google::protobuf::int64 base_deposit_;
  ::google::protobuf::int32 table_status_;
  friend struct ::protobuf_game_5fbase_2eproto::TableStruct;
  friend void ::protobuf_game_5fbase_2eproto::InitDefaultsTableImpl();
};
// -------------------------------------------------------------------

class Room : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:game.base.Room) */ {
 public:
  Room();
  virtual ~Room();

  Room(const Room& from);

  inline Room& operator=(const Room& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Room(Room&& from) noexcept
    : Room() {
    *this = ::std::move(from);
  }

  inline Room& operator=(Room&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Room& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Room* internal_default_instance() {
    return reinterpret_cast<const Room*>(
               &_Room_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(Room* other);
  friend void swap(Room& a, Room& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Room* New() const PROTOBUF_FINAL { return New(NULL); }

  Room* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Room& from);
  void MergeFrom(const Room& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Room* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .game.base.Table tables = 2;
  int tables_size() const;
  void clear_tables();
  static const int kTablesFieldNumber = 2;
  const ::game::base::Table& tables(int index) const;
  ::game::base::Table* mutable_tables(int index);
  ::game::base::Table* add_tables();
  ::google::protobuf::RepeatedPtrField< ::game::base::Table >*
      mutable_tables();
  const ::google::protobuf::RepeatedPtrField< ::game::base::Table >&
      tables() const;

  // optional .game.base.RoomData room_data = 1;
  bool has_room_data() const;
  void clear_room_data();
  static const int kRoomDataFieldNumber = 1;
  const ::game::base::RoomData& room_data() const;
  ::game::base::RoomData* release_room_data();
  ::game::base::RoomData* mutable_room_data();
  void set_allocated_room_data(::game::base::RoomData* room_data);

  // @@protoc_insertion_point(class_scope:game.base.Room)
 private:
  void set_has_room_data();
  void clear_has_room_data();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::game::base::Table > tables_;
  ::game::base::RoomData* room_data_;
  friend struct ::protobuf_game_5fbase_2eproto::TableStruct;
  friend void ::protobuf_game_5fbase_2eproto::InitDefaultsRoomImpl();
};
// -------------------------------------------------------------------

class UserResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:game.base.UserResult) */ {
 public:
  UserResult();
  virtual ~UserResult();

  UserResult(const UserResult& from);

  inline UserResult& operator=(const UserResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserResult(UserResult&& from) noexcept
    : UserResult() {
    *this = ::std::move(from);
  }

  inline UserResult& operator=(UserResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserResult* internal_default_instance() {
    return reinterpret_cast<const UserResult*>(
               &_UserResult_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(UserResult* other);
  friend void swap(UserResult& a, UserResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserResult* New() const PROTOBUF_FINAL { return New(NULL); }

  UserResult* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserResult& from);
  void MergeFrom(const UserResult& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  ::google::protobuf::int32 userid() const;
  void set_userid(::google::protobuf::int32 value);

  // optional int32 chairno = 2;
  bool has_chairno() const;
  void clear_chairno();
  static const int kChairnoFieldNumber = 2;
  ::google::protobuf::int32 chairno() const;
  void set_chairno(::google::protobuf::int32 value);

  // optional int64 old_deposit = 3;
  bool has_old_deposit() const;
  void clear_old_deposit();
  static const int kOldDepositFieldNumber = 3;
  ::google::protobuf::int64 old_deposit() const;
  void set_old_deposit(::google::protobuf::int64 value);

  // optional int64 diff_deposit = 4;
  bool has_diff_deposit() const;
  void clear_diff_deposit();
  static const int kDiffDepositFieldNumber = 4;
  ::google::protobuf::int64 diff_deposit() const;
  void set_diff_deposit(::google::protobuf::int64 value);

  // optional int32 fee = 5;
  bool has_fee() const;
  void clear_fee();
  static const int kFeeFieldNumber = 5;
  ::google::protobuf::int32 fee() const;
  void set_fee(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game.base.UserResult)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_chairno();
  void clear_has_chairno();
  void set_has_old_deposit();
  void clear_has_old_deposit();
  void set_has_diff_deposit();
  void clear_has_diff_deposit();
  void set_has_fee();
  void clear_has_fee();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 chairno_;
  ::google::protobuf::int64 old_deposit_;
  ::google::protobuf::int64 diff_deposit_;
  ::google::protobuf::int32 fee_;
  friend struct ::protobuf_game_5fbase_2eproto::TableStruct;
  friend void ::protobuf_game_5fbase_2eproto::InitDefaultsUserResultImpl();
};
// -------------------------------------------------------------------

class TablePlayersInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:game.base.TablePlayersInfo) */ {
 public:
  TablePlayersInfo();
  virtual ~TablePlayersInfo();

  TablePlayersInfo(const TablePlayersInfo& from);

  inline TablePlayersInfo& operator=(const TablePlayersInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TablePlayersInfo(TablePlayersInfo&& from) noexcept
    : TablePlayersInfo() {
    *this = ::std::move(from);
  }

  inline TablePlayersInfo& operator=(TablePlayersInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TablePlayersInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TablePlayersInfo* internal_default_instance() {
    return reinterpret_cast<const TablePlayersInfo*>(
               &_TablePlayersInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(TablePlayersInfo* other);
  friend void swap(TablePlayersInfo& a, TablePlayersInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TablePlayersInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  TablePlayersInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TablePlayersInfo& from);
  void MergeFrom(const TablePlayersInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TablePlayersInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .game.base.User players = 9;
  int players_size() const;
  void clear_players();
  static const int kPlayersFieldNumber = 9;
  const ::game::base::User& players(int index) const;
  ::game::base::User* mutable_players(int index);
  ::game::base::User* add_players();
  ::google::protobuf::RepeatedPtrField< ::game::base::User >*
      mutable_players();
  const ::google::protobuf::RepeatedPtrField< ::game::base::User >&
      players() const;

  // repeated .game.base.ChairInfo chairs = 10;
  int chairs_size() const;
  void clear_chairs();
  static const int kChairsFieldNumber = 10;
  const ::game::base::ChairInfo& chairs(int index) const;
  ::game::base::ChairInfo* mutable_chairs(int index);
  ::game::base::ChairInfo* add_chairs();
  ::google::protobuf::RepeatedPtrField< ::game::base::ChairInfo >*
      mutable_chairs();
  const ::google::protobuf::RepeatedPtrField< ::game::base::ChairInfo >&
      chairs() const;

  // optional int64 room_min_deposit = 2;
  bool has_room_min_deposit() const;
  void clear_room_min_deposit();
  static const int kRoomMinDepositFieldNumber = 2;
  ::google::protobuf::int64 room_min_deposit() const;
  void set_room_min_deposit(::google::protobuf::int64 value);

  // optional int32 roomid = 1;
  bool has_roomid() const;
  void clear_roomid();
  static const int kRoomidFieldNumber = 1;
  ::google::protobuf::int32 roomid() const;
  void set_roomid(::google::protobuf::int32 value);

  // optional int32 tableno = 4;
  bool has_tableno() const;
  void clear_tableno();
  static const int kTablenoFieldNumber = 4;
  ::google::protobuf::int32 tableno() const;
  void set_tableno(::google::protobuf::int32 value);

  // optional int64 room_max_deposit = 3;
  bool has_room_max_deposit() const;
  void clear_room_max_deposit();
  static const int kRoomMaxDepositFieldNumber = 3;
  ::google::protobuf::int64 room_max_deposit() const;
  void set_room_max_deposit(::google::protobuf::int64 value);

  // optional int64 table_min_deposit = 6;
  bool has_table_min_deposit() const;
  void clear_table_min_deposit();
  static const int kTableMinDepositFieldNumber = 6;
  ::google::protobuf::int64 table_min_deposit() const;
  void set_table_min_deposit(::google::protobuf::int64 value);

  // optional int64 table_max_deposit = 7;
  bool has_table_max_deposit() const;
  void clear_table_max_deposit();
  static const int kTableMaxDepositFieldNumber = 7;
  ::google::protobuf::int64 table_max_deposit() const;
  void set_table_max_deposit(::google::protobuf::int64 value);

  // optional int64 base_deposit = 8;
  bool has_base_deposit() const;
  void clear_base_deposit();
  static const int kBaseDepositFieldNumber = 8;
  ::google::protobuf::int64 base_deposit() const;
  void set_base_deposit(::google::protobuf::int64 value);

  // optional int32 table_status = 5;
  bool has_table_status() const;
  void clear_table_status();
  static const int kTableStatusFieldNumber = 5;
  ::google::protobuf::int32 table_status() const;
  void set_table_status(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game.base.TablePlayersInfo)
 private:
  void set_has_roomid();
  void clear_has_roomid();
  void set_has_room_min_deposit();
  void clear_has_room_min_deposit();
  void set_has_room_max_deposit();
  void clear_has_room_max_deposit();
  void set_has_tableno();
  void clear_has_tableno();
  void set_has_table_status();
  void clear_has_table_status();
  void set_has_table_min_deposit();
  void clear_has_table_min_deposit();
  void set_has_table_max_deposit();
  void clear_has_table_max_deposit();
  void set_has_base_deposit();
  void clear_has_base_deposit();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::game::base::User > players_;
  ::google::protobuf::RepeatedPtrField< ::game::base::ChairInfo > chairs_;
  ::google::protobuf::int64 room_min_deposit_;
  ::google::protobuf::int32 roomid_;
  ::google::protobuf::int32 tableno_;
  ::google::protobuf::int64 room_max_deposit_;
  ::google::protobuf::int64 table_min_deposit_;
  ::google::protobuf::int64 table_max_deposit_;
  ::google::protobuf::int64 base_deposit_;
  ::google::protobuf::int32 table_status_;
  friend struct ::protobuf_game_5fbase_2eproto::TableStruct;
  friend void ::protobuf_game_5fbase_2eproto::InitDefaultsTablePlayersInfoImpl();
};
// -------------------------------------------------------------------

class PulseReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:game.base.PulseReq) */ {
 public:
  PulseReq();
  virtual ~PulseReq();

  PulseReq(const PulseReq& from);

  inline PulseReq& operator=(const PulseReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PulseReq(PulseReq&& from) noexcept
    : PulseReq() {
    *this = ::std::move(from);
  }

  inline PulseReq& operator=(PulseReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PulseReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PulseReq* internal_default_instance() {
    return reinterpret_cast<const PulseReq*>(
               &_PulseReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(PulseReq* other);
  friend void swap(PulseReq& a, PulseReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PulseReq* New() const PROTOBUF_FINAL { return New(NULL); }

  PulseReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PulseReq& from);
  void MergeFrom(const PulseReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PulseReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game.base.PulseReq)
 private:
  void set_has_id();
  void clear_has_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 id_;
  friend struct ::protobuf_game_5fbase_2eproto::TableStruct;
  friend void ::protobuf_game_5fbase_2eproto::InitDefaultsPulseReqImpl();
};
// -------------------------------------------------------------------

class PulseResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:game.base.PulseResp) */ {
 public:
  PulseResp();
  virtual ~PulseResp();

  PulseResp(const PulseResp& from);

  inline PulseResp& operator=(const PulseResp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PulseResp(PulseResp&& from) noexcept
    : PulseResp() {
    *this = ::std::move(from);
  }

  inline PulseResp& operator=(PulseResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PulseResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PulseResp* internal_default_instance() {
    return reinterpret_cast<const PulseResp*>(
               &_PulseResp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(PulseResp* other);
  friend void swap(PulseResp& a, PulseResp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PulseResp* New() const PROTOBUF_FINAL { return New(NULL); }

  PulseResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PulseResp& from);
  void MergeFrom(const PulseResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PulseResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 timestamp = 1;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  ::google::protobuf::int32 timestamp() const;
  void set_timestamp(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game.base.PulseResp)
 private:
  void set_has_timestamp();
  void clear_has_timestamp();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 timestamp_;
  friend struct ::protobuf_game_5fbase_2eproto::TableStruct;
  friend void ::protobuf_game_5fbase_2eproto::InitDefaultsPulseRespImpl();
};
// -------------------------------------------------------------------

class EnterNormalGameReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:game.base.EnterNormalGameReq) */ {
 public:
  EnterNormalGameReq();
  virtual ~EnterNormalGameReq();

  EnterNormalGameReq(const EnterNormalGameReq& from);

  inline EnterNormalGameReq& operator=(const EnterNormalGameReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EnterNormalGameReq(EnterNormalGameReq&& from) noexcept
    : EnterNormalGameReq() {
    *this = ::std::move(from);
  }

  inline EnterNormalGameReq& operator=(EnterNormalGameReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EnterNormalGameReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EnterNormalGameReq* internal_default_instance() {
    return reinterpret_cast<const EnterNormalGameReq*>(
               &_EnterNormalGameReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(EnterNormalGameReq* other);
  friend void swap(EnterNormalGameReq& a, EnterNormalGameReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EnterNormalGameReq* New() const PROTOBUF_FINAL { return New(NULL); }

  EnterNormalGameReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EnterNormalGameReq& from);
  void MergeFrom(const EnterNormalGameReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EnterNormalGameReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string hardid = 6;
  bool has_hardid() const;
  void clear_hardid();
  static const int kHardidFieldNumber = 6;
  const ::std::string& hardid() const;
  void set_hardid(const ::std::string& value);
  #if LANG_CXX11
  void set_hardid(::std::string&& value);
  #endif
  void set_hardid(const char* value);
  void set_hardid(const char* value, size_t size);
  ::std::string* mutable_hardid();
  ::std::string* release_hardid();
  void set_allocated_hardid(::std::string* hardid);

  // optional string hall_version = 7;
  bool has_hall_version() const;
  void clear_hall_version();
  static const int kHallVersionFieldNumber = 7;
  const ::std::string& hall_version() const;
  void set_hall_version(const ::std::string& value);
  #if LANG_CXX11
  void set_hall_version(::std::string&& value);
  #endif
  void set_hall_version(const char* value);
  void set_hall_version(const char* value, size_t size);
  ::std::string* mutable_hall_version();
  ::std::string* release_hall_version();
  void set_allocated_hall_version(::std::string* hall_version);

  // optional string game_version = 8;
  bool has_game_version() const;
  void clear_game_version();
  static const int kGameVersionFieldNumber = 8;
  const ::std::string& game_version() const;
  void set_game_version(const ::std::string& value);
  #if LANG_CXX11
  void set_game_version(::std::string&& value);
  #endif
  void set_game_version(const char* value);
  void set_game_version(const char* value, size_t size);
  ::std::string* mutable_game_version();
  ::std::string* release_game_version();
  void set_allocated_game_version(::std::string* game_version);

  // optional int32 userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  ::google::protobuf::int32 userid() const;
  void set_userid(::google::protobuf::int32 value);

  // optional int32 gameid = 2;
  bool has_gameid() const;
  void clear_gameid();
  static const int kGameidFieldNumber = 2;
  ::google::protobuf::int32 gameid() const;
  void set_gameid(::google::protobuf::int32 value);

  // optional int32 roomid = 3;
  bool has_roomid() const;
  void clear_roomid();
  static const int kRoomidFieldNumber = 3;
  ::google::protobuf::int32 roomid() const;
  void set_roomid(::google::protobuf::int32 value);

  // optional int32 flag = 4;
  bool has_flag() const;
  void clear_flag();
  static const int kFlagFieldNumber = 4;
  ::google::protobuf::int32 flag() const;
  void set_flag(::google::protobuf::int32 value);

  // optional int32 target = 5;
  bool has_target() const;
  void clear_target();
  static const int kTargetFieldNumber = 5;
  ::google::protobuf::int32 target() const;
  void set_target(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game.base.EnterNormalGameReq)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_gameid();
  void clear_has_gameid();
  void set_has_roomid();
  void clear_has_roomid();
  void set_has_flag();
  void clear_has_flag();
  void set_has_target();
  void clear_has_target();
  void set_has_hardid();
  void clear_has_hardid();
  void set_has_hall_version();
  void clear_has_hall_version();
  void set_has_game_version();
  void clear_has_game_version();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr hardid_;
  ::google::protobuf::internal::ArenaStringPtr hall_version_;
  ::google::protobuf::internal::ArenaStringPtr game_version_;
  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 gameid_;
  ::google::protobuf::int32 roomid_;
  ::google::protobuf::int32 flag_;
  ::google::protobuf::int32 target_;
  friend struct ::protobuf_game_5fbase_2eproto::TableStruct;
  friend void ::protobuf_game_5fbase_2eproto::InitDefaultsEnterNormalGameReqImpl();
};
// -------------------------------------------------------------------

class EnterNormalGameResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:game.base.EnterNormalGameResp) */ {
 public:
  EnterNormalGameResp();
  virtual ~EnterNormalGameResp();

  EnterNormalGameResp(const EnterNormalGameResp& from);

  inline EnterNormalGameResp& operator=(const EnterNormalGameResp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EnterNormalGameResp(EnterNormalGameResp&& from) noexcept
    : EnterNormalGameResp() {
    *this = ::std::move(from);
  }

  inline EnterNormalGameResp& operator=(EnterNormalGameResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EnterNormalGameResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EnterNormalGameResp* internal_default_instance() {
    return reinterpret_cast<const EnterNormalGameResp*>(
               &_EnterNormalGameResp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(EnterNormalGameResp* other);
  friend void swap(EnterNormalGameResp& a, EnterNormalGameResp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EnterNormalGameResp* New() const PROTOBUF_FINAL { return New(NULL); }

  EnterNormalGameResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EnterNormalGameResp& from);
  void MergeFrom(const EnterNormalGameResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EnterNormalGameResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game.base.BytesData hand = 3;
  bool has_hand() const;
  void clear_hand();
  static const int kHandFieldNumber = 3;
  const ::game::base::BytesData& hand() const;
  ::game::base::BytesData* release_hand();
  ::game::base::BytesData* mutable_hand();
  void set_allocated_hand(::game::base::BytesData* hand);

  // optional .game.base.TablePlayersInfo table_players = 4;
  bool has_table_players() const;
  void clear_table_players();
  static const int kTablePlayersFieldNumber = 4;
  const ::game::base::TablePlayersInfo& table_players() const;
  ::game::base::TablePlayersInfo* release_table_players();
  ::game::base::TablePlayersInfo* mutable_table_players();
  void set_allocated_table_players(::game::base::TablePlayersInfo* table_players);

  // optional .game.base.BytesData custom_data = 6;
  bool has_custom_data() const;
  void clear_custom_data();
  static const int kCustomDataFieldNumber = 6;
  const ::game::base::BytesData& custom_data() const;
  ::game::base::BytesData* release_custom_data();
  ::game::base::BytesData* mutable_custom_data();
  void set_allocated_custom_data(::game::base::BytesData* custom_data);

  // optional int32 code = 1;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // optional int32 flag = 2;
  bool has_flag() const;
  void clear_flag();
  static const int kFlagFieldNumber = 2;
  ::google::protobuf::int32 flag() const;
  void set_flag(::google::protobuf::int32 value);

  // optional int32 custom_flag = 5;
  bool has_custom_flag() const;
  void clear_custom_flag();
  static const int kCustomFlagFieldNumber = 5;
  ::google::protobuf::int32 custom_flag() const;
  void set_custom_flag(::google::protobuf::int32 value);

  // optional int32 gameid = 7;
  bool has_gameid() const;
  void clear_gameid();
  static const int kGameidFieldNumber = 7;
  ::google::protobuf::int32 gameid() const;
  void set_gameid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game.base.EnterNormalGameResp)
 private:
  void set_has_code();
  void clear_has_code();
  void set_has_flag();
  void clear_has_flag();
  void set_has_hand();
  void clear_has_hand();
  void set_has_table_players();
  void clear_has_table_players();
  void set_has_custom_flag();
  void clear_has_custom_flag();
  void set_has_custom_data();
  void clear_has_custom_data();
  void set_has_gameid();
  void clear_has_gameid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::game::base::BytesData* hand_;
  ::game::base::TablePlayersInfo* table_players_;
  ::game::base::BytesData* custom_data_;
  ::google::protobuf::int32 code_;
  ::google::protobuf::int32 flag_;
  ::google::protobuf::int32 custom_flag_;
  ::google::protobuf::int32 gameid_;
  friend struct ::protobuf_game_5fbase_2eproto::TableStruct;
  friend void ::protobuf_game_5fbase_2eproto::InitDefaultsEnterNormalGameRespImpl();
};
// -------------------------------------------------------------------

class EnterPrivateGameReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:game.base.EnterPrivateGameReq) */ {
 public:
  EnterPrivateGameReq();
  virtual ~EnterPrivateGameReq();

  EnterPrivateGameReq(const EnterPrivateGameReq& from);

  inline EnterPrivateGameReq& operator=(const EnterPrivateGameReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EnterPrivateGameReq(EnterPrivateGameReq&& from) noexcept
    : EnterPrivateGameReq() {
    *this = ::std::move(from);
  }

  inline EnterPrivateGameReq& operator=(EnterPrivateGameReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EnterPrivateGameReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EnterPrivateGameReq* internal_default_instance() {
    return reinterpret_cast<const EnterPrivateGameReq*>(
               &_EnterPrivateGameReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(EnterPrivateGameReq* other);
  friend void swap(EnterPrivateGameReq& a, EnterPrivateGameReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EnterPrivateGameReq* New() const PROTOBUF_FINAL { return New(NULL); }

  EnterPrivateGameReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EnterPrivateGameReq& from);
  void MergeFrom(const EnterPrivateGameReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EnterPrivateGameReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game.base.EnterNormalGameReq base_enter = 1;
  bool has_base_enter() const;
  void clear_base_enter();
  static const int kBaseEnterFieldNumber = 1;
  const ::game::base::EnterNormalGameReq& base_enter() const;
  ::game::base::EnterNormalGameReq* release_base_enter();
  ::game::base::EnterNormalGameReq* mutable_base_enter();
  void set_allocated_base_enter(::game::base::EnterNormalGameReq* base_enter);

  // @@protoc_insertion_point(class_scope:game.base.EnterPrivateGameReq)
 private:
  void set_has_base_enter();
  void clear_has_base_enter();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::game::base::EnterNormalGameReq* base_enter_;
  friend struct ::protobuf_game_5fbase_2eproto::TableStruct;
  friend void ::protobuf_game_5fbase_2eproto::InitDefaultsEnterPrivateGameReqImpl();
};
// -------------------------------------------------------------------

class EnterPrivateGameResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:game.base.EnterPrivateGameResp) */ {
 public:
  EnterPrivateGameResp();
  virtual ~EnterPrivateGameResp();

  EnterPrivateGameResp(const EnterPrivateGameResp& from);

  inline EnterPrivateGameResp& operator=(const EnterPrivateGameResp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EnterPrivateGameResp(EnterPrivateGameResp&& from) noexcept
    : EnterPrivateGameResp() {
    *this = ::std::move(from);
  }

  inline EnterPrivateGameResp& operator=(EnterPrivateGameResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EnterPrivateGameResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EnterPrivateGameResp* internal_default_instance() {
    return reinterpret_cast<const EnterPrivateGameResp*>(
               &_EnterPrivateGameResp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(EnterPrivateGameResp* other);
  friend void swap(EnterPrivateGameResp& a, EnterPrivateGameResp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EnterPrivateGameResp* New() const PROTOBUF_FINAL { return New(NULL); }

  EnterPrivateGameResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EnterPrivateGameResp& from);
  void MergeFrom(const EnterPrivateGameResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EnterPrivateGameResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 code = 1;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game.base.EnterPrivateGameResp)
 private:
  void set_has_code();
  void clear_has_code();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 code_;
  friend struct ::protobuf_game_5fbase_2eproto::TableStruct;
  friend void ::protobuf_game_5fbase_2eproto::InitDefaultsEnterPrivateGameRespImpl();
};
// -------------------------------------------------------------------

class EnterMatchGameReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:game.base.EnterMatchGameReq) */ {
 public:
  EnterMatchGameReq();
  virtual ~EnterMatchGameReq();

  EnterMatchGameReq(const EnterMatchGameReq& from);

  inline EnterMatchGameReq& operator=(const EnterMatchGameReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EnterMatchGameReq(EnterMatchGameReq&& from) noexcept
    : EnterMatchGameReq() {
    *this = ::std::move(from);
  }

  inline EnterMatchGameReq& operator=(EnterMatchGameReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EnterMatchGameReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EnterMatchGameReq* internal_default_instance() {
    return reinterpret_cast<const EnterMatchGameReq*>(
               &_EnterMatchGameReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(EnterMatchGameReq* other);
  friend void swap(EnterMatchGameReq& a, EnterMatchGameReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EnterMatchGameReq* New() const PROTOBUF_FINAL { return New(NULL); }

  EnterMatchGameReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EnterMatchGameReq& from);
  void MergeFrom(const EnterMatchGameReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EnterMatchGameReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game.base.EnterNormalGameReq base_enter = 1;
  bool has_base_enter() const;
  void clear_base_enter();
  static const int kBaseEnterFieldNumber = 1;
  const ::game::base::EnterNormalGameReq& base_enter() const;
  ::game::base::EnterNormalGameReq* release_base_enter();
  ::game::base::EnterNormalGameReq* mutable_base_enter();
  void set_allocated_base_enter(::game::base::EnterNormalGameReq* base_enter);

  // @@protoc_insertion_point(class_scope:game.base.EnterMatchGameReq)
 private:
  void set_has_base_enter();
  void clear_has_base_enter();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::game::base::EnterNormalGameReq* base_enter_;
  friend struct ::protobuf_game_5fbase_2eproto::TableStruct;
  friend void ::protobuf_game_5fbase_2eproto::InitDefaultsEnterMatchGameReqImpl();
};
// -------------------------------------------------------------------

class EnterMatchGameResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:game.base.EnterMatchGameResp) */ {
 public:
  EnterMatchGameResp();
  virtual ~EnterMatchGameResp();

  EnterMatchGameResp(const EnterMatchGameResp& from);

  inline EnterMatchGameResp& operator=(const EnterMatchGameResp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EnterMatchGameResp(EnterMatchGameResp&& from) noexcept
    : EnterMatchGameResp() {
    *this = ::std::move(from);
  }

  inline EnterMatchGameResp& operator=(EnterMatchGameResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EnterMatchGameResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EnterMatchGameResp* internal_default_instance() {
    return reinterpret_cast<const EnterMatchGameResp*>(
               &_EnterMatchGameResp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(EnterMatchGameResp* other);
  friend void swap(EnterMatchGameResp& a, EnterMatchGameResp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EnterMatchGameResp* New() const PROTOBUF_FINAL { return New(NULL); }

  EnterMatchGameResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EnterMatchGameResp& from);
  void MergeFrom(const EnterMatchGameResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EnterMatchGameResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 code = 1;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game.base.EnterMatchGameResp)
 private:
  void set_has_code();
  void clear_has_code();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 code_;
  friend struct ::protobuf_game_5fbase_2eproto::TableStruct;
  friend void ::protobuf_game_5fbase_2eproto::InitDefaultsEnterMatchGameRespImpl();
};
// -------------------------------------------------------------------

class LeaveGameReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:game.base.LeaveGameReq) */ {
 public:
  LeaveGameReq();
  virtual ~LeaveGameReq();

  LeaveGameReq(const LeaveGameReq& from);

  inline LeaveGameReq& operator=(const LeaveGameReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LeaveGameReq(LeaveGameReq&& from) noexcept
    : LeaveGameReq() {
    *this = ::std::move(from);
  }

  inline LeaveGameReq& operator=(LeaveGameReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LeaveGameReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LeaveGameReq* internal_default_instance() {
    return reinterpret_cast<const LeaveGameReq*>(
               &_LeaveGameReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(LeaveGameReq* other);
  friend void swap(LeaveGameReq& a, LeaveGameReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LeaveGameReq* New() const PROTOBUF_FINAL { return New(NULL); }

  LeaveGameReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LeaveGameReq& from);
  void MergeFrom(const LeaveGameReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LeaveGameReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  ::google::protobuf::int32 userid() const;
  void set_userid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game.base.LeaveGameReq)
 private:
  void set_has_userid();
  void clear_has_userid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 userid_;
  friend struct ::protobuf_game_5fbase_2eproto::TableStruct;
  friend void ::protobuf_game_5fbase_2eproto::InitDefaultsLeaveGameReqImpl();
};
// -------------------------------------------------------------------

class LeaveGameResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:game.base.LeaveGameResp) */ {
 public:
  LeaveGameResp();
  virtual ~LeaveGameResp();

  LeaveGameResp(const LeaveGameResp& from);

  inline LeaveGameResp& operator=(const LeaveGameResp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LeaveGameResp(LeaveGameResp&& from) noexcept
    : LeaveGameResp() {
    *this = ::std::move(from);
  }

  inline LeaveGameResp& operator=(LeaveGameResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LeaveGameResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LeaveGameResp* internal_default_instance() {
    return reinterpret_cast<const LeaveGameResp*>(
               &_LeaveGameResp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(LeaveGameResp* other);
  friend void swap(LeaveGameResp& a, LeaveGameResp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LeaveGameResp* New() const PROTOBUF_FINAL { return New(NULL); }

  LeaveGameResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LeaveGameResp& from);
  void MergeFrom(const LeaveGameResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LeaveGameResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 code = 1;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game.base.LeaveGameResp)
 private:
  void set_has_code();
  void clear_has_code();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 code_;
  friend struct ::protobuf_game_5fbase_2eproto::TableStruct;
  friend void ::protobuf_game_5fbase_2eproto::InitDefaultsLeaveGameRespImpl();
};
// -------------------------------------------------------------------

class GiveUpReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:game.base.GiveUpReq) */ {
 public:
  GiveUpReq();
  virtual ~GiveUpReq();

  GiveUpReq(const GiveUpReq& from);

  inline GiveUpReq& operator=(const GiveUpReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GiveUpReq(GiveUpReq&& from) noexcept
    : GiveUpReq() {
    *this = ::std::move(from);
  }

  inline GiveUpReq& operator=(GiveUpReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GiveUpReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GiveUpReq* internal_default_instance() {
    return reinterpret_cast<const GiveUpReq*>(
               &_GiveUpReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void Swap(GiveUpReq* other);
  friend void swap(GiveUpReq& a, GiveUpReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GiveUpReq* New() const PROTOBUF_FINAL { return New(NULL); }

  GiveUpReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GiveUpReq& from);
  void MergeFrom(const GiveUpReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GiveUpReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  ::google::protobuf::int32 userid() const;
  void set_userid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game.base.GiveUpReq)
 private:
  void set_has_userid();
  void clear_has_userid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 userid_;
  friend struct ::protobuf_game_5fbase_2eproto::TableStruct;
  friend void ::protobuf_game_5fbase_2eproto::InitDefaultsGiveUpReqImpl();
};
// -------------------------------------------------------------------

class GiveUpResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:game.base.GiveUpResp) */ {
 public:
  GiveUpResp();
  virtual ~GiveUpResp();

  GiveUpResp(const GiveUpResp& from);

  inline GiveUpResp& operator=(const GiveUpResp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GiveUpResp(GiveUpResp&& from) noexcept
    : GiveUpResp() {
    *this = ::std::move(from);
  }

  inline GiveUpResp& operator=(GiveUpResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GiveUpResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GiveUpResp* internal_default_instance() {
    return reinterpret_cast<const GiveUpResp*>(
               &_GiveUpResp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    20;

  void Swap(GiveUpResp* other);
  friend void swap(GiveUpResp& a, GiveUpResp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GiveUpResp* New() const PROTOBUF_FINAL { return New(NULL); }

  GiveUpResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GiveUpResp& from);
  void MergeFrom(const GiveUpResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GiveUpResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 code = 1;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game.base.GiveUpResp)
 private:
  void set_has_code();
  void clear_has_code();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 code_;
  friend struct ::protobuf_game_5fbase_2eproto::TableStruct;
  friend void ::protobuf_game_5fbase_2eproto::InitDefaultsGiveUpRespImpl();
};
// -------------------------------------------------------------------

class Looker2PlayerReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:game.base.Looker2PlayerReq) */ {
 public:
  Looker2PlayerReq();
  virtual ~Looker2PlayerReq();

  Looker2PlayerReq(const Looker2PlayerReq& from);

  inline Looker2PlayerReq& operator=(const Looker2PlayerReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Looker2PlayerReq(Looker2PlayerReq&& from) noexcept
    : Looker2PlayerReq() {
    *this = ::std::move(from);
  }

  inline Looker2PlayerReq& operator=(Looker2PlayerReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Looker2PlayerReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Looker2PlayerReq* internal_default_instance() {
    return reinterpret_cast<const Looker2PlayerReq*>(
               &_Looker2PlayerReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    21;

  void Swap(Looker2PlayerReq* other);
  friend void swap(Looker2PlayerReq& a, Looker2PlayerReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Looker2PlayerReq* New() const PROTOBUF_FINAL { return New(NULL); }

  Looker2PlayerReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Looker2PlayerReq& from);
  void MergeFrom(const Looker2PlayerReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Looker2PlayerReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  ::google::protobuf::int32 userid() const;
  void set_userid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game.base.Looker2PlayerReq)
 private:
  void set_has_userid();
  void clear_has_userid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 userid_;
  friend struct ::protobuf_game_5fbase_2eproto::TableStruct;
  friend void ::protobuf_game_5fbase_2eproto::InitDefaultsLooker2PlayerReqImpl();
};
// -------------------------------------------------------------------

class Looker2PlayerResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:game.base.Looker2PlayerResp) */ {
 public:
  Looker2PlayerResp();
  virtual ~Looker2PlayerResp();

  Looker2PlayerResp(const Looker2PlayerResp& from);

  inline Looker2PlayerResp& operator=(const Looker2PlayerResp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Looker2PlayerResp(Looker2PlayerResp&& from) noexcept
    : Looker2PlayerResp() {
    *this = ::std::move(from);
  }

  inline Looker2PlayerResp& operator=(Looker2PlayerResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Looker2PlayerResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Looker2PlayerResp* internal_default_instance() {
    return reinterpret_cast<const Looker2PlayerResp*>(
               &_Looker2PlayerResp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    22;

  void Swap(Looker2PlayerResp* other);
  friend void swap(Looker2PlayerResp& a, Looker2PlayerResp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Looker2PlayerResp* New() const PROTOBUF_FINAL { return New(NULL); }

  Looker2PlayerResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Looker2PlayerResp& from);
  void MergeFrom(const Looker2PlayerResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Looker2PlayerResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 code = 1;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // optional int32 chairno = 2;
  bool has_chairno() const;
  void clear_chairno();
  static const int kChairnoFieldNumber = 2;
  ::google::protobuf::int32 chairno() const;
  void set_chairno(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game.base.Looker2PlayerResp)
 private:
  void set_has_code();
  void clear_has_code();
  void set_has_chairno();
  void clear_has_chairno();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 code_;
  ::google::protobuf::int32 chairno_;
  friend struct ::protobuf_game_5fbase_2eproto::TableStruct;
  friend void ::protobuf_game_5fbase_2eproto::InitDefaultsLooker2PlayerRespImpl();
};
// -------------------------------------------------------------------

class Player2LookerReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:game.base.Player2LookerReq) */ {
 public:
  Player2LookerReq();
  virtual ~Player2LookerReq();

  Player2LookerReq(const Player2LookerReq& from);

  inline Player2LookerReq& operator=(const Player2LookerReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Player2LookerReq(Player2LookerReq&& from) noexcept
    : Player2LookerReq() {
    *this = ::std::move(from);
  }

  inline Player2LookerReq& operator=(Player2LookerReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Player2LookerReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Player2LookerReq* internal_default_instance() {
    return reinterpret_cast<const Player2LookerReq*>(
               &_Player2LookerReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    23;

  void Swap(Player2LookerReq* other);
  friend void swap(Player2LookerReq& a, Player2LookerReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Player2LookerReq* New() const PROTOBUF_FINAL { return New(NULL); }

  Player2LookerReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Player2LookerReq& from);
  void MergeFrom(const Player2LookerReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Player2LookerReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  ::google::protobuf::int32 userid() const;
  void set_userid(::google::protobuf::int32 value);

  // optional int32 flag = 2;
  bool has_flag() const;
  void clear_flag();
  static const int kFlagFieldNumber = 2;
  ::google::protobuf::int32 flag() const;
  void set_flag(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game.base.Player2LookerReq)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_flag();
  void clear_has_flag();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 flag_;
  friend struct ::protobuf_game_5fbase_2eproto::TableStruct;
  friend void ::protobuf_game_5fbase_2eproto::InitDefaultsPlayer2LookerReqImpl();
};
// -------------------------------------------------------------------

class Player2LookerResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:game.base.Player2LookerResp) */ {
 public:
  Player2LookerResp();
  virtual ~Player2LookerResp();

  Player2LookerResp(const Player2LookerResp& from);

  inline Player2LookerResp& operator=(const Player2LookerResp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Player2LookerResp(Player2LookerResp&& from) noexcept
    : Player2LookerResp() {
    *this = ::std::move(from);
  }

  inline Player2LookerResp& operator=(Player2LookerResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Player2LookerResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Player2LookerResp* internal_default_instance() {
    return reinterpret_cast<const Player2LookerResp*>(
               &_Player2LookerResp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    24;

  void Swap(Player2LookerResp* other);
  friend void swap(Player2LookerResp& a, Player2LookerResp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Player2LookerResp* New() const PROTOBUF_FINAL { return New(NULL); }

  Player2LookerResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Player2LookerResp& from);
  void MergeFrom(const Player2LookerResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Player2LookerResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 code = 1;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game.base.Player2LookerResp)
 private:
  void set_has_code();
  void clear_has_code();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 code_;
  friend struct ::protobuf_game_5fbase_2eproto::TableStruct;
  friend void ::protobuf_game_5fbase_2eproto::InitDefaultsPlayer2LookerRespImpl();
};
// -------------------------------------------------------------------

class SwitchTableReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:game.base.SwitchTableReq) */ {
 public:
  SwitchTableReq();
  virtual ~SwitchTableReq();

  SwitchTableReq(const SwitchTableReq& from);

  inline SwitchTableReq& operator=(const SwitchTableReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SwitchTableReq(SwitchTableReq&& from) noexcept
    : SwitchTableReq() {
    *this = ::std::move(from);
  }

  inline SwitchTableReq& operator=(SwitchTableReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SwitchTableReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SwitchTableReq* internal_default_instance() {
    return reinterpret_cast<const SwitchTableReq*>(
               &_SwitchTableReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    25;

  void Swap(SwitchTableReq* other);
  friend void swap(SwitchTableReq& a, SwitchTableReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SwitchTableReq* New() const PROTOBUF_FINAL { return New(NULL); }

  SwitchTableReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SwitchTableReq& from);
  void MergeFrom(const SwitchTableReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SwitchTableReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  ::google::protobuf::int32 userid() const;
  void set_userid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game.base.SwitchTableReq)
 private:
  void set_has_userid();
  void clear_has_userid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 userid_;
  friend struct ::protobuf_game_5fbase_2eproto::TableStruct;
  friend void ::protobuf_game_5fbase_2eproto::InitDefaultsSwitchTableReqImpl();
};
// -------------------------------------------------------------------

class SwitchTableResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:game.base.SwitchTableResp) */ {
 public:
  SwitchTableResp();
  virtual ~SwitchTableResp();

  SwitchTableResp(const SwitchTableResp& from);

  inline SwitchTableResp& operator=(const SwitchTableResp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SwitchTableResp(SwitchTableResp&& from) noexcept
    : SwitchTableResp() {
    *this = ::std::move(from);
  }

  inline SwitchTableResp& operator=(SwitchTableResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SwitchTableResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SwitchTableResp* internal_default_instance() {
    return reinterpret_cast<const SwitchTableResp*>(
               &_SwitchTableResp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    26;

  void Swap(SwitchTableResp* other);
  friend void swap(SwitchTableResp& a, SwitchTableResp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SwitchTableResp* New() const PROTOBUF_FINAL { return New(NULL); }

  SwitchTableResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SwitchTableResp& from);
  void MergeFrom(const SwitchTableResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SwitchTableResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game.base.TablePlayersInfo table_players = 2;
  bool has_table_players() const;
  void clear_table_players();
  static const int kTablePlayersFieldNumber = 2;
  const ::game::base::TablePlayersInfo& table_players() const;
  ::game::base::TablePlayersInfo* release_table_players();
  ::game::base::TablePlayersInfo* mutable_table_players();
  void set_allocated_table_players(::game::base::TablePlayersInfo* table_players);

  // optional .game.base.BytesData custom_data = 4;
  bool has_custom_data() const;
  void clear_custom_data();
  static const int kCustomDataFieldNumber = 4;
  const ::game::base::BytesData& custom_data() const;
  ::game::base::BytesData* release_custom_data();
  ::game::base::BytesData* mutable_custom_data();
  void set_allocated_custom_data(::game::base::BytesData* custom_data);

  // optional int32 code = 1;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // optional int32 custom_flag = 3;
  bool has_custom_flag() const;
  void clear_custom_flag();
  static const int kCustomFlagFieldNumber = 3;
  ::google::protobuf::int32 custom_flag() const;
  void set_custom_flag(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game.base.SwitchTableResp)
 private:
  void set_has_code();
  void clear_has_code();
  void set_has_table_players();
  void clear_has_table_players();
  void set_has_custom_flag();
  void clear_has_custom_flag();
  void set_has_custom_data();
  void clear_has_custom_data();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::game::base::TablePlayersInfo* table_players_;
  ::game::base::BytesData* custom_data_;
  ::google::protobuf::int32 code_;
  ::google::protobuf::int32 custom_flag_;
  friend struct ::protobuf_game_5fbase_2eproto::TableStruct;
  friend void ::protobuf_game_5fbase_2eproto::InitDefaultsSwitchTableRespImpl();
};
// -------------------------------------------------------------------

class TableChatReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:game.base.TableChatReq) */ {
 public:
  TableChatReq();
  virtual ~TableChatReq();

  TableChatReq(const TableChatReq& from);

  inline TableChatReq& operator=(const TableChatReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TableChatReq(TableChatReq&& from) noexcept
    : TableChatReq() {
    *this = ::std::move(from);
  }

  inline TableChatReq& operator=(TableChatReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TableChatReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TableChatReq* internal_default_instance() {
    return reinterpret_cast<const TableChatReq*>(
               &_TableChatReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    27;

  void Swap(TableChatReq* other);
  friend void swap(TableChatReq& a, TableChatReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TableChatReq* New() const PROTOBUF_FINAL { return New(NULL); }

  TableChatReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TableChatReq& from);
  void MergeFrom(const TableChatReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TableChatReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string msg = 2;
  bool has_msg() const;
  void clear_msg();
  static const int kMsgFieldNumber = 2;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // optional int32 userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  ::google::protobuf::int32 userid() const;
  void set_userid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game.base.TableChatReq)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_msg();
  void clear_has_msg();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  ::google::protobuf::int32 userid_;
  friend struct ::protobuf_game_5fbase_2eproto::TableStruct;
  friend void ::protobuf_game_5fbase_2eproto::InitDefaultsTableChatReqImpl();
};
// -------------------------------------------------------------------

class TableChatNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:game.base.TableChatNotify) */ {
 public:
  TableChatNotify();
  virtual ~TableChatNotify();

  TableChatNotify(const TableChatNotify& from);

  inline TableChatNotify& operator=(const TableChatNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TableChatNotify(TableChatNotify&& from) noexcept
    : TableChatNotify() {
    *this = ::std::move(from);
  }

  inline TableChatNotify& operator=(TableChatNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TableChatNotify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TableChatNotify* internal_default_instance() {
    return reinterpret_cast<const TableChatNotify*>(
               &_TableChatNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    28;

  void Swap(TableChatNotify* other);
  friend void swap(TableChatNotify& a, TableChatNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TableChatNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  TableChatNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TableChatNotify& from);
  void MergeFrom(const TableChatNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TableChatNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string msg = 2;
  bool has_msg() const;
  void clear_msg();
  static const int kMsgFieldNumber = 2;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // optional int32 userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  ::google::protobuf::int32 userid() const;
  void set_userid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game.base.TableChatNotify)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_msg();
  void clear_has_msg();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  ::google::protobuf::int32 userid_;
  friend struct ::protobuf_game_5fbase_2eproto::TableStruct;
  friend void ::protobuf_game_5fbase_2eproto::InitDefaultsTableChatNotifyImpl();
};
// -------------------------------------------------------------------

class TableChatResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:game.base.TableChatResp) */ {
 public:
  TableChatResp();
  virtual ~TableChatResp();

  TableChatResp(const TableChatResp& from);

  inline TableChatResp& operator=(const TableChatResp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TableChatResp(TableChatResp&& from) noexcept
    : TableChatResp() {
    *this = ::std::move(from);
  }

  inline TableChatResp& operator=(TableChatResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TableChatResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TableChatResp* internal_default_instance() {
    return reinterpret_cast<const TableChatResp*>(
               &_TableChatResp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    29;

  void Swap(TableChatResp* other);
  friend void swap(TableChatResp& a, TableChatResp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TableChatResp* New() const PROTOBUF_FINAL { return New(NULL); }

  TableChatResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TableChatResp& from);
  void MergeFrom(const TableChatResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TableChatResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 code = 1;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game.base.TableChatResp)
 private:
  void set_has_code();
  void clear_has_code();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 code_;
  friend struct ::protobuf_game_5fbase_2eproto::TableStruct;
  friend void ::protobuf_game_5fbase_2eproto::InitDefaultsTableChatRespImpl();
};
// -------------------------------------------------------------------

class StartGameReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:game.base.StartGameReq) */ {
 public:
  StartGameReq();
  virtual ~StartGameReq();

  StartGameReq(const StartGameReq& from);

  inline StartGameReq& operator=(const StartGameReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StartGameReq(StartGameReq&& from) noexcept
    : StartGameReq() {
    *this = ::std::move(from);
  }

  inline StartGameReq& operator=(StartGameReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StartGameReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StartGameReq* internal_default_instance() {
    return reinterpret_cast<const StartGameReq*>(
               &_StartGameReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    30;

  void Swap(StartGameReq* other);
  friend void swap(StartGameReq& a, StartGameReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StartGameReq* New() const PROTOBUF_FINAL { return New(NULL); }

  StartGameReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StartGameReq& from);
  void MergeFrom(const StartGameReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StartGameReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 roomid = 1;
  bool has_roomid() const;
  void clear_roomid();
  static const int kRoomidFieldNumber = 1;
  ::google::protobuf::int32 roomid() const;
  void set_roomid(::google::protobuf::int32 value);

  // optional int32 tableno = 2;
  bool has_tableno() const;
  void clear_tableno();
  static const int kTablenoFieldNumber = 2;
  ::google::protobuf::int32 tableno() const;
  void set_tableno(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game.base.StartGameReq)
 private:
  void set_has_roomid();
  void clear_has_roomid();
  void set_has_tableno();
  void clear_has_tableno();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 roomid_;
  ::google::protobuf::int32 tableno_;
  friend struct ::protobuf_game_5fbase_2eproto::TableStruct;
  friend void ::protobuf_game_5fbase_2eproto::InitDefaultsStartGameReqImpl();
};
// -------------------------------------------------------------------

class GetTablePlayersInfoReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:game.base.GetTablePlayersInfoReq) */ {
 public:
  GetTablePlayersInfoReq();
  virtual ~GetTablePlayersInfoReq();

  GetTablePlayersInfoReq(const GetTablePlayersInfoReq& from);

  inline GetTablePlayersInfoReq& operator=(const GetTablePlayersInfoReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetTablePlayersInfoReq(GetTablePlayersInfoReq&& from) noexcept
    : GetTablePlayersInfoReq() {
    *this = ::std::move(from);
  }

  inline GetTablePlayersInfoReq& operator=(GetTablePlayersInfoReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetTablePlayersInfoReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTablePlayersInfoReq* internal_default_instance() {
    return reinterpret_cast<const GetTablePlayersInfoReq*>(
               &_GetTablePlayersInfoReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    31;

  void Swap(GetTablePlayersInfoReq* other);
  friend void swap(GetTablePlayersInfoReq& a, GetTablePlayersInfoReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetTablePlayersInfoReq* New() const PROTOBUF_FINAL { return New(NULL); }

  GetTablePlayersInfoReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetTablePlayersInfoReq& from);
  void MergeFrom(const GetTablePlayersInfoReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetTablePlayersInfoReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  ::google::protobuf::int32 userid() const;
  void set_userid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game.base.GetTablePlayersInfoReq)
 private:
  void set_has_userid();
  void clear_has_userid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 userid_;
  friend struct ::protobuf_game_5fbase_2eproto::TableStruct;
  friend void ::protobuf_game_5fbase_2eproto::InitDefaultsGetTablePlayersInfoReqImpl();
};
// -------------------------------------------------------------------

class GetTablePlayersInfoResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:game.base.GetTablePlayersInfoResp) */ {
 public:
  GetTablePlayersInfoResp();
  virtual ~GetTablePlayersInfoResp();

  GetTablePlayersInfoResp(const GetTablePlayersInfoResp& from);

  inline GetTablePlayersInfoResp& operator=(const GetTablePlayersInfoResp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetTablePlayersInfoResp(GetTablePlayersInfoResp&& from) noexcept
    : GetTablePlayersInfoResp() {
    *this = ::std::move(from);
  }

  inline GetTablePlayersInfoResp& operator=(GetTablePlayersInfoResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetTablePlayersInfoResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTablePlayersInfoResp* internal_default_instance() {
    return reinterpret_cast<const GetTablePlayersInfoResp*>(
               &_GetTablePlayersInfoResp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    32;

  void Swap(GetTablePlayersInfoResp* other);
  friend void swap(GetTablePlayersInfoResp& a, GetTablePlayersInfoResp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetTablePlayersInfoResp* New() const PROTOBUF_FINAL { return New(NULL); }

  GetTablePlayersInfoResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetTablePlayersInfoResp& from);
  void MergeFrom(const GetTablePlayersInfoResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetTablePlayersInfoResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game.base.TablePlayersInfo table_players = 2;
  bool has_table_players() const;
  void clear_table_players();
  static const int kTablePlayersFieldNumber = 2;
  const ::game::base::TablePlayersInfo& table_players() const;
  ::game::base::TablePlayersInfo* release_table_players();
  ::game::base::TablePlayersInfo* mutable_table_players();
  void set_allocated_table_players(::game::base::TablePlayersInfo* table_players);

  // optional .game.base.BytesData custom_data = 4;
  bool has_custom_data() const;
  void clear_custom_data();
  static const int kCustomDataFieldNumber = 4;
  const ::game::base::BytesData& custom_data() const;
  ::game::base::BytesData* release_custom_data();
  ::game::base::BytesData* mutable_custom_data();
  void set_allocated_custom_data(::game::base::BytesData* custom_data);

  // optional .game.base.BytesData hand = 5;
  bool has_hand() const;
  void clear_hand();
  static const int kHandFieldNumber = 5;
  const ::game::base::BytesData& hand() const;
  ::game::base::BytesData* release_hand();
  ::game::base::BytesData* mutable_hand();
  void set_allocated_hand(::game::base::BytesData* hand);

  // optional int32 code = 1;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // optional int32 custom_flag = 3;
  bool has_custom_flag() const;
  void clear_custom_flag();
  static const int kCustomFlagFieldNumber = 3;
  ::google::protobuf::int32 custom_flag() const;
  void set_custom_flag(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game.base.GetTablePlayersInfoResp)
 private:
  void set_has_code();
  void clear_has_code();
  void set_has_table_players();
  void clear_has_table_players();
  void set_has_custom_flag();
  void clear_has_custom_flag();
  void set_has_custom_data();
  void clear_has_custom_data();
  void set_has_hand();
  void clear_has_hand();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::game::base::TablePlayersInfo* table_players_;
  ::game::base::BytesData* custom_data_;
  ::game::base::BytesData* hand_;
  ::google::protobuf::int32 code_;
  ::google::protobuf::int32 custom_flag_;
  friend struct ::protobuf_game_5fbase_2eproto::TableStruct;
  friend void ::protobuf_game_5fbase_2eproto::InitDefaultsGetTablePlayersInfoRespImpl();
};
// -------------------------------------------------------------------

class CountdownStartNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:game.base.CountdownStartNotify) */ {
 public:
  CountdownStartNotify();
  virtual ~CountdownStartNotify();

  CountdownStartNotify(const CountdownStartNotify& from);

  inline CountdownStartNotify& operator=(const CountdownStartNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CountdownStartNotify(CountdownStartNotify&& from) noexcept
    : CountdownStartNotify() {
    *this = ::std::move(from);
  }

  inline CountdownStartNotify& operator=(CountdownStartNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CountdownStartNotify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CountdownStartNotify* internal_default_instance() {
    return reinterpret_cast<const CountdownStartNotify*>(
               &_CountdownStartNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    33;

  void Swap(CountdownStartNotify* other);
  friend void swap(CountdownStartNotify& a, CountdownStartNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CountdownStartNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  CountdownStartNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CountdownStartNotify& from);
  void MergeFrom(const CountdownStartNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CountdownStartNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 tableno = 1;
  bool has_tableno() const;
  void clear_tableno();
  static const int kTablenoFieldNumber = 1;
  ::google::protobuf::int32 tableno() const;
  void set_tableno(::google::protobuf::int32 value);

  // optional int32 countdown_s = 2;
  bool has_countdown_s() const;
  void clear_countdown_s();
  static const int kCountdownSFieldNumber = 2;
  ::google::protobuf::int32 countdown_s() const;
  void set_countdown_s(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game.base.CountdownStartNotify)
 private:
  void set_has_tableno();
  void clear_has_tableno();
  void set_has_countdown_s();
  void clear_has_countdown_s();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 tableno_;
  ::google::protobuf::int32 countdown_s_;
  friend struct ::protobuf_game_5fbase_2eproto::TableStruct;
  friend void ::protobuf_game_5fbase_2eproto::InitDefaultsCountdownStartNotifyImpl();
};
// -------------------------------------------------------------------

class CountdownStopNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:game.base.CountdownStopNotify) */ {
 public:
  CountdownStopNotify();
  virtual ~CountdownStopNotify();

  CountdownStopNotify(const CountdownStopNotify& from);

  inline CountdownStopNotify& operator=(const CountdownStopNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CountdownStopNotify(CountdownStopNotify&& from) noexcept
    : CountdownStopNotify() {
    *this = ::std::move(from);
  }

  inline CountdownStopNotify& operator=(CountdownStopNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CountdownStopNotify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CountdownStopNotify* internal_default_instance() {
    return reinterpret_cast<const CountdownStopNotify*>(
               &_CountdownStopNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    34;

  void Swap(CountdownStopNotify* other);
  friend void swap(CountdownStopNotify& a, CountdownStopNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CountdownStopNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  CountdownStopNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CountdownStopNotify& from);
  void MergeFrom(const CountdownStopNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CountdownStopNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 tableno = 1;
  bool has_tableno() const;
  void clear_tableno();
  static const int kTablenoFieldNumber = 1;
  ::google::protobuf::int32 tableno() const;
  void set_tableno(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game.base.CountdownStopNotify)
 private:
  void set_has_tableno();
  void clear_has_tableno();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 tableno_;
  friend struct ::protobuf_game_5fbase_2eproto::TableStruct;
  friend void ::protobuf_game_5fbase_2eproto::InitDefaultsCountdownStopNotifyImpl();
};
// -------------------------------------------------------------------

class GameStartNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:game.base.GameStartNotify) */ {
 public:
  GameStartNotify();
  virtual ~GameStartNotify();

  GameStartNotify(const GameStartNotify& from);

  inline GameStartNotify& operator=(const GameStartNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameStartNotify(GameStartNotify&& from) noexcept
    : GameStartNotify() {
    *this = ::std::move(from);
  }

  inline GameStartNotify& operator=(GameStartNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameStartNotify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameStartNotify* internal_default_instance() {
    return reinterpret_cast<const GameStartNotify*>(
               &_GameStartNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    35;

  void Swap(GameStartNotify* other);
  friend void swap(GameStartNotify& a, GameStartNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameStartNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  GameStartNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GameStartNotify& from);
  void MergeFrom(const GameStartNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GameStartNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game.base.BytesData custom_data = 3;
  bool has_custom_data() const;
  void clear_custom_data();
  static const int kCustomDataFieldNumber = 3;
  const ::game::base::BytesData& custom_data() const;
  ::game::base::BytesData* release_custom_data();
  ::game::base::BytesData* mutable_custom_data();
  void set_allocated_custom_data(::game::base::BytesData* custom_data);

  // optional int32 tableno = 1;
  bool has_tableno() const;
  void clear_tableno();
  static const int kTablenoFieldNumber = 1;
  ::google::protobuf::int32 tableno() const;
  void set_tableno(::google::protobuf::int32 value);

  // optional int32 flag = 2;
  bool has_flag() const;
  void clear_flag();
  static const int kFlagFieldNumber = 2;
  ::google::protobuf::int32 flag() const;
  void set_flag(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game.base.GameStartNotify)
 private:
  void set_has_tableno();
  void clear_has_tableno();
  void set_has_flag();
  void clear_has_flag();
  void set_has_custom_data();
  void clear_has_custom_data();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::game::base::BytesData* custom_data_;
  ::google::protobuf::int32 tableno_;
  ::google::protobuf::int32 flag_;
  friend struct ::protobuf_game_5fbase_2eproto::TableStruct;
  friend void ::protobuf_game_5fbase_2eproto::InitDefaultsGameStartNotifyImpl();
};
// -------------------------------------------------------------------

class PlayerGiveupNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:game.base.PlayerGiveupNotify) */ {
 public:
  PlayerGiveupNotify();
  virtual ~PlayerGiveupNotify();

  PlayerGiveupNotify(const PlayerGiveupNotify& from);

  inline PlayerGiveupNotify& operator=(const PlayerGiveupNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerGiveupNotify(PlayerGiveupNotify&& from) noexcept
    : PlayerGiveupNotify() {
    *this = ::std::move(from);
  }

  inline PlayerGiveupNotify& operator=(PlayerGiveupNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerGiveupNotify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerGiveupNotify* internal_default_instance() {
    return reinterpret_cast<const PlayerGiveupNotify*>(
               &_PlayerGiveupNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    36;

  void Swap(PlayerGiveupNotify* other);
  friend void swap(PlayerGiveupNotify& a, PlayerGiveupNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerGiveupNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  PlayerGiveupNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PlayerGiveupNotify& from);
  void MergeFrom(const PlayerGiveupNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PlayerGiveupNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  ::google::protobuf::int32 userid() const;
  void set_userid(::google::protobuf::int32 value);

  // optional int32 chairno = 2;
  bool has_chairno() const;
  void clear_chairno();
  static const int kChairnoFieldNumber = 2;
  ::google::protobuf::int32 chairno() const;
  void set_chairno(::google::protobuf::int32 value);

  // optional int32 next_chair = 3;
  bool has_next_chair() const;
  void clear_next_chair();
  static const int kNextChairFieldNumber = 3;
  ::google::protobuf::int32 next_chair() const;
  void set_next_chair(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game.base.PlayerGiveupNotify)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_chairno();
  void clear_has_chairno();
  void set_has_next_chair();
  void clear_has_next_chair();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 chairno_;
  ::google::protobuf::int32 next_chair_;
  friend struct ::protobuf_game_5fbase_2eproto::TableStruct;
  friend void ::protobuf_game_5fbase_2eproto::InitDefaultsPlayerGiveupNotifyImpl();
};
// -------------------------------------------------------------------

class GameResultNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:game.base.GameResultNotify) */ {
 public:
  GameResultNotify();
  virtual ~GameResultNotify();

  GameResultNotify(const GameResultNotify& from);

  inline GameResultNotify& operator=(const GameResultNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameResultNotify(GameResultNotify&& from) noexcept
    : GameResultNotify() {
    *this = ::std::move(from);
  }

  inline GameResultNotify& operator=(GameResultNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameResultNotify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameResultNotify* internal_default_instance() {
    return reinterpret_cast<const GameResultNotify*>(
               &_GameResultNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    37;

  void Swap(GameResultNotify* other);
  friend void swap(GameResultNotify& a, GameResultNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameResultNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  GameResultNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GameResultNotify& from);
  void MergeFrom(const GameResultNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GameResultNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .game.base.UserResult user_results = 5;
  int user_results_size() const;
  void clear_user_results();
  static const int kUserResultsFieldNumber = 5;
  const ::game::base::UserResult& user_results(int index) const;
  ::game::base::UserResult* mutable_user_results(int index);
  ::game::base::UserResult* add_user_results();
  ::google::protobuf::RepeatedPtrField< ::game::base::UserResult >*
      mutable_user_results();
  const ::google::protobuf::RepeatedPtrField< ::game::base::UserResult >&
      user_results() const;

  // optional .game.base.BytesData custom_data = 6;
  bool has_custom_data() const;
  void clear_custom_data();
  static const int kCustomDataFieldNumber = 6;
  const ::game::base::BytesData& custom_data() const;
  ::game::base::BytesData* release_custom_data();
  ::game::base::BytesData* mutable_custom_data();
  void set_allocated_custom_data(::game::base::BytesData* custom_data);

  // optional int32 tableno = 1;
  bool has_tableno() const;
  void clear_tableno();
  static const int kTablenoFieldNumber = 1;
  ::google::protobuf::int32 tableno() const;
  void set_tableno(::google::protobuf::int32 value);

  // optional int32 bout_count = 2;
  bool has_bout_count() const;
  void clear_bout_count();
  static const int kBoutCountFieldNumber = 2;
  ::google::protobuf::int32 bout_count() const;
  void set_bout_count(::google::protobuf::int32 value);

  // optional int64 base_deposit = 4;
  bool has_base_deposit() const;
  void clear_base_deposit();
  static const int kBaseDepositFieldNumber = 4;
  ::google::protobuf::int64 base_deposit() const;
  void set_base_deposit(::google::protobuf::int64 value);

  // optional int32 banker_chair = 3;
  bool has_banker_chair() const;
  void clear_banker_chair();
  static const int kBankerChairFieldNumber = 3;
  ::google::protobuf::int32 banker_chair() const;
  void set_banker_chair(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game.base.GameResultNotify)
 private:
  void set_has_tableno();
  void clear_has_tableno();
  void set_has_bout_count();
  void clear_has_bout_count();
  void set_has_banker_chair();
  void clear_has_banker_chair();
  void set_has_base_deposit();
  void clear_has_base_deposit();
  void set_has_custom_data();
  void clear_has_custom_data();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::game::base::UserResult > user_results_;
  ::game::base::BytesData* custom_data_;
  ::google::protobuf::int32 tableno_;
  ::google::protobuf::int32 bout_count_;
  ::google::protobuf::int64 base_deposit_;
  ::google::protobuf::int32 banker_chair_;
  friend struct ::protobuf_game_5fbase_2eproto::TableStruct;
  friend void ::protobuf_game_5fbase_2eproto::InitDefaultsGameResultNotifyImpl();
};
// -------------------------------------------------------------------

class UserSitDownNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:game.base.UserSitDownNotify) */ {
 public:
  UserSitDownNotify();
  virtual ~UserSitDownNotify();

  UserSitDownNotify(const UserSitDownNotify& from);

  inline UserSitDownNotify& operator=(const UserSitDownNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserSitDownNotify(UserSitDownNotify&& from) noexcept
    : UserSitDownNotify() {
    *this = ::std::move(from);
  }

  inline UserSitDownNotify& operator=(UserSitDownNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserSitDownNotify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserSitDownNotify* internal_default_instance() {
    return reinterpret_cast<const UserSitDownNotify*>(
               &_UserSitDownNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    38;

  void Swap(UserSitDownNotify* other);
  friend void swap(UserSitDownNotify& a, UserSitDownNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserSitDownNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  UserSitDownNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserSitDownNotify& from);
  void MergeFrom(const UserSitDownNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserSitDownNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game.base.User user = 1;
  bool has_user() const;
  void clear_user();
  static const int kUserFieldNumber = 1;
  const ::game::base::User& user() const;
  ::game::base::User* release_user();
  ::game::base::User* mutable_user();
  void set_allocated_user(::game::base::User* user);

  // @@protoc_insertion_point(class_scope:game.base.UserSitDownNotify)
 private:
  void set_has_user();
  void clear_has_user();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::game::base::User* user_;
  friend struct ::protobuf_game_5fbase_2eproto::TableStruct;
  friend void ::protobuf_game_5fbase_2eproto::InitDefaultsUserSitDownNotifyImpl();
};
// -------------------------------------------------------------------

class UserStandUpNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:game.base.UserStandUpNotify) */ {
 public:
  UserStandUpNotify();
  virtual ~UserStandUpNotify();

  UserStandUpNotify(const UserStandUpNotify& from);

  inline UserStandUpNotify& operator=(const UserStandUpNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserStandUpNotify(UserStandUpNotify&& from) noexcept
    : UserStandUpNotify() {
    *this = ::std::move(from);
  }

  inline UserStandUpNotify& operator=(UserStandUpNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserStandUpNotify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserStandUpNotify* internal_default_instance() {
    return reinterpret_cast<const UserStandUpNotify*>(
               &_UserStandUpNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    39;

  void Swap(UserStandUpNotify* other);
  friend void swap(UserStandUpNotify& a, UserStandUpNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserStandUpNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  UserStandUpNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserStandUpNotify& from);
  void MergeFrom(const UserStandUpNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserStandUpNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  ::google::protobuf::int32 userid() const;
  void set_userid(::google::protobuf::int32 value);

  // optional int32 chairno = 2;
  bool has_chairno() const;
  void clear_chairno();
  static const int kChairnoFieldNumber = 2;
  ::google::protobuf::int32 chairno() const;
  void set_chairno(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game.base.UserStandUpNotify)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_chairno();
  void clear_has_chairno();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 chairno_;
  friend struct ::protobuf_game_5fbase_2eproto::TableStruct;
  friend void ::protobuf_game_5fbase_2eproto::InitDefaultsUserStandUpNotifyImpl();
};
// -------------------------------------------------------------------

class UserLeaveNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:game.base.UserLeaveNotify) */ {
 public:
  UserLeaveNotify();
  virtual ~UserLeaveNotify();

  UserLeaveNotify(const UserLeaveNotify& from);

  inline UserLeaveNotify& operator=(const UserLeaveNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserLeaveNotify(UserLeaveNotify&& from) noexcept
    : UserLeaveNotify() {
    *this = ::std::move(from);
  }

  inline UserLeaveNotify& operator=(UserLeaveNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserLeaveNotify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserLeaveNotify* internal_default_instance() {
    return reinterpret_cast<const UserLeaveNotify*>(
               &_UserLeaveNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    40;

  void Swap(UserLeaveNotify* other);
  friend void swap(UserLeaveNotify& a, UserLeaveNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserLeaveNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  UserLeaveNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserLeaveNotify& from);
  void MergeFrom(const UserLeaveNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserLeaveNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  ::google::protobuf::int32 userid() const;
  void set_userid(::google::protobuf::int32 value);

  // optional int32 chairno = 2;
  bool has_chairno() const;
  void clear_chairno();
  static const int kChairnoFieldNumber = 2;
  ::google::protobuf::int32 chairno() const;
  void set_chairno(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game.base.UserLeaveNotify)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_chairno();
  void clear_has_chairno();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 chairno_;
  friend struct ::protobuf_game_5fbase_2eproto::TableStruct;
  friend void ::protobuf_game_5fbase_2eproto::InitDefaultsUserLeaveNotifyImpl();
};
// -------------------------------------------------------------------

class UserDepositChangeNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:game.base.UserDepositChangeNotify) */ {
 public:
  UserDepositChangeNotify();
  virtual ~UserDepositChangeNotify();

  UserDepositChangeNotify(const UserDepositChangeNotify& from);

  inline UserDepositChangeNotify& operator=(const UserDepositChangeNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserDepositChangeNotify(UserDepositChangeNotify&& from) noexcept
    : UserDepositChangeNotify() {
    *this = ::std::move(from);
  }

  inline UserDepositChangeNotify& operator=(UserDepositChangeNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserDepositChangeNotify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserDepositChangeNotify* internal_default_instance() {
    return reinterpret_cast<const UserDepositChangeNotify*>(
               &_UserDepositChangeNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    41;

  void Swap(UserDepositChangeNotify* other);
  friend void swap(UserDepositChangeNotify& a, UserDepositChangeNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserDepositChangeNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  UserDepositChangeNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserDepositChangeNotify& from);
  void MergeFrom(const UserDepositChangeNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserDepositChangeNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 diff_deposit = 2;
  bool has_diff_deposit() const;
  void clear_diff_deposit();
  static const int kDiffDepositFieldNumber = 2;
  ::google::protobuf::int64 diff_deposit() const;
  void set_diff_deposit(::google::protobuf::int64 value);

  // optional int64 own_deposit = 3;
  bool has_own_deposit() const;
  void clear_own_deposit();
  static const int kOwnDepositFieldNumber = 3;
  ::google::protobuf::int64 own_deposit() const;
  void set_own_deposit(::google::protobuf::int64 value);

  // optional int32 userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  ::google::protobuf::int32 userid() const;
  void set_userid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game.base.UserDepositChangeNotify)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_diff_deposit();
  void clear_has_diff_deposit();
  void set_has_own_deposit();
  void clear_has_own_deposit();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int64 diff_deposit_;
  ::google::protobuf::int64 own_deposit_;
  ::google::protobuf::int32 userid_;
  friend struct ::protobuf_game_5fbase_2eproto::TableStruct;
  friend void ::protobuf_game_5fbase_2eproto::InitDefaultsUserDepositChangeNotifyImpl();
};
// -------------------------------------------------------------------

class MallProduct : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:game.base.MallProduct) */ {
 public:
  MallProduct();
  virtual ~MallProduct();

  MallProduct(const MallProduct& from);

  inline MallProduct& operator=(const MallProduct& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MallProduct(MallProduct&& from) noexcept
    : MallProduct() {
    *this = ::std::move(from);
  }

  inline MallProduct& operator=(MallProduct&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MallProduct& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MallProduct* internal_default_instance() {
    return reinterpret_cast<const MallProduct*>(
               &_MallProduct_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    42;

  void Swap(MallProduct* other);
  friend void swap(MallProduct& a, MallProduct& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MallProduct* New() const PROTOBUF_FINAL { return New(NULL); }

  MallProduct* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MallProduct& from);
  void MergeFrom(const MallProduct& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MallProduct* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string product_name = 4;
  bool has_product_name() const;
  void clear_product_name();
  static const int kProductNameFieldNumber = 4;
  const ::std::string& product_name() const;
  void set_product_name(const ::std::string& value);
  #if LANG_CXX11
  void set_product_name(::std::string&& value);
  #endif
  void set_product_name(const char* value);
  void set_product_name(const char* value, size_t size);
  ::std::string* mutable_product_name();
  ::std::string* release_product_name();
  void set_allocated_product_name(::std::string* product_name);

  // optional string product_code = 5;
  bool has_product_code() const;
  void clear_product_code();
  static const int kProductCodeFieldNumber = 5;
  const ::std::string& product_code() const;
  void set_product_code(const ::std::string& value);
  #if LANG_CXX11
  void set_product_code(::std::string&& value);
  #endif
  void set_product_code(const char* value);
  void set_product_code(const char* value, size_t size);
  ::std::string* mutable_product_code();
  ::std::string* release_product_code();
  void set_allocated_product_code(::std::string* product_code);

  // optional int32 productid = 1;
  bool has_productid() const;
  void clear_productid();
  static const int kProductidFieldNumber = 1;
  ::google::protobuf::int32 productid() const;
  void set_productid(::google::protobuf::int32 value);

  // optional int32 currency = 2;
  bool has_currency() const;
  void clear_currency();
  static const int kCurrencyFieldNumber = 2;
  ::google::protobuf::int32 currency() const;
  void set_currency(::google::protobuf::int32 value);

  // optional int64 price = 3;
  bool has_price() const;
  void clear_price();
  static const int kPriceFieldNumber = 3;
  ::google::protobuf::int64 price() const;
  void set_price(::google::protobuf::int64 value);

  // optional int32 os_support = 6;
  bool has_os_support() const;
  void clear_os_support();
  static const int kOsSupportFieldNumber = 6;
  ::google::protobuf::int32 os_support() const;
  void set_os_support(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game.base.MallProduct)
 private:
  void set_has_productid();
  void clear_has_productid();
  void set_has_currency();
  void clear_has_currency();
  void set_has_price();
  void clear_has_price();
  void set_has_product_name();
  void clear_has_product_name();
  void set_has_product_code();
  void clear_has_product_code();
  void set_has_os_support();
  void clear_has_os_support();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr product_name_;
  ::google::protobuf::internal::ArenaStringPtr product_code_;
  ::google::protobuf::int32 productid_;
  ::google::protobuf::int32 currency_;
  ::google::protobuf::int64 price_;
  ::google::protobuf::int32 os_support_;
  friend struct ::protobuf_game_5fbase_2eproto::TableStruct;
  friend void ::protobuf_game_5fbase_2eproto::InitDefaultsMallProductImpl();
};
// -------------------------------------------------------------------

class GetMallProductsReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:game.base.GetMallProductsReq) */ {
 public:
  GetMallProductsReq();
  virtual ~GetMallProductsReq();

  GetMallProductsReq(const GetMallProductsReq& from);

  inline GetMallProductsReq& operator=(const GetMallProductsReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetMallProductsReq(GetMallProductsReq&& from) noexcept
    : GetMallProductsReq() {
    *this = ::std::move(from);
  }

  inline GetMallProductsReq& operator=(GetMallProductsReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetMallProductsReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetMallProductsReq* internal_default_instance() {
    return reinterpret_cast<const GetMallProductsReq*>(
               &_GetMallProductsReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    43;

  void Swap(GetMallProductsReq* other);
  friend void swap(GetMallProductsReq& a, GetMallProductsReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetMallProductsReq* New() const PROTOBUF_FINAL { return New(NULL); }

  GetMallProductsReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetMallProductsReq& from);
  void MergeFrom(const GetMallProductsReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetMallProductsReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  ::google::protobuf::int32 userid() const;
  void set_userid(::google::protobuf::int32 value);

  // optional int32 os = 2;
  bool has_os() const;
  void clear_os();
  static const int kOsFieldNumber = 2;
  ::google::protobuf::int32 os() const;
  void set_os(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game.base.GetMallProductsReq)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_os();
  void clear_has_os();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 os_;
  friend struct ::protobuf_game_5fbase_2eproto::TableStruct;
  friend void ::protobuf_game_5fbase_2eproto::InitDefaultsGetMallProductsReqImpl();
};
// -------------------------------------------------------------------

class GetMallProductsResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:game.base.GetMallProductsResp) */ {
 public:
  GetMallProductsResp();
  virtual ~GetMallProductsResp();

  GetMallProductsResp(const GetMallProductsResp& from);

  inline GetMallProductsResp& operator=(const GetMallProductsResp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetMallProductsResp(GetMallProductsResp&& from) noexcept
    : GetMallProductsResp() {
    *this = ::std::move(from);
  }

  inline GetMallProductsResp& operator=(GetMallProductsResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetMallProductsResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetMallProductsResp* internal_default_instance() {
    return reinterpret_cast<const GetMallProductsResp*>(
               &_GetMallProductsResp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    44;

  void Swap(GetMallProductsResp* other);
  friend void swap(GetMallProductsResp& a, GetMallProductsResp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetMallProductsResp* New() const PROTOBUF_FINAL { return New(NULL); }

  GetMallProductsResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetMallProductsResp& from);
  void MergeFrom(const GetMallProductsResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetMallProductsResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .game.base.MallProduct product = 2;
  int product_size() const;
  void clear_product();
  static const int kProductFieldNumber = 2;
  const ::game::base::MallProduct& product(int index) const;
  ::game::base::MallProduct* mutable_product(int index);
  ::game::base::MallProduct* add_product();
  ::google::protobuf::RepeatedPtrField< ::game::base::MallProduct >*
      mutable_product();
  const ::google::protobuf::RepeatedPtrField< ::game::base::MallProduct >&
      product() const;

  // optional int32 code = 1;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game.base.GetMallProductsResp)
 private:
  void set_has_code();
  void clear_has_code();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::game::base::MallProduct > product_;
  ::google::protobuf::int32 code_;
  friend struct ::protobuf_game_5fbase_2eproto::TableStruct;
  friend void ::protobuf_game_5fbase_2eproto::InitDefaultsGetMallProductsRespImpl();
};
// -------------------------------------------------------------------

class MallShopingReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:game.base.MallShopingReq) */ {
 public:
  MallShopingReq();
  virtual ~MallShopingReq();

  MallShopingReq(const MallShopingReq& from);

  inline MallShopingReq& operator=(const MallShopingReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MallShopingReq(MallShopingReq&& from) noexcept
    : MallShopingReq() {
    *this = ::std::move(from);
  }

  inline MallShopingReq& operator=(MallShopingReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MallShopingReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MallShopingReq* internal_default_instance() {
    return reinterpret_cast<const MallShopingReq*>(
               &_MallShopingReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    45;

  void Swap(MallShopingReq* other);
  friend void swap(MallShopingReq& a, MallShopingReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MallShopingReq* New() const PROTOBUF_FINAL { return New(NULL); }

  MallShopingReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MallShopingReq& from);
  void MergeFrom(const MallShopingReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MallShopingReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  ::google::protobuf::int32 userid() const;
  void set_userid(::google::protobuf::int32 value);

  // optional int32 productid = 2;
  bool has_productid() const;
  void clear_productid();
  static const int kProductidFieldNumber = 2;
  ::google::protobuf::int32 productid() const;
  void set_productid(::google::protobuf::int32 value);

  // optional int32 count = 3;
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 3;
  ::google::protobuf::int32 count() const;
  void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game.base.MallShopingReq)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_productid();
  void clear_has_productid();
  void set_has_count();
  void clear_has_count();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 productid_;
  ::google::protobuf::int32 count_;
  friend struct ::protobuf_game_5fbase_2eproto::TableStruct;
  friend void ::protobuf_game_5fbase_2eproto::InitDefaultsMallShopingReqImpl();
};
// -------------------------------------------------------------------

class MallShopingResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:game.base.MallShopingResp) */ {
 public:
  MallShopingResp();
  virtual ~MallShopingResp();

  MallShopingResp(const MallShopingResp& from);

  inline MallShopingResp& operator=(const MallShopingResp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MallShopingResp(MallShopingResp&& from) noexcept
    : MallShopingResp() {
    *this = ::std::move(from);
  }

  inline MallShopingResp& operator=(MallShopingResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MallShopingResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MallShopingResp* internal_default_instance() {
    return reinterpret_cast<const MallShopingResp*>(
               &_MallShopingResp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    46;

  void Swap(MallShopingResp* other);
  friend void swap(MallShopingResp& a, MallShopingResp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MallShopingResp* New() const PROTOBUF_FINAL { return New(NULL); }

  MallShopingResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MallShopingResp& from);
  void MergeFrom(const MallShopingResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MallShopingResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 code = 1;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // optional int32 currency = 2;
  bool has_currency() const;
  void clear_currency();
  static const int kCurrencyFieldNumber = 2;
  ::google::protobuf::int32 currency() const;
  void set_currency(::google::protobuf::int32 value);

  // optional int32 cost = 3;
  bool has_cost() const;
  void clear_cost();
  static const int kCostFieldNumber = 3;
  ::google::protobuf::int32 cost() const;
  void set_cost(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game.base.MallShopingResp)
 private:
  void set_has_code();
  void clear_has_code();
  void set_has_currency();
  void clear_has_currency();
  void set_has_cost();
  void clear_has_cost();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 code_;
  ::google::protobuf::int32 currency_;
  ::google::protobuf::int32 cost_;
  friend struct ::protobuf_game_5fbase_2eproto::TableStruct;
  friend void ::protobuf_game_5fbase_2eproto::InitDefaultsMallShopingRespImpl();
};
// -------------------------------------------------------------------

class RobotSvrValidateReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:game.base.RobotSvrValidateReq) */ {
 public:
  RobotSvrValidateReq();
  virtual ~RobotSvrValidateReq();

  RobotSvrValidateReq(const RobotSvrValidateReq& from);

  inline RobotSvrValidateReq& operator=(const RobotSvrValidateReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RobotSvrValidateReq(RobotSvrValidateReq&& from) noexcept
    : RobotSvrValidateReq() {
    *this = ::std::move(from);
  }

  inline RobotSvrValidateReq& operator=(RobotSvrValidateReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RobotSvrValidateReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RobotSvrValidateReq* internal_default_instance() {
    return reinterpret_cast<const RobotSvrValidateReq*>(
               &_RobotSvrValidateReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    47;

  void Swap(RobotSvrValidateReq* other);
  friend void swap(RobotSvrValidateReq& a, RobotSvrValidateReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RobotSvrValidateReq* New() const PROTOBUF_FINAL { return New(NULL); }

  RobotSvrValidateReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RobotSvrValidateReq& from);
  void MergeFrom(const RobotSvrValidateReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RobotSvrValidateReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 client_id = 1;
  bool has_client_id() const;
  void clear_client_id();
  static const int kClientIdFieldNumber = 1;
  ::google::protobuf::int32 client_id() const;
  void set_client_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game.base.RobotSvrValidateReq)
 private:
  void set_has_client_id();
  void clear_has_client_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 client_id_;
  friend struct ::protobuf_game_5fbase_2eproto::TableStruct;
  friend void ::protobuf_game_5fbase_2eproto::InitDefaultsRobotSvrValidateReqImpl();
};
// -------------------------------------------------------------------

class RobotSvrValidateResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:game.base.RobotSvrValidateResp) */ {
 public:
  RobotSvrValidateResp();
  virtual ~RobotSvrValidateResp();

  RobotSvrValidateResp(const RobotSvrValidateResp& from);

  inline RobotSvrValidateResp& operator=(const RobotSvrValidateResp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RobotSvrValidateResp(RobotSvrValidateResp&& from) noexcept
    : RobotSvrValidateResp() {
    *this = ::std::move(from);
  }

  inline RobotSvrValidateResp& operator=(RobotSvrValidateResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RobotSvrValidateResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RobotSvrValidateResp* internal_default_instance() {
    return reinterpret_cast<const RobotSvrValidateResp*>(
               &_RobotSvrValidateResp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    48;

  void Swap(RobotSvrValidateResp* other);
  friend void swap(RobotSvrValidateResp& a, RobotSvrValidateResp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RobotSvrValidateResp* New() const PROTOBUF_FINAL { return New(NULL); }

  RobotSvrValidateResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RobotSvrValidateResp& from);
  void MergeFrom(const RobotSvrValidateResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RobotSvrValidateResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 code = 1;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game.base.RobotSvrValidateResp)
 private:
  void set_has_code();
  void clear_has_code();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 code_;
  friend struct ::protobuf_game_5fbase_2eproto::TableStruct;
  friend void ::protobuf_game_5fbase_2eproto::InitDefaultsRobotSvrValidateRespImpl();
};
// -------------------------------------------------------------------

class GetGameUsersReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:game.base.GetGameUsersReq) */ {
 public:
  GetGameUsersReq();
  virtual ~GetGameUsersReq();

  GetGameUsersReq(const GetGameUsersReq& from);

  inline GetGameUsersReq& operator=(const GetGameUsersReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetGameUsersReq(GetGameUsersReq&& from) noexcept
    : GetGameUsersReq() {
    *this = ::std::move(from);
  }

  inline GetGameUsersReq& operator=(GetGameUsersReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetGameUsersReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetGameUsersReq* internal_default_instance() {
    return reinterpret_cast<const GetGameUsersReq*>(
               &_GetGameUsersReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    49;

  void Swap(GetGameUsersReq* other);
  friend void swap(GetGameUsersReq& a, GetGameUsersReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetGameUsersReq* New() const PROTOBUF_FINAL { return New(NULL); }

  GetGameUsersReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetGameUsersReq& from);
  void MergeFrom(const GetGameUsersReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetGameUsersReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 clientid = 1;
  bool has_clientid() const;
  void clear_clientid();
  static const int kClientidFieldNumber = 1;
  ::google::protobuf::int32 clientid() const;
  void set_clientid(::google::protobuf::int32 value);

  // optional int32 roomid = 2;
  bool has_roomid() const;
  void clear_roomid();
  static const int kRoomidFieldNumber = 2;
  ::google::protobuf::int32 roomid() const;
  void set_roomid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game.base.GetGameUsersReq)
 private:
  void set_has_clientid();
  void clear_has_clientid();
  void set_has_roomid();
  void clear_has_roomid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 clientid_;
  ::google::protobuf::int32 roomid_;
  friend struct ::protobuf_game_5fbase_2eproto::TableStruct;
  friend void ::protobuf_game_5fbase_2eproto::InitDefaultsGetGameUsersReqImpl();
};
// -------------------------------------------------------------------

class GetGameUsersResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:game.base.GetGameUsersResp) */ {
 public:
  GetGameUsersResp();
  virtual ~GetGameUsersResp();

  GetGameUsersResp(const GetGameUsersResp& from);

  inline GetGameUsersResp& operator=(const GetGameUsersResp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetGameUsersResp(GetGameUsersResp&& from) noexcept
    : GetGameUsersResp() {
    *this = ::std::move(from);
  }

  inline GetGameUsersResp& operator=(GetGameUsersResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetGameUsersResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetGameUsersResp* internal_default_instance() {
    return reinterpret_cast<const GetGameUsersResp*>(
               &_GetGameUsersResp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    50;

  void Swap(GetGameUsersResp* other);
  friend void swap(GetGameUsersResp& a, GetGameUsersResp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetGameUsersResp* New() const PROTOBUF_FINAL { return New(NULL); }

  GetGameUsersResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetGameUsersResp& from);
  void MergeFrom(const GetGameUsersResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetGameUsersResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .game.base.Room rooms = 2;
  int rooms_size() const;
  void clear_rooms();
  static const int kRoomsFieldNumber = 2;
  const ::game::base::Room& rooms(int index) const;
  ::game::base::Room* mutable_rooms(int index);
  ::game::base::Room* add_rooms();
  ::google::protobuf::RepeatedPtrField< ::game::base::Room >*
      mutable_rooms();
  const ::google::protobuf::RepeatedPtrField< ::game::base::Room >&
      rooms() const;

  // repeated .game.base.User users = 3;
  int users_size() const;
  void clear_users();
  static const int kUsersFieldNumber = 3;
  const ::game::base::User& users(int index) const;
  ::game::base::User* mutable_users(int index);
  ::game::base::User* add_users();
  ::google::protobuf::RepeatedPtrField< ::game::base::User >*
      mutable_users();
  const ::google::protobuf::RepeatedPtrField< ::game::base::User >&
      users() const;

  // optional int32 code = 1;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game.base.GetGameUsersResp)
 private:
  void set_has_code();
  void clear_has_code();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::game::base::Room > rooms_;
  ::google::protobuf::RepeatedPtrField< ::game::base::User > users_;
  ::google::protobuf::int32 code_;
  friend struct ::protobuf_game_5fbase_2eproto::TableStruct;
  friend void ::protobuf_game_5fbase_2eproto::InitDefaultsGetGameUsersRespImpl();
};
// -------------------------------------------------------------------

class RS_UserEnterGameNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:game.base.RS_UserEnterGameNotify) */ {
 public:
  RS_UserEnterGameNotify();
  virtual ~RS_UserEnterGameNotify();

  RS_UserEnterGameNotify(const RS_UserEnterGameNotify& from);

  inline RS_UserEnterGameNotify& operator=(const RS_UserEnterGameNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RS_UserEnterGameNotify(RS_UserEnterGameNotify&& from) noexcept
    : RS_UserEnterGameNotify() {
    *this = ::std::move(from);
  }

  inline RS_UserEnterGameNotify& operator=(RS_UserEnterGameNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RS_UserEnterGameNotify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RS_UserEnterGameNotify* internal_default_instance() {
    return reinterpret_cast<const RS_UserEnterGameNotify*>(
               &_RS_UserEnterGameNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    51;

  void Swap(RS_UserEnterGameNotify* other);
  friend void swap(RS_UserEnterGameNotify& a, RS_UserEnterGameNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RS_UserEnterGameNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  RS_UserEnterGameNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RS_UserEnterGameNotify& from);
  void MergeFrom(const RS_UserEnterGameNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RS_UserEnterGameNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game.base.User user = 1;
  bool has_user() const;
  void clear_user();
  static const int kUserFieldNumber = 1;
  const ::game::base::User& user() const;
  ::game::base::User* release_user();
  ::game::base::User* mutable_user();
  void set_allocated_user(::game::base::User* user);

  // optional .game.base.RoomData room_data = 2;
  bool has_room_data() const;
  void clear_room_data();
  static const int kRoomDataFieldNumber = 2;
  const ::game::base::RoomData& room_data() const;
  ::game::base::RoomData* release_room_data();
  ::game::base::RoomData* mutable_room_data();
  void set_allocated_room_data(::game::base::RoomData* room_data);

  // optional int64 min_deposit = 3;
  bool has_min_deposit() const;
  void clear_min_deposit();
  static const int kMinDepositFieldNumber = 3;
  ::google::protobuf::int64 min_deposit() const;
  void set_min_deposit(::google::protobuf::int64 value);

  // optional int64 max_deposit = 4;
  bool has_max_deposit() const;
  void clear_max_deposit();
  static const int kMaxDepositFieldNumber = 4;
  ::google::protobuf::int64 max_deposit() const;
  void set_max_deposit(::google::protobuf::int64 value);

  // optional int64 base_deposit = 5;
  bool has_base_deposit() const;
  void clear_base_deposit();
  static const int kBaseDepositFieldNumber = 5;
  ::google::protobuf::int64 base_deposit() const;
  void set_base_deposit(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:game.base.RS_UserEnterGameNotify)
 private:
  void set_has_user();
  void clear_has_user();
  void set_has_room_data();
  void clear_has_room_data();
  void set_has_min_deposit();
  void clear_has_min_deposit();
  void set_has_max_deposit();
  void clear_has_max_deposit();
  void set_has_base_deposit();
  void clear_has_base_deposit();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::game::base::User* user_;
  ::game::base::RoomData* room_data_;
  ::google::protobuf::int64 min_deposit_;
  ::google::protobuf::int64 max_deposit_;
  ::google::protobuf::int64 base_deposit_;
  friend struct ::protobuf_game_5fbase_2eproto::TableStruct;
  friend void ::protobuf_game_5fbase_2eproto::InitDefaultsRS_UserEnterGameNotifyImpl();
};
// -------------------------------------------------------------------

class RS_SwitchLookerPlayerNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:game.base.RS_SwitchLookerPlayerNotify) */ {
 public:
  RS_SwitchLookerPlayerNotify();
  virtual ~RS_SwitchLookerPlayerNotify();

  RS_SwitchLookerPlayerNotify(const RS_SwitchLookerPlayerNotify& from);

  inline RS_SwitchLookerPlayerNotify& operator=(const RS_SwitchLookerPlayerNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RS_SwitchLookerPlayerNotify(RS_SwitchLookerPlayerNotify&& from) noexcept
    : RS_SwitchLookerPlayerNotify() {
    *this = ::std::move(from);
  }

  inline RS_SwitchLookerPlayerNotify& operator=(RS_SwitchLookerPlayerNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RS_SwitchLookerPlayerNotify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RS_SwitchLookerPlayerNotify* internal_default_instance() {
    return reinterpret_cast<const RS_SwitchLookerPlayerNotify*>(
               &_RS_SwitchLookerPlayerNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    52;

  void Swap(RS_SwitchLookerPlayerNotify* other);
  friend void swap(RS_SwitchLookerPlayerNotify& a, RS_SwitchLookerPlayerNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RS_SwitchLookerPlayerNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  RS_SwitchLookerPlayerNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RS_SwitchLookerPlayerNotify& from);
  void MergeFrom(const RS_SwitchLookerPlayerNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RS_SwitchLookerPlayerNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  ::google::protobuf::int32 userid() const;
  void set_userid(::google::protobuf::int32 value);

  // optional int32 roomid = 2;
  bool has_roomid() const;
  void clear_roomid();
  static const int kRoomidFieldNumber = 2;
  ::google::protobuf::int32 roomid() const;
  void set_roomid(::google::protobuf::int32 value);

  // optional int32 tableno = 3;
  bool has_tableno() const;
  void clear_tableno();
  static const int kTablenoFieldNumber = 3;
  ::google::protobuf::int32 tableno() const;
  void set_tableno(::google::protobuf::int32 value);

  // optional int32 chairno = 4;
  bool has_chairno() const;
  void clear_chairno();
  static const int kChairnoFieldNumber = 4;
  ::google::protobuf::int32 chairno() const;
  void set_chairno(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game.base.RS_SwitchLookerPlayerNotify)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_roomid();
  void clear_has_roomid();
  void set_has_tableno();
  void clear_has_tableno();
  void set_has_chairno();
  void clear_has_chairno();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 roomid_;
  ::google::protobuf::int32 tableno_;
  ::google::protobuf::int32 chairno_;
  friend struct ::protobuf_game_5fbase_2eproto::TableStruct;
  friend void ::protobuf_game_5fbase_2eproto::InitDefaultsRS_SwitchLookerPlayerNotifyImpl();
};
// -------------------------------------------------------------------

class RS_StartGameNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:game.base.RS_StartGameNotify) */ {
 public:
  RS_StartGameNotify();
  virtual ~RS_StartGameNotify();

  RS_StartGameNotify(const RS_StartGameNotify& from);

  inline RS_StartGameNotify& operator=(const RS_StartGameNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RS_StartGameNotify(RS_StartGameNotify&& from) noexcept
    : RS_StartGameNotify() {
    *this = ::std::move(from);
  }

  inline RS_StartGameNotify& operator=(RS_StartGameNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RS_StartGameNotify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RS_StartGameNotify* internal_default_instance() {
    return reinterpret_cast<const RS_StartGameNotify*>(
               &_RS_StartGameNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    53;

  void Swap(RS_StartGameNotify* other);
  friend void swap(RS_StartGameNotify& a, RS_StartGameNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RS_StartGameNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  RS_StartGameNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RS_StartGameNotify& from);
  void MergeFrom(const RS_StartGameNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RS_StartGameNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .game.base.ChairInfo chairs = 3;
  int chairs_size() const;
  void clear_chairs();
  static const int kChairsFieldNumber = 3;
  const ::game::base::ChairInfo& chairs(int index) const;
  ::game::base::ChairInfo* mutable_chairs(int index);
  ::game::base::ChairInfo* add_chairs();
  ::google::protobuf::RepeatedPtrField< ::game::base::ChairInfo >*
      mutable_chairs();
  const ::google::protobuf::RepeatedPtrField< ::game::base::ChairInfo >&
      chairs() const;

  // optional int32 roomid = 1;
  bool has_roomid() const;
  void clear_roomid();
  static const int kRoomidFieldNumber = 1;
  ::google::protobuf::int32 roomid() const;
  void set_roomid(::google::protobuf::int32 value);

  // optional int32 tableno = 2;
  bool has_tableno() const;
  void clear_tableno();
  static const int kTablenoFieldNumber = 2;
  ::google::protobuf::int32 tableno() const;
  void set_tableno(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game.base.RS_StartGameNotify)
 private:
  void set_has_roomid();
  void clear_has_roomid();
  void set_has_tableno();
  void clear_has_tableno();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::game::base::ChairInfo > chairs_;
  ::google::protobuf::int32 roomid_;
  ::google::protobuf::int32 tableno_;
  friend struct ::protobuf_game_5fbase_2eproto::TableStruct;
  friend void ::protobuf_game_5fbase_2eproto::InitDefaultsRS_StartGameNotifyImpl();
};
// -------------------------------------------------------------------

class RS_UserRefreshResultNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:game.base.RS_UserRefreshResultNotify) */ {
 public:
  RS_UserRefreshResultNotify();
  virtual ~RS_UserRefreshResultNotify();

  RS_UserRefreshResultNotify(const RS_UserRefreshResultNotify& from);

  inline RS_UserRefreshResultNotify& operator=(const RS_UserRefreshResultNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RS_UserRefreshResultNotify(RS_UserRefreshResultNotify&& from) noexcept
    : RS_UserRefreshResultNotify() {
    *this = ::std::move(from);
  }

  inline RS_UserRefreshResultNotify& operator=(RS_UserRefreshResultNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RS_UserRefreshResultNotify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RS_UserRefreshResultNotify* internal_default_instance() {
    return reinterpret_cast<const RS_UserRefreshResultNotify*>(
               &_RS_UserRefreshResultNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    54;

  void Swap(RS_UserRefreshResultNotify* other);
  friend void swap(RS_UserRefreshResultNotify& a, RS_UserRefreshResultNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RS_UserRefreshResultNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  RS_UserRefreshResultNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RS_UserRefreshResultNotify& from);
  void MergeFrom(const RS_UserRefreshResultNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RS_UserRefreshResultNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  ::google::protobuf::int32 userid() const;
  void set_userid(::google::protobuf::int32 value);

  // optional int32 roomid = 2;
  bool has_roomid() const;
  void clear_roomid();
  static const int kRoomidFieldNumber = 2;
  ::google::protobuf::int32 roomid() const;
  void set_roomid(::google::protobuf::int32 value);

  // optional int32 tableno = 3;
  bool has_tableno() const;
  void clear_tableno();
  static const int kTablenoFieldNumber = 3;
  ::google::protobuf::int32 tableno() const;
  void set_tableno(::google::protobuf::int32 value);

  // optional int32 chairno = 4;
  bool has_chairno() const;
  void clear_chairno();
  static const int kChairnoFieldNumber = 4;
  ::google::protobuf::int32 chairno() const;
  void set_chairno(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game.base.RS_UserRefreshResultNotify)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_roomid();
  void clear_has_roomid();
  void set_has_tableno();
  void clear_has_tableno();
  void set_has_chairno();
  void clear_has_chairno();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 roomid_;
  ::google::protobuf::int32 tableno_;
  ::google::protobuf::int32 chairno_;
  friend struct ::protobuf_game_5fbase_2eproto::TableStruct;
  friend void ::protobuf_game_5fbase_2eproto::InitDefaultsRS_UserRefreshResultNotifyImpl();
};
// -------------------------------------------------------------------

class RS_RefreshResultNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:game.base.RS_RefreshResultNotify) */ {
 public:
  RS_RefreshResultNotify();
  virtual ~RS_RefreshResultNotify();

  RS_RefreshResultNotify(const RS_RefreshResultNotify& from);

  inline RS_RefreshResultNotify& operator=(const RS_RefreshResultNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RS_RefreshResultNotify(RS_RefreshResultNotify&& from) noexcept
    : RS_RefreshResultNotify() {
    *this = ::std::move(from);
  }

  inline RS_RefreshResultNotify& operator=(RS_RefreshResultNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RS_RefreshResultNotify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RS_RefreshResultNotify* internal_default_instance() {
    return reinterpret_cast<const RS_RefreshResultNotify*>(
               &_RS_RefreshResultNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    55;

  void Swap(RS_RefreshResultNotify* other);
  friend void swap(RS_RefreshResultNotify& a, RS_RefreshResultNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RS_RefreshResultNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  RS_RefreshResultNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RS_RefreshResultNotify& from);
  void MergeFrom(const RS_RefreshResultNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RS_RefreshResultNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 roomid = 1;
  bool has_roomid() const;
  void clear_roomid();
  static const int kRoomidFieldNumber = 1;
  ::google::protobuf::int32 roomid() const;
  void set_roomid(::google::protobuf::int32 value);

  // optional int32 tableno = 2;
  bool has_tableno() const;
  void clear_tableno();
  static const int kTablenoFieldNumber = 2;
  ::google::protobuf::int32 tableno() const;
  void set_tableno(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game.base.RS_RefreshResultNotify)
 private:
  void set_has_roomid();
  void clear_has_roomid();
  void set_has_tableno();
  void clear_has_tableno();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 roomid_;
  ::google::protobuf::int32 tableno_;
  friend struct ::protobuf_game_5fbase_2eproto::TableStruct;
  friend void ::protobuf_game_5fbase_2eproto::InitDefaultsRS_RefreshResultNotifyImpl();
};
// -------------------------------------------------------------------

class RS_UserLeaveGameNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:game.base.RS_UserLeaveGameNotify) */ {
 public:
  RS_UserLeaveGameNotify();
  virtual ~RS_UserLeaveGameNotify();

  RS_UserLeaveGameNotify(const RS_UserLeaveGameNotify& from);

  inline RS_UserLeaveGameNotify& operator=(const RS_UserLeaveGameNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RS_UserLeaveGameNotify(RS_UserLeaveGameNotify&& from) noexcept
    : RS_UserLeaveGameNotify() {
    *this = ::std::move(from);
  }

  inline RS_UserLeaveGameNotify& operator=(RS_UserLeaveGameNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RS_UserLeaveGameNotify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RS_UserLeaveGameNotify* internal_default_instance() {
    return reinterpret_cast<const RS_UserLeaveGameNotify*>(
               &_RS_UserLeaveGameNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    56;

  void Swap(RS_UserLeaveGameNotify* other);
  friend void swap(RS_UserLeaveGameNotify& a, RS_UserLeaveGameNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RS_UserLeaveGameNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  RS_UserLeaveGameNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RS_UserLeaveGameNotify& from);
  void MergeFrom(const RS_UserLeaveGameNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RS_UserLeaveGameNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game.base.User user = 1;
  bool has_user() const;
  void clear_user();
  static const int kUserFieldNumber = 1;
  const ::game::base::User& user() const;
  ::game::base::User* release_user();
  ::game::base::User* mutable_user();
  void set_allocated_user(::game::base::User* user);

  // @@protoc_insertion_point(class_scope:game.base.RS_UserLeaveGameNotify)
 private:
  void set_has_user();
  void clear_has_user();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::game::base::User* user_;
  friend struct ::protobuf_game_5fbase_2eproto::TableStruct;
  friend void ::protobuf_game_5fbase_2eproto::InitDefaultsRS_UserLeaveGameNotifyImpl();
};
// -------------------------------------------------------------------

class RS_SwitchTableNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:game.base.RS_SwitchTableNotify) */ {
 public:
  RS_SwitchTableNotify();
  virtual ~RS_SwitchTableNotify();

  RS_SwitchTableNotify(const RS_SwitchTableNotify& from);

  inline RS_SwitchTableNotify& operator=(const RS_SwitchTableNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RS_SwitchTableNotify(RS_SwitchTableNotify&& from) noexcept
    : RS_SwitchTableNotify() {
    *this = ::std::move(from);
  }

  inline RS_SwitchTableNotify& operator=(RS_SwitchTableNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RS_SwitchTableNotify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RS_SwitchTableNotify* internal_default_instance() {
    return reinterpret_cast<const RS_SwitchTableNotify*>(
               &_RS_SwitchTableNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    57;

  void Swap(RS_SwitchTableNotify* other);
  friend void swap(RS_SwitchTableNotify& a, RS_SwitchTableNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RS_SwitchTableNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  RS_SwitchTableNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RS_SwitchTableNotify& from);
  void MergeFrom(const RS_SwitchTableNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RS_SwitchTableNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  ::google::protobuf::int32 userid() const;
  void set_userid(::google::protobuf::int32 value);

  // optional int32 roomid = 2;
  bool has_roomid() const;
  void clear_roomid();
  static const int kRoomidFieldNumber = 2;
  ::google::protobuf::int32 roomid() const;
  void set_roomid(::google::protobuf::int32 value);

  // optional int32 old_tableno = 3;
  bool has_old_tableno() const;
  void clear_old_tableno();
  static const int kOldTablenoFieldNumber = 3;
  ::google::protobuf::int32 old_tableno() const;
  void set_old_tableno(::google::protobuf::int32 value);

  // optional int32 new_tableno = 4;
  bool has_new_tableno() const;
  void clear_new_tableno();
  static const int kNewTablenoFieldNumber = 4;
  ::google::protobuf::int32 new_tableno() const;
  void set_new_tableno(::google::protobuf::int32 value);

  // optional int32 new_chairno = 5;
  bool has_new_chairno() const;
  void clear_new_chairno();
  static const int kNewChairnoFieldNumber = 5;
  ::google::protobuf::int32 new_chairno() const;
  void set_new_chairno(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game.base.RS_SwitchTableNotify)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_roomid();
  void clear_has_roomid();
  void set_has_old_tableno();
  void clear_has_old_tableno();
  void set_has_new_tableno();
  void clear_has_new_tableno();
  void set_has_new_chairno();
  void clear_has_new_chairno();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 roomid_;
  ::google::protobuf::int32 old_tableno_;
  ::google::protobuf::int32 new_tableno_;
  ::google::protobuf::int32 new_chairno_;
  friend struct ::protobuf_game_5fbase_2eproto::TableStruct;
  friend void ::protobuf_game_5fbase_2eproto::InitDefaultsRS_SwitchTableNotifyImpl();
};
// -------------------------------------------------------------------

class RS_NewRoomNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:game.base.RS_NewRoomNotify) */ {
 public:
  RS_NewRoomNotify();
  virtual ~RS_NewRoomNotify();

  RS_NewRoomNotify(const RS_NewRoomNotify& from);

  inline RS_NewRoomNotify& operator=(const RS_NewRoomNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RS_NewRoomNotify(RS_NewRoomNotify&& from) noexcept
    : RS_NewRoomNotify() {
    *this = ::std::move(from);
  }

  inline RS_NewRoomNotify& operator=(RS_NewRoomNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RS_NewRoomNotify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RS_NewRoomNotify* internal_default_instance() {
    return reinterpret_cast<const RS_NewRoomNotify*>(
               &_RS_NewRoomNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    58;

  void Swap(RS_NewRoomNotify* other);
  friend void swap(RS_NewRoomNotify& a, RS_NewRoomNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RS_NewRoomNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  RS_NewRoomNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RS_NewRoomNotify& from);
  void MergeFrom(const RS_NewRoomNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RS_NewRoomNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game.base.Room room = 1;
  bool has_room() const;
  void clear_room();
  static const int kRoomFieldNumber = 1;
  const ::game::base::Room& room() const;
  ::game::base::Room* release_room();
  ::game::base::Room* mutable_room();
  void set_allocated_room(::game::base::Room* room);

  // @@protoc_insertion_point(class_scope:game.base.RS_NewRoomNotify)
 private:
  void set_has_room();
  void clear_has_room();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::game::base::Room* room_;
  friend struct ::protobuf_game_5fbase_2eproto::TableStruct;
  friend void ::protobuf_game_5fbase_2eproto::InitDefaultsRS_NewRoomNotifyImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BytesData

// optional bytes data = 1;
inline bool BytesData::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BytesData::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BytesData::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BytesData::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
inline const ::std::string& BytesData::data() const {
  // @@protoc_insertion_point(field_get:game.base.BytesData.data)
  return data_.GetNoArena();
}
inline void BytesData::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:game.base.BytesData.data)
}
#if LANG_CXX11
inline void BytesData::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:game.base.BytesData.data)
}
#endif
inline void BytesData::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:game.base.BytesData.data)
}
inline void BytesData::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:game.base.BytesData.data)
}
inline ::std::string* BytesData::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:game.base.BytesData.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BytesData::release_data() {
  // @@protoc_insertion_point(field_release:game.base.BytesData.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BytesData::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:game.base.BytesData.data)
}

// optional int32 data_len = 2;
inline bool BytesData::has_data_len() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BytesData::set_has_data_len() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BytesData::clear_has_data_len() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BytesData::clear_data_len() {
  data_len_ = 0;
  clear_has_data_len();
}
inline ::google::protobuf::int32 BytesData::data_len() const {
  // @@protoc_insertion_point(field_get:game.base.BytesData.data_len)
  return data_len_;
}
inline void BytesData::set_data_len(::google::protobuf::int32 value) {
  set_has_data_len();
  data_len_ = value;
  // @@protoc_insertion_point(field_set:game.base.BytesData.data_len)
}

// -------------------------------------------------------------------

// RoomData

// optional int32 roomid = 1;
inline bool RoomData::has_roomid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoomData::set_has_roomid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoomData::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoomData::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
inline ::google::protobuf::int32 RoomData::roomid() const {
  // @@protoc_insertion_point(field_get:game.base.RoomData.roomid)
  return roomid_;
}
inline void RoomData::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:game.base.RoomData.roomid)
}

// optional int32 options = 2;
inline bool RoomData::has_options() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoomData::set_has_options() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoomData::clear_has_options() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoomData::clear_options() {
  options_ = 0;
  clear_has_options();
}
inline ::google::protobuf::int32 RoomData::options() const {
  // @@protoc_insertion_point(field_get:game.base.RoomData.options)
  return options_;
}
inline void RoomData::set_options(::google::protobuf::int32 value) {
  set_has_options();
  options_ = value;
  // @@protoc_insertion_point(field_set:game.base.RoomData.options)
}

// optional int32 configs = 3;
inline bool RoomData::has_configs() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RoomData::set_has_configs() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RoomData::clear_has_configs() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RoomData::clear_configs() {
  configs_ = 0;
  clear_has_configs();
}
inline ::google::protobuf::int32 RoomData::configs() const {
  // @@protoc_insertion_point(field_get:game.base.RoomData.configs)
  return configs_;
}
inline void RoomData::set_configs(::google::protobuf::int32 value) {
  set_has_configs();
  configs_ = value;
  // @@protoc_insertion_point(field_set:game.base.RoomData.configs)
}

// optional int32 manages = 4;
inline bool RoomData::has_manages() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RoomData::set_has_manages() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RoomData::clear_has_manages() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RoomData::clear_manages() {
  manages_ = 0;
  clear_has_manages();
}
inline ::google::protobuf::int32 RoomData::manages() const {
  // @@protoc_insertion_point(field_get:game.base.RoomData.manages)
  return manages_;
}
inline void RoomData::set_manages(::google::protobuf::int32 value) {
  set_has_manages();
  manages_ = value;
  // @@protoc_insertion_point(field_set:game.base.RoomData.manages)
}

// optional int32 max_table_cout = 5;
inline bool RoomData::has_max_table_cout() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RoomData::set_has_max_table_cout() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RoomData::clear_has_max_table_cout() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RoomData::clear_max_table_cout() {
  max_table_cout_ = 0;
  clear_has_max_table_cout();
}
inline ::google::protobuf::int32 RoomData::max_table_cout() const {
  // @@protoc_insertion_point(field_get:game.base.RoomData.max_table_cout)
  return max_table_cout_;
}
inline void RoomData::set_max_table_cout(::google::protobuf::int32 value) {
  set_has_max_table_cout();
  max_table_cout_ = value;
  // @@protoc_insertion_point(field_set:game.base.RoomData.max_table_cout)
}

// optional int32 chaircount_per_table = 6;
inline bool RoomData::has_chaircount_per_table() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RoomData::set_has_chaircount_per_table() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RoomData::clear_has_chaircount_per_table() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RoomData::clear_chaircount_per_table() {
  chaircount_per_table_ = 0;
  clear_has_chaircount_per_table();
}
inline ::google::protobuf::int32 RoomData::chaircount_per_table() const {
  // @@protoc_insertion_point(field_get:game.base.RoomData.chaircount_per_table)
  return chaircount_per_table_;
}
inline void RoomData::set_chaircount_per_table(::google::protobuf::int32 value) {
  set_has_chaircount_per_table();
  chaircount_per_table_ = value;
  // @@protoc_insertion_point(field_set:game.base.RoomData.chaircount_per_table)
}

// optional int64 min_deposit = 7;
inline bool RoomData::has_min_deposit() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RoomData::set_has_min_deposit() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RoomData::clear_has_min_deposit() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RoomData::clear_min_deposit() {
  min_deposit_ = GOOGLE_LONGLONG(0);
  clear_has_min_deposit();
}
inline ::google::protobuf::int64 RoomData::min_deposit() const {
  // @@protoc_insertion_point(field_get:game.base.RoomData.min_deposit)
  return min_deposit_;
}
inline void RoomData::set_min_deposit(::google::protobuf::int64 value) {
  set_has_min_deposit();
  min_deposit_ = value;
  // @@protoc_insertion_point(field_set:game.base.RoomData.min_deposit)
}

// optional int64 max_deposit = 8;
inline bool RoomData::has_max_deposit() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RoomData::set_has_max_deposit() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RoomData::clear_has_max_deposit() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RoomData::clear_max_deposit() {
  max_deposit_ = GOOGLE_LONGLONG(0);
  clear_has_max_deposit();
}
inline ::google::protobuf::int64 RoomData::max_deposit() const {
  // @@protoc_insertion_point(field_get:game.base.RoomData.max_deposit)
  return max_deposit_;
}
inline void RoomData::set_max_deposit(::google::protobuf::int64 value) {
  set_has_max_deposit();
  max_deposit_ = value;
  // @@protoc_insertion_point(field_set:game.base.RoomData.max_deposit)
}

// optional int32 min_player_count = 9;
inline bool RoomData::has_min_player_count() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RoomData::set_has_min_player_count() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RoomData::clear_has_min_player_count() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RoomData::clear_min_player_count() {
  min_player_count_ = 0;
  clear_has_min_player_count();
}
inline ::google::protobuf::int32 RoomData::min_player_count() const {
  // @@protoc_insertion_point(field_get:game.base.RoomData.min_player_count)
  return min_player_count_;
}
inline void RoomData::set_min_player_count(::google::protobuf::int32 value) {
  set_has_min_player_count();
  min_player_count_ = value;
  // @@protoc_insertion_point(field_set:game.base.RoomData.min_player_count)
}

// -------------------------------------------------------------------

// User

// optional int32 userid = 1;
inline bool User::has_userid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void User::set_has_userid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void User::clear_has_userid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void User::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 User::userid() const {
  // @@protoc_insertion_point(field_get:game.base.User.userid)
  return userid_;
}
inline void User::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:game.base.User.userid)
}

// optional int32 roomid = 2;
inline bool User::has_roomid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void User::set_has_roomid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void User::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void User::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
inline ::google::protobuf::int32 User::roomid() const {
  // @@protoc_insertion_point(field_get:game.base.User.roomid)
  return roomid_;
}
inline void User::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:game.base.User.roomid)
}

// optional int32 tableno = 3;
inline bool User::has_tableno() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void User::set_has_tableno() {
  _has_bits_[0] |= 0x00000020u;
}
inline void User::clear_has_tableno() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void User::clear_tableno() {
  tableno_ = 0;
  clear_has_tableno();
}
inline ::google::protobuf::int32 User::tableno() const {
  // @@protoc_insertion_point(field_get:game.base.User.tableno)
  return tableno_;
}
inline void User::set_tableno(::google::protobuf::int32 value) {
  set_has_tableno();
  tableno_ = value;
  // @@protoc_insertion_point(field_set:game.base.User.tableno)
}

// optional int32 chairno = 4;
inline bool User::has_chairno() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void User::set_has_chairno() {
  _has_bits_[0] |= 0x00000040u;
}
inline void User::clear_has_chairno() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void User::clear_chairno() {
  chairno_ = 0;
  clear_has_chairno();
}
inline ::google::protobuf::int32 User::chairno() const {
  // @@protoc_insertion_point(field_get:game.base.User.chairno)
  return chairno_;
}
inline void User::set_chairno(::google::protobuf::int32 value) {
  set_has_chairno();
  chairno_ = value;
  // @@protoc_insertion_point(field_set:game.base.User.chairno)
}

// optional int32 user_type = 5;
inline bool User::has_user_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void User::set_has_user_type() {
  _has_bits_[0] |= 0x00000100u;
}
inline void User::clear_has_user_type() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void User::clear_user_type() {
  user_type_ = 0;
  clear_has_user_type();
}
inline ::google::protobuf::int32 User::user_type() const {
  // @@protoc_insertion_point(field_get:game.base.User.user_type)
  return user_type_;
}
inline void User::set_user_type(::google::protobuf::int32 value) {
  set_has_user_type();
  user_type_ = value;
  // @@protoc_insertion_point(field_set:game.base.User.user_type)
}

// optional int64 deposit = 6;
inline bool User::has_deposit() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void User::set_has_deposit() {
  _has_bits_[0] |= 0x00000080u;
}
inline void User::clear_has_deposit() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void User::clear_deposit() {
  deposit_ = GOOGLE_LONGLONG(0);
  clear_has_deposit();
}
inline ::google::protobuf::int64 User::deposit() const {
  // @@protoc_insertion_point(field_get:game.base.User.deposit)
  return deposit_;
}
inline void User::set_deposit(::google::protobuf::int64 value) {
  set_has_deposit();
  deposit_ = value;
  // @@protoc_insertion_point(field_set:game.base.User.deposit)
}

// optional int32 total_bout = 7;
inline bool User::has_total_bout() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void User::set_has_total_bout() {
  _has_bits_[0] |= 0x00000200u;
}
inline void User::clear_has_total_bout() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void User::clear_total_bout() {
  total_bout_ = 0;
  clear_has_total_bout();
}
inline ::google::protobuf::int32 User::total_bout() const {
  // @@protoc_insertion_point(field_get:game.base.User.total_bout)
  return total_bout_;
}
inline void User::set_total_bout(::google::protobuf::int32 value) {
  set_has_total_bout();
  total_bout_ = value;
  // @@protoc_insertion_point(field_set:game.base.User.total_bout)
}

// optional int32 win_bout = 8;
inline bool User::has_win_bout() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void User::set_has_win_bout() {
  _has_bits_[0] |= 0x00000400u;
}
inline void User::clear_has_win_bout() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void User::clear_win_bout() {
  win_bout_ = 0;
  clear_has_win_bout();
}
inline ::google::protobuf::int32 User::win_bout() const {
  // @@protoc_insertion_point(field_get:game.base.User.win_bout)
  return win_bout_;
}
inline void User::set_win_bout(::google::protobuf::int32 value) {
  set_has_win_bout();
  win_bout_ = value;
  // @@protoc_insertion_point(field_set:game.base.User.win_bout)
}

// optional int32 loss_bout = 9;
inline bool User::has_loss_bout() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void User::set_has_loss_bout() {
  _has_bits_[0] |= 0x00000800u;
}
inline void User::clear_has_loss_bout() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void User::clear_loss_bout() {
  loss_bout_ = 0;
  clear_has_loss_bout();
}
inline ::google::protobuf::int32 User::loss_bout() const {
  // @@protoc_insertion_point(field_get:game.base.User.loss_bout)
  return loss_bout_;
}
inline void User::set_loss_bout(::google::protobuf::int32 value) {
  set_has_loss_bout();
  loss_bout_ = value;
  // @@protoc_insertion_point(field_set:game.base.User.loss_bout)
}

// optional int32 offline_count = 10;
inline bool User::has_offline_count() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void User::set_has_offline_count() {
  _has_bits_[0] |= 0x00001000u;
}
inline void User::clear_has_offline_count() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void User::clear_offline_count() {
  offline_count_ = 0;
  clear_has_offline_count();
}
inline ::google::protobuf::int32 User::offline_count() const {
  // @@protoc_insertion_point(field_get:game.base.User.offline_count)
  return offline_count_;
}
inline void User::set_offline_count(::google::protobuf::int32 value) {
  set_has_offline_count();
  offline_count_ = value;
  // @@protoc_insertion_point(field_set:game.base.User.offline_count)
}

// optional string head_url = 11;
inline bool User::has_head_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void User::set_has_head_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void User::clear_has_head_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void User::clear_head_url() {
  head_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_head_url();
}
inline const ::std::string& User::head_url() const {
  // @@protoc_insertion_point(field_get:game.base.User.head_url)
  return head_url_.GetNoArena();
}
inline void User::set_head_url(const ::std::string& value) {
  set_has_head_url();
  head_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:game.base.User.head_url)
}
#if LANG_CXX11
inline void User::set_head_url(::std::string&& value) {
  set_has_head_url();
  head_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:game.base.User.head_url)
}
#endif
inline void User::set_head_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_head_url();
  head_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:game.base.User.head_url)
}
inline void User::set_head_url(const char* value, size_t size) {
  set_has_head_url();
  head_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:game.base.User.head_url)
}
inline ::std::string* User::mutable_head_url() {
  set_has_head_url();
  // @@protoc_insertion_point(field_mutable:game.base.User.head_url)
  return head_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* User::release_head_url() {
  // @@protoc_insertion_point(field_release:game.base.User.head_url)
  clear_has_head_url();
  return head_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_head_url(::std::string* head_url) {
  if (head_url != NULL) {
    set_has_head_url();
  } else {
    clear_has_head_url();
  }
  head_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), head_url);
  // @@protoc_insertion_point(field_set_allocated:game.base.User.head_url)
}

// optional string hardid = 12;
inline bool User::has_hardid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void User::set_has_hardid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void User::clear_has_hardid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void User::clear_hardid() {
  hardid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hardid();
}
inline const ::std::string& User::hardid() const {
  // @@protoc_insertion_point(field_get:game.base.User.hardid)
  return hardid_.GetNoArena();
}
inline void User::set_hardid(const ::std::string& value) {
  set_has_hardid();
  hardid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:game.base.User.hardid)
}
#if LANG_CXX11
inline void User::set_hardid(::std::string&& value) {
  set_has_hardid();
  hardid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:game.base.User.hardid)
}
#endif
inline void User::set_hardid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_hardid();
  hardid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:game.base.User.hardid)
}
inline void User::set_hardid(const char* value, size_t size) {
  set_has_hardid();
  hardid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:game.base.User.hardid)
}
inline ::std::string* User::mutable_hardid() {
  set_has_hardid();
  // @@protoc_insertion_point(field_mutable:game.base.User.hardid)
  return hardid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* User::release_hardid() {
  // @@protoc_insertion_point(field_release:game.base.User.hardid)
  clear_has_hardid();
  return hardid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_hardid(::std::string* hardid) {
  if (hardid != NULL) {
    set_has_hardid();
  } else {
    clear_has_hardid();
  }
  hardid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hardid);
  // @@protoc_insertion_point(field_set_allocated:game.base.User.hardid)
}

// optional string nick_name = 13;
inline bool User::has_nick_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void User::set_has_nick_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void User::clear_has_nick_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void User::clear_nick_name() {
  nick_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nick_name();
}
inline const ::std::string& User::nick_name() const {
  // @@protoc_insertion_point(field_get:game.base.User.nick_name)
  return nick_name_.GetNoArena();
}
inline void User::set_nick_name(const ::std::string& value) {
  set_has_nick_name();
  nick_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:game.base.User.nick_name)
}
#if LANG_CXX11
inline void User::set_nick_name(::std::string&& value) {
  set_has_nick_name();
  nick_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:game.base.User.nick_name)
}
#endif
inline void User::set_nick_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nick_name();
  nick_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:game.base.User.nick_name)
}
inline void User::set_nick_name(const char* value, size_t size) {
  set_has_nick_name();
  nick_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:game.base.User.nick_name)
}
inline ::std::string* User::mutable_nick_name() {
  set_has_nick_name();
  // @@protoc_insertion_point(field_mutable:game.base.User.nick_name)
  return nick_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* User::release_nick_name() {
  // @@protoc_insertion_point(field_release:game.base.User.nick_name)
  clear_has_nick_name();
  return nick_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_nick_name(::std::string* nick_name) {
  if (nick_name != NULL) {
    set_has_nick_name();
  } else {
    clear_has_nick_name();
  }
  nick_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nick_name);
  // @@protoc_insertion_point(field_set_allocated:game.base.User.nick_name)
}

// -------------------------------------------------------------------

// TableUserInfo

// optional int32 userid = 1;
inline bool TableUserInfo::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TableUserInfo::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TableUserInfo::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TableUserInfo::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 TableUserInfo::userid() const {
  // @@protoc_insertion_point(field_get:game.base.TableUserInfo.userid)
  return userid_;
}
inline void TableUserInfo::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:game.base.TableUserInfo.userid)
}

// optional int32 user_type = 2;
inline bool TableUserInfo::has_user_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TableUserInfo::set_has_user_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TableUserInfo::clear_has_user_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TableUserInfo::clear_user_type() {
  user_type_ = 0;
  clear_has_user_type();
}
inline ::google::protobuf::int32 TableUserInfo::user_type() const {
  // @@protoc_insertion_point(field_get:game.base.TableUserInfo.user_type)
  return user_type_;
}
inline void TableUserInfo::set_user_type(::google::protobuf::int32 value) {
  set_has_user_type();
  user_type_ = value;
  // @@protoc_insertion_point(field_set:game.base.TableUserInfo.user_type)
}

// optional int32 bind_timestamp = 3;
inline bool TableUserInfo::has_bind_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TableUserInfo::set_has_bind_timestamp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TableUserInfo::clear_has_bind_timestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TableUserInfo::clear_bind_timestamp() {
  bind_timestamp_ = 0;
  clear_has_bind_timestamp();
}
inline ::google::protobuf::int32 TableUserInfo::bind_timestamp() const {
  // @@protoc_insertion_point(field_get:game.base.TableUserInfo.bind_timestamp)
  return bind_timestamp_;
}
inline void TableUserInfo::set_bind_timestamp(::google::protobuf::int32 value) {
  set_has_bind_timestamp();
  bind_timestamp_ = value;
  // @@protoc_insertion_point(field_set:game.base.TableUserInfo.bind_timestamp)
}

// -------------------------------------------------------------------

// ChairInfo

// optional int32 chairno = 1;
inline bool ChairInfo::has_chairno() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChairInfo::set_has_chairno() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChairInfo::clear_has_chairno() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChairInfo::clear_chairno() {
  chairno_ = 0;
  clear_has_chairno();
}
inline ::google::protobuf::int32 ChairInfo::chairno() const {
  // @@protoc_insertion_point(field_get:game.base.ChairInfo.chairno)
  return chairno_;
}
inline void ChairInfo::set_chairno(::google::protobuf::int32 value) {
  set_has_chairno();
  chairno_ = value;
  // @@protoc_insertion_point(field_set:game.base.ChairInfo.chairno)
}

// optional int32 userid = 2;
inline bool ChairInfo::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChairInfo::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChairInfo::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChairInfo::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 ChairInfo::userid() const {
  // @@protoc_insertion_point(field_get:game.base.ChairInfo.userid)
  return userid_;
}
inline void ChairInfo::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:game.base.ChairInfo.userid)
}

// optional int32 chair_status = 3;
inline bool ChairInfo::has_chair_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChairInfo::set_has_chair_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChairInfo::clear_has_chair_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChairInfo::clear_chair_status() {
  chair_status_ = 0;
  clear_has_chair_status();
}
inline ::google::protobuf::int32 ChairInfo::chair_status() const {
  // @@protoc_insertion_point(field_get:game.base.ChairInfo.chair_status)
  return chair_status_;
}
inline void ChairInfo::set_chair_status(::google::protobuf::int32 value) {
  set_has_chair_status();
  chair_status_ = value;
  // @@protoc_insertion_point(field_set:game.base.ChairInfo.chair_status)
}

// optional int32 bind_timestamp = 4;
inline bool ChairInfo::has_bind_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChairInfo::set_has_bind_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChairInfo::clear_has_bind_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChairInfo::clear_bind_timestamp() {
  bind_timestamp_ = 0;
  clear_has_bind_timestamp();
}
inline ::google::protobuf::int32 ChairInfo::bind_timestamp() const {
  // @@protoc_insertion_point(field_get:game.base.ChairInfo.bind_timestamp)
  return bind_timestamp_;
}
inline void ChairInfo::set_bind_timestamp(::google::protobuf::int32 value) {
  set_has_bind_timestamp();
  bind_timestamp_ = value;
  // @@protoc_insertion_point(field_set:game.base.ChairInfo.bind_timestamp)
}

// -------------------------------------------------------------------

// Table

// optional int32 tableno = 1;
inline bool Table::has_tableno() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Table::set_has_tableno() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Table::clear_has_tableno() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Table::clear_tableno() {
  tableno_ = 0;
  clear_has_tableno();
}
inline ::google::protobuf::int32 Table::tableno() const {
  // @@protoc_insertion_point(field_get:game.base.Table.tableno)
  return tableno_;
}
inline void Table::set_tableno(::google::protobuf::int32 value) {
  set_has_tableno();
  tableno_ = value;
  // @@protoc_insertion_point(field_set:game.base.Table.tableno)
}

// optional int32 roomid = 2;
inline bool Table::has_roomid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Table::set_has_roomid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Table::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Table::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
inline ::google::protobuf::int32 Table::roomid() const {
  // @@protoc_insertion_point(field_get:game.base.Table.roomid)
  return roomid_;
}
inline void Table::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:game.base.Table.roomid)
}

// optional int32 chair_count = 3;
inline bool Table::has_chair_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Table::set_has_chair_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Table::clear_has_chair_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Table::clear_chair_count() {
  chair_count_ = 0;
  clear_has_chair_count();
}
inline ::google::protobuf::int32 Table::chair_count() const {
  // @@protoc_insertion_point(field_get:game.base.Table.chair_count)
  return chair_count_;
}
inline void Table::set_chair_count(::google::protobuf::int32 value) {
  set_has_chair_count();
  chair_count_ = value;
  // @@protoc_insertion_point(field_set:game.base.Table.chair_count)
}

// optional int32 banker_chair = 4;
inline bool Table::has_banker_chair() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Table::set_has_banker_chair() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Table::clear_has_banker_chair() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Table::clear_banker_chair() {
  banker_chair_ = 0;
  clear_has_banker_chair();
}
inline ::google::protobuf::int32 Table::banker_chair() const {
  // @@protoc_insertion_point(field_get:game.base.Table.banker_chair)
  return banker_chair_;
}
inline void Table::set_banker_chair(::google::protobuf::int32 value) {
  set_has_banker_chair();
  banker_chair_ = value;
  // @@protoc_insertion_point(field_set:game.base.Table.banker_chair)
}

// optional int64 min_deposit = 5;
inline bool Table::has_min_deposit() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Table::set_has_min_deposit() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Table::clear_has_min_deposit() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Table::clear_min_deposit() {
  min_deposit_ = GOOGLE_LONGLONG(0);
  clear_has_min_deposit();
}
inline ::google::protobuf::int64 Table::min_deposit() const {
  // @@protoc_insertion_point(field_get:game.base.Table.min_deposit)
  return min_deposit_;
}
inline void Table::set_min_deposit(::google::protobuf::int64 value) {
  set_has_min_deposit();
  min_deposit_ = value;
  // @@protoc_insertion_point(field_set:game.base.Table.min_deposit)
}

// optional int64 max_deposit = 6;
inline bool Table::has_max_deposit() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Table::set_has_max_deposit() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Table::clear_has_max_deposit() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Table::clear_max_deposit() {
  max_deposit_ = GOOGLE_LONGLONG(0);
  clear_has_max_deposit();
}
inline ::google::protobuf::int64 Table::max_deposit() const {
  // @@protoc_insertion_point(field_get:game.base.Table.max_deposit)
  return max_deposit_;
}
inline void Table::set_max_deposit(::google::protobuf::int64 value) {
  set_has_max_deposit();
  max_deposit_ = value;
  // @@protoc_insertion_point(field_set:game.base.Table.max_deposit)
}

// optional int64 base_deposit = 7;
inline bool Table::has_base_deposit() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Table::set_has_base_deposit() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Table::clear_has_base_deposit() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Table::clear_base_deposit() {
  base_deposit_ = GOOGLE_LONGLONG(0);
  clear_has_base_deposit();
}
inline ::google::protobuf::int64 Table::base_deposit() const {
  // @@protoc_insertion_point(field_get:game.base.Table.base_deposit)
  return base_deposit_;
}
inline void Table::set_base_deposit(::google::protobuf::int64 value) {
  set_has_base_deposit();
  base_deposit_ = value;
  // @@protoc_insertion_point(field_set:game.base.Table.base_deposit)
}

// optional int32 table_status = 8;
inline bool Table::has_table_status() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Table::set_has_table_status() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Table::clear_has_table_status() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Table::clear_table_status() {
  table_status_ = 0;
  clear_has_table_status();
}
inline ::google::protobuf::int32 Table::table_status() const {
  // @@protoc_insertion_point(field_get:game.base.Table.table_status)
  return table_status_;
}
inline void Table::set_table_status(::google::protobuf::int32 value) {
  set_has_table_status();
  table_status_ = value;
  // @@protoc_insertion_point(field_set:game.base.Table.table_status)
}

// repeated .game.base.ChairInfo chairs = 9;
inline int Table::chairs_size() const {
  return chairs_.size();
}
inline void Table::clear_chairs() {
  chairs_.Clear();
}
inline const ::game::base::ChairInfo& Table::chairs(int index) const {
  // @@protoc_insertion_point(field_get:game.base.Table.chairs)
  return chairs_.Get(index);
}
inline ::game::base::ChairInfo* Table::mutable_chairs(int index) {
  // @@protoc_insertion_point(field_mutable:game.base.Table.chairs)
  return chairs_.Mutable(index);
}
inline ::game::base::ChairInfo* Table::add_chairs() {
  // @@protoc_insertion_point(field_add:game.base.Table.chairs)
  return chairs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::game::base::ChairInfo >*
Table::mutable_chairs() {
  // @@protoc_insertion_point(field_mutable_list:game.base.Table.chairs)
  return &chairs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::game::base::ChairInfo >&
Table::chairs() const {
  // @@protoc_insertion_point(field_list:game.base.Table.chairs)
  return chairs_;
}

// repeated .game.base.TableUserInfo table_users = 10;
inline int Table::table_users_size() const {
  return table_users_.size();
}
inline void Table::clear_table_users() {
  table_users_.Clear();
}
inline const ::game::base::TableUserInfo& Table::table_users(int index) const {
  // @@protoc_insertion_point(field_get:game.base.Table.table_users)
  return table_users_.Get(index);
}
inline ::game::base::TableUserInfo* Table::mutable_table_users(int index) {
  // @@protoc_insertion_point(field_mutable:game.base.Table.table_users)
  return table_users_.Mutable(index);
}
inline ::game::base::TableUserInfo* Table::add_table_users() {
  // @@protoc_insertion_point(field_add:game.base.Table.table_users)
  return table_users_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::game::base::TableUserInfo >*
Table::mutable_table_users() {
  // @@protoc_insertion_point(field_mutable_list:game.base.Table.table_users)
  return &table_users_;
}
inline const ::google::protobuf::RepeatedPtrField< ::game::base::TableUserInfo >&
Table::table_users() const {
  // @@protoc_insertion_point(field_list:game.base.Table.table_users)
  return table_users_;
}

// -------------------------------------------------------------------

// Room

// optional .game.base.RoomData room_data = 1;
inline bool Room::has_room_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Room::set_has_room_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Room::clear_has_room_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Room::clear_room_data() {
  if (room_data_ != NULL) room_data_->Clear();
  clear_has_room_data();
}
inline const ::game::base::RoomData& Room::room_data() const {
  const ::game::base::RoomData* p = room_data_;
  // @@protoc_insertion_point(field_get:game.base.Room.room_data)
  return p != NULL ? *p : *reinterpret_cast<const ::game::base::RoomData*>(
      &::game::base::_RoomData_default_instance_);
}
inline ::game::base::RoomData* Room::release_room_data() {
  // @@protoc_insertion_point(field_release:game.base.Room.room_data)
  clear_has_room_data();
  ::game::base::RoomData* temp = room_data_;
  room_data_ = NULL;
  return temp;
}
inline ::game::base::RoomData* Room::mutable_room_data() {
  set_has_room_data();
  if (room_data_ == NULL) {
    room_data_ = new ::game::base::RoomData;
  }
  // @@protoc_insertion_point(field_mutable:game.base.Room.room_data)
  return room_data_;
}
inline void Room::set_allocated_room_data(::game::base::RoomData* room_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete room_data_;
  }
  if (room_data) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      room_data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, room_data, submessage_arena);
    }
    set_has_room_data();
  } else {
    clear_has_room_data();
  }
  room_data_ = room_data;
  // @@protoc_insertion_point(field_set_allocated:game.base.Room.room_data)
}

// repeated .game.base.Table tables = 2;
inline int Room::tables_size() const {
  return tables_.size();
}
inline void Room::clear_tables() {
  tables_.Clear();
}
inline const ::game::base::Table& Room::tables(int index) const {
  // @@protoc_insertion_point(field_get:game.base.Room.tables)
  return tables_.Get(index);
}
inline ::game::base::Table* Room::mutable_tables(int index) {
  // @@protoc_insertion_point(field_mutable:game.base.Room.tables)
  return tables_.Mutable(index);
}
inline ::game::base::Table* Room::add_tables() {
  // @@protoc_insertion_point(field_add:game.base.Room.tables)
  return tables_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::game::base::Table >*
Room::mutable_tables() {
  // @@protoc_insertion_point(field_mutable_list:game.base.Room.tables)
  return &tables_;
}
inline const ::google::protobuf::RepeatedPtrField< ::game::base::Table >&
Room::tables() const {
  // @@protoc_insertion_point(field_list:game.base.Room.tables)
  return tables_;
}

// -------------------------------------------------------------------

// UserResult

// optional int32 userid = 1;
inline bool UserResult::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserResult::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserResult::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserResult::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 UserResult::userid() const {
  // @@protoc_insertion_point(field_get:game.base.UserResult.userid)
  return userid_;
}
inline void UserResult::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:game.base.UserResult.userid)
}

// optional int32 chairno = 2;
inline bool UserResult::has_chairno() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserResult::set_has_chairno() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserResult::clear_has_chairno() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserResult::clear_chairno() {
  chairno_ = 0;
  clear_has_chairno();
}
inline ::google::protobuf::int32 UserResult::chairno() const {
  // @@protoc_insertion_point(field_get:game.base.UserResult.chairno)
  return chairno_;
}
inline void UserResult::set_chairno(::google::protobuf::int32 value) {
  set_has_chairno();
  chairno_ = value;
  // @@protoc_insertion_point(field_set:game.base.UserResult.chairno)
}

// optional int64 old_deposit = 3;
inline bool UserResult::has_old_deposit() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserResult::set_has_old_deposit() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserResult::clear_has_old_deposit() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserResult::clear_old_deposit() {
  old_deposit_ = GOOGLE_LONGLONG(0);
  clear_has_old_deposit();
}
inline ::google::protobuf::int64 UserResult::old_deposit() const {
  // @@protoc_insertion_point(field_get:game.base.UserResult.old_deposit)
  return old_deposit_;
}
inline void UserResult::set_old_deposit(::google::protobuf::int64 value) {
  set_has_old_deposit();
  old_deposit_ = value;
  // @@protoc_insertion_point(field_set:game.base.UserResult.old_deposit)
}

// optional int64 diff_deposit = 4;
inline bool UserResult::has_diff_deposit() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserResult::set_has_diff_deposit() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserResult::clear_has_diff_deposit() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserResult::clear_diff_deposit() {
  diff_deposit_ = GOOGLE_LONGLONG(0);
  clear_has_diff_deposit();
}
inline ::google::protobuf::int64 UserResult::diff_deposit() const {
  // @@protoc_insertion_point(field_get:game.base.UserResult.diff_deposit)
  return diff_deposit_;
}
inline void UserResult::set_diff_deposit(::google::protobuf::int64 value) {
  set_has_diff_deposit();
  diff_deposit_ = value;
  // @@protoc_insertion_point(field_set:game.base.UserResult.diff_deposit)
}

// optional int32 fee = 5;
inline bool UserResult::has_fee() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserResult::set_has_fee() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserResult::clear_has_fee() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserResult::clear_fee() {
  fee_ = 0;
  clear_has_fee();
}
inline ::google::protobuf::int32 UserResult::fee() const {
  // @@protoc_insertion_point(field_get:game.base.UserResult.fee)
  return fee_;
}
inline void UserResult::set_fee(::google::protobuf::int32 value) {
  set_has_fee();
  fee_ = value;
  // @@protoc_insertion_point(field_set:game.base.UserResult.fee)
}

// -------------------------------------------------------------------

// TablePlayersInfo

// optional int32 roomid = 1;
inline bool TablePlayersInfo::has_roomid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TablePlayersInfo::set_has_roomid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TablePlayersInfo::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TablePlayersInfo::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
inline ::google::protobuf::int32 TablePlayersInfo::roomid() const {
  // @@protoc_insertion_point(field_get:game.base.TablePlayersInfo.roomid)
  return roomid_;
}
inline void TablePlayersInfo::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:game.base.TablePlayersInfo.roomid)
}

// optional int64 room_min_deposit = 2;
inline bool TablePlayersInfo::has_room_min_deposit() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TablePlayersInfo::set_has_room_min_deposit() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TablePlayersInfo::clear_has_room_min_deposit() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TablePlayersInfo::clear_room_min_deposit() {
  room_min_deposit_ = GOOGLE_LONGLONG(0);
  clear_has_room_min_deposit();
}
inline ::google::protobuf::int64 TablePlayersInfo::room_min_deposit() const {
  // @@protoc_insertion_point(field_get:game.base.TablePlayersInfo.room_min_deposit)
  return room_min_deposit_;
}
inline void TablePlayersInfo::set_room_min_deposit(::google::protobuf::int64 value) {
  set_has_room_min_deposit();
  room_min_deposit_ = value;
  // @@protoc_insertion_point(field_set:game.base.TablePlayersInfo.room_min_deposit)
}

// optional int64 room_max_deposit = 3;
inline bool TablePlayersInfo::has_room_max_deposit() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TablePlayersInfo::set_has_room_max_deposit() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TablePlayersInfo::clear_has_room_max_deposit() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TablePlayersInfo::clear_room_max_deposit() {
  room_max_deposit_ = GOOGLE_LONGLONG(0);
  clear_has_room_max_deposit();
}
inline ::google::protobuf::int64 TablePlayersInfo::room_max_deposit() const {
  // @@protoc_insertion_point(field_get:game.base.TablePlayersInfo.room_max_deposit)
  return room_max_deposit_;
}
inline void TablePlayersInfo::set_room_max_deposit(::google::protobuf::int64 value) {
  set_has_room_max_deposit();
  room_max_deposit_ = value;
  // @@protoc_insertion_point(field_set:game.base.TablePlayersInfo.room_max_deposit)
}

// optional int32 tableno = 4;
inline bool TablePlayersInfo::has_tableno() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TablePlayersInfo::set_has_tableno() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TablePlayersInfo::clear_has_tableno() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TablePlayersInfo::clear_tableno() {
  tableno_ = 0;
  clear_has_tableno();
}
inline ::google::protobuf::int32 TablePlayersInfo::tableno() const {
  // @@protoc_insertion_point(field_get:game.base.TablePlayersInfo.tableno)
  return tableno_;
}
inline void TablePlayersInfo::set_tableno(::google::protobuf::int32 value) {
  set_has_tableno();
  tableno_ = value;
  // @@protoc_insertion_point(field_set:game.base.TablePlayersInfo.tableno)
}

// optional int32 table_status = 5;
inline bool TablePlayersInfo::has_table_status() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TablePlayersInfo::set_has_table_status() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TablePlayersInfo::clear_has_table_status() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TablePlayersInfo::clear_table_status() {
  table_status_ = 0;
  clear_has_table_status();
}
inline ::google::protobuf::int32 TablePlayersInfo::table_status() const {
  // @@protoc_insertion_point(field_get:game.base.TablePlayersInfo.table_status)
  return table_status_;
}
inline void TablePlayersInfo::set_table_status(::google::protobuf::int32 value) {
  set_has_table_status();
  table_status_ = value;
  // @@protoc_insertion_point(field_set:game.base.TablePlayersInfo.table_status)
}

// optional int64 table_min_deposit = 6;
inline bool TablePlayersInfo::has_table_min_deposit() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TablePlayersInfo::set_has_table_min_deposit() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TablePlayersInfo::clear_has_table_min_deposit() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TablePlayersInfo::clear_table_min_deposit() {
  table_min_deposit_ = GOOGLE_LONGLONG(0);
  clear_has_table_min_deposit();
}
inline ::google::protobuf::int64 TablePlayersInfo::table_min_deposit() const {
  // @@protoc_insertion_point(field_get:game.base.TablePlayersInfo.table_min_deposit)
  return table_min_deposit_;
}
inline void TablePlayersInfo::set_table_min_deposit(::google::protobuf::int64 value) {
  set_has_table_min_deposit();
  table_min_deposit_ = value;
  // @@protoc_insertion_point(field_set:game.base.TablePlayersInfo.table_min_deposit)
}

// optional int64 table_max_deposit = 7;
inline bool TablePlayersInfo::has_table_max_deposit() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TablePlayersInfo::set_has_table_max_deposit() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TablePlayersInfo::clear_has_table_max_deposit() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TablePlayersInfo::clear_table_max_deposit() {
  table_max_deposit_ = GOOGLE_LONGLONG(0);
  clear_has_table_max_deposit();
}
inline ::google::protobuf::int64 TablePlayersInfo::table_max_deposit() const {
  // @@protoc_insertion_point(field_get:game.base.TablePlayersInfo.table_max_deposit)
  return table_max_deposit_;
}
inline void TablePlayersInfo::set_table_max_deposit(::google::protobuf::int64 value) {
  set_has_table_max_deposit();
  table_max_deposit_ = value;
  // @@protoc_insertion_point(field_set:game.base.TablePlayersInfo.table_max_deposit)
}

// optional int64 base_deposit = 8;
inline bool TablePlayersInfo::has_base_deposit() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TablePlayersInfo::set_has_base_deposit() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TablePlayersInfo::clear_has_base_deposit() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TablePlayersInfo::clear_base_deposit() {
  base_deposit_ = GOOGLE_LONGLONG(0);
  clear_has_base_deposit();
}
inline ::google::protobuf::int64 TablePlayersInfo::base_deposit() const {
  // @@protoc_insertion_point(field_get:game.base.TablePlayersInfo.base_deposit)
  return base_deposit_;
}
inline void TablePlayersInfo::set_base_deposit(::google::protobuf::int64 value) {
  set_has_base_deposit();
  base_deposit_ = value;
  // @@protoc_insertion_point(field_set:game.base.TablePlayersInfo.base_deposit)
}

// repeated .game.base.User players = 9;
inline int TablePlayersInfo::players_size() const {
  return players_.size();
}
inline void TablePlayersInfo::clear_players() {
  players_.Clear();
}
inline const ::game::base::User& TablePlayersInfo::players(int index) const {
  // @@protoc_insertion_point(field_get:game.base.TablePlayersInfo.players)
  return players_.Get(index);
}
inline ::game::base::User* TablePlayersInfo::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:game.base.TablePlayersInfo.players)
  return players_.Mutable(index);
}
inline ::game::base::User* TablePlayersInfo::add_players() {
  // @@protoc_insertion_point(field_add:game.base.TablePlayersInfo.players)
  return players_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::game::base::User >*
TablePlayersInfo::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:game.base.TablePlayersInfo.players)
  return &players_;
}
inline const ::google::protobuf::RepeatedPtrField< ::game::base::User >&
TablePlayersInfo::players() const {
  // @@protoc_insertion_point(field_list:game.base.TablePlayersInfo.players)
  return players_;
}

// repeated .game.base.ChairInfo chairs = 10;
inline int TablePlayersInfo::chairs_size() const {
  return chairs_.size();
}
inline void TablePlayersInfo::clear_chairs() {
  chairs_.Clear();
}
inline const ::game::base::ChairInfo& TablePlayersInfo::chairs(int index) const {
  // @@protoc_insertion_point(field_get:game.base.TablePlayersInfo.chairs)
  return chairs_.Get(index);
}
inline ::game::base::ChairInfo* TablePlayersInfo::mutable_chairs(int index) {
  // @@protoc_insertion_point(field_mutable:game.base.TablePlayersInfo.chairs)
  return chairs_.Mutable(index);
}
inline ::game::base::ChairInfo* TablePlayersInfo::add_chairs() {
  // @@protoc_insertion_point(field_add:game.base.TablePlayersInfo.chairs)
  return chairs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::game::base::ChairInfo >*
TablePlayersInfo::mutable_chairs() {
  // @@protoc_insertion_point(field_mutable_list:game.base.TablePlayersInfo.chairs)
  return &chairs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::game::base::ChairInfo >&
TablePlayersInfo::chairs() const {
  // @@protoc_insertion_point(field_list:game.base.TablePlayersInfo.chairs)
  return chairs_;
}

// -------------------------------------------------------------------

// PulseReq

// optional int32 id = 1;
inline bool PulseReq::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PulseReq::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PulseReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PulseReq::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 PulseReq::id() const {
  // @@protoc_insertion_point(field_get:game.base.PulseReq.id)
  return id_;
}
inline void PulseReq::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:game.base.PulseReq.id)
}

// -------------------------------------------------------------------

// PulseResp

// optional int32 timestamp = 1;
inline bool PulseResp::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PulseResp::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PulseResp::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PulseResp::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
inline ::google::protobuf::int32 PulseResp::timestamp() const {
  // @@protoc_insertion_point(field_get:game.base.PulseResp.timestamp)
  return timestamp_;
}
inline void PulseResp::set_timestamp(::google::protobuf::int32 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:game.base.PulseResp.timestamp)
}

// -------------------------------------------------------------------

// EnterNormalGameReq

// optional int32 userid = 1;
inline bool EnterNormalGameReq::has_userid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EnterNormalGameReq::set_has_userid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EnterNormalGameReq::clear_has_userid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EnterNormalGameReq::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 EnterNormalGameReq::userid() const {
  // @@protoc_insertion_point(field_get:game.base.EnterNormalGameReq.userid)
  return userid_;
}
inline void EnterNormalGameReq::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:game.base.EnterNormalGameReq.userid)
}

// optional int32 gameid = 2;
inline bool EnterNormalGameReq::has_gameid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void EnterNormalGameReq::set_has_gameid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void EnterNormalGameReq::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void EnterNormalGameReq::clear_gameid() {
  gameid_ = 0;
  clear_has_gameid();
}
inline ::google::protobuf::int32 EnterNormalGameReq::gameid() const {
  // @@protoc_insertion_point(field_get:game.base.EnterNormalGameReq.gameid)
  return gameid_;
}
inline void EnterNormalGameReq::set_gameid(::google::protobuf::int32 value) {
  set_has_gameid();
  gameid_ = value;
  // @@protoc_insertion_point(field_set:game.base.EnterNormalGameReq.gameid)
}

// optional int32 roomid = 3;
inline bool EnterNormalGameReq::has_roomid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void EnterNormalGameReq::set_has_roomid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void EnterNormalGameReq::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void EnterNormalGameReq::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
inline ::google::protobuf::int32 EnterNormalGameReq::roomid() const {
  // @@protoc_insertion_point(field_get:game.base.EnterNormalGameReq.roomid)
  return roomid_;
}
inline void EnterNormalGameReq::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:game.base.EnterNormalGameReq.roomid)
}

// optional int32 flag = 4;
inline bool EnterNormalGameReq::has_flag() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void EnterNormalGameReq::set_has_flag() {
  _has_bits_[0] |= 0x00000040u;
}
inline void EnterNormalGameReq::clear_has_flag() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void EnterNormalGameReq::clear_flag() {
  flag_ = 0;
  clear_has_flag();
}
inline ::google::protobuf::int32 EnterNormalGameReq::flag() const {
  // @@protoc_insertion_point(field_get:game.base.EnterNormalGameReq.flag)
  return flag_;
}
inline void EnterNormalGameReq::set_flag(::google::protobuf::int32 value) {
  set_has_flag();
  flag_ = value;
  // @@protoc_insertion_point(field_set:game.base.EnterNormalGameReq.flag)
}

// optional int32 target = 5;
inline bool EnterNormalGameReq::has_target() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void EnterNormalGameReq::set_has_target() {
  _has_bits_[0] |= 0x00000080u;
}
inline void EnterNormalGameReq::clear_has_target() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void EnterNormalGameReq::clear_target() {
  target_ = 0;
  clear_has_target();
}
inline ::google::protobuf::int32 EnterNormalGameReq::target() const {
  // @@protoc_insertion_point(field_get:game.base.EnterNormalGameReq.target)
  return target_;
}
inline void EnterNormalGameReq::set_target(::google::protobuf::int32 value) {
  set_has_target();
  target_ = value;
  // @@protoc_insertion_point(field_set:game.base.EnterNormalGameReq.target)
}

// optional string hardid = 6;
inline bool EnterNormalGameReq::has_hardid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EnterNormalGameReq::set_has_hardid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EnterNormalGameReq::clear_has_hardid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EnterNormalGameReq::clear_hardid() {
  hardid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hardid();
}
inline const ::std::string& EnterNormalGameReq::hardid() const {
  // @@protoc_insertion_point(field_get:game.base.EnterNormalGameReq.hardid)
  return hardid_.GetNoArena();
}
inline void EnterNormalGameReq::set_hardid(const ::std::string& value) {
  set_has_hardid();
  hardid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:game.base.EnterNormalGameReq.hardid)
}
#if LANG_CXX11
inline void EnterNormalGameReq::set_hardid(::std::string&& value) {
  set_has_hardid();
  hardid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:game.base.EnterNormalGameReq.hardid)
}
#endif
inline void EnterNormalGameReq::set_hardid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_hardid();
  hardid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:game.base.EnterNormalGameReq.hardid)
}
inline void EnterNormalGameReq::set_hardid(const char* value, size_t size) {
  set_has_hardid();
  hardid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:game.base.EnterNormalGameReq.hardid)
}
inline ::std::string* EnterNormalGameReq::mutable_hardid() {
  set_has_hardid();
  // @@protoc_insertion_point(field_mutable:game.base.EnterNormalGameReq.hardid)
  return hardid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EnterNormalGameReq::release_hardid() {
  // @@protoc_insertion_point(field_release:game.base.EnterNormalGameReq.hardid)
  clear_has_hardid();
  return hardid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EnterNormalGameReq::set_allocated_hardid(::std::string* hardid) {
  if (hardid != NULL) {
    set_has_hardid();
  } else {
    clear_has_hardid();
  }
  hardid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hardid);
  // @@protoc_insertion_point(field_set_allocated:game.base.EnterNormalGameReq.hardid)
}

// optional string hall_version = 7;
inline bool EnterNormalGameReq::has_hall_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EnterNormalGameReq::set_has_hall_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EnterNormalGameReq::clear_has_hall_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EnterNormalGameReq::clear_hall_version() {
  hall_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hall_version();
}
inline const ::std::string& EnterNormalGameReq::hall_version() const {
  // @@protoc_insertion_point(field_get:game.base.EnterNormalGameReq.hall_version)
  return hall_version_.GetNoArena();
}
inline void EnterNormalGameReq::set_hall_version(const ::std::string& value) {
  set_has_hall_version();
  hall_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:game.base.EnterNormalGameReq.hall_version)
}
#if LANG_CXX11
inline void EnterNormalGameReq::set_hall_version(::std::string&& value) {
  set_has_hall_version();
  hall_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:game.base.EnterNormalGameReq.hall_version)
}
#endif
inline void EnterNormalGameReq::set_hall_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_hall_version();
  hall_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:game.base.EnterNormalGameReq.hall_version)
}
inline void EnterNormalGameReq::set_hall_version(const char* value, size_t size) {
  set_has_hall_version();
  hall_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:game.base.EnterNormalGameReq.hall_version)
}
inline ::std::string* EnterNormalGameReq::mutable_hall_version() {
  set_has_hall_version();
  // @@protoc_insertion_point(field_mutable:game.base.EnterNormalGameReq.hall_version)
  return hall_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EnterNormalGameReq::release_hall_version() {
  // @@protoc_insertion_point(field_release:game.base.EnterNormalGameReq.hall_version)
  clear_has_hall_version();
  return hall_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EnterNormalGameReq::set_allocated_hall_version(::std::string* hall_version) {
  if (hall_version != NULL) {
    set_has_hall_version();
  } else {
    clear_has_hall_version();
  }
  hall_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hall_version);
  // @@protoc_insertion_point(field_set_allocated:game.base.EnterNormalGameReq.hall_version)
}

// optional string game_version = 8;
inline bool EnterNormalGameReq::has_game_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EnterNormalGameReq::set_has_game_version() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EnterNormalGameReq::clear_has_game_version() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EnterNormalGameReq::clear_game_version() {
  game_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_game_version();
}
inline const ::std::string& EnterNormalGameReq::game_version() const {
  // @@protoc_insertion_point(field_get:game.base.EnterNormalGameReq.game_version)
  return game_version_.GetNoArena();
}
inline void EnterNormalGameReq::set_game_version(const ::std::string& value) {
  set_has_game_version();
  game_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:game.base.EnterNormalGameReq.game_version)
}
#if LANG_CXX11
inline void EnterNormalGameReq::set_game_version(::std::string&& value) {
  set_has_game_version();
  game_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:game.base.EnterNormalGameReq.game_version)
}
#endif
inline void EnterNormalGameReq::set_game_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_game_version();
  game_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:game.base.EnterNormalGameReq.game_version)
}
inline void EnterNormalGameReq::set_game_version(const char* value, size_t size) {
  set_has_game_version();
  game_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:game.base.EnterNormalGameReq.game_version)
}
inline ::std::string* EnterNormalGameReq::mutable_game_version() {
  set_has_game_version();
  // @@protoc_insertion_point(field_mutable:game.base.EnterNormalGameReq.game_version)
  return game_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EnterNormalGameReq::release_game_version() {
  // @@protoc_insertion_point(field_release:game.base.EnterNormalGameReq.game_version)
  clear_has_game_version();
  return game_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EnterNormalGameReq::set_allocated_game_version(::std::string* game_version) {
  if (game_version != NULL) {
    set_has_game_version();
  } else {
    clear_has_game_version();
  }
  game_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), game_version);
  // @@protoc_insertion_point(field_set_allocated:game.base.EnterNormalGameReq.game_version)
}

// -------------------------------------------------------------------

// EnterNormalGameResp

// optional int32 code = 1;
inline bool EnterNormalGameResp::has_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EnterNormalGameResp::set_has_code() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EnterNormalGameResp::clear_has_code() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EnterNormalGameResp::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 EnterNormalGameResp::code() const {
  // @@protoc_insertion_point(field_get:game.base.EnterNormalGameResp.code)
  return code_;
}
inline void EnterNormalGameResp::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:game.base.EnterNormalGameResp.code)
}

// optional int32 flag = 2;
inline bool EnterNormalGameResp::has_flag() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void EnterNormalGameResp::set_has_flag() {
  _has_bits_[0] |= 0x00000010u;
}
inline void EnterNormalGameResp::clear_has_flag() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void EnterNormalGameResp::clear_flag() {
  flag_ = 0;
  clear_has_flag();
}
inline ::google::protobuf::int32 EnterNormalGameResp::flag() const {
  // @@protoc_insertion_point(field_get:game.base.EnterNormalGameResp.flag)
  return flag_;
}
inline void EnterNormalGameResp::set_flag(::google::protobuf::int32 value) {
  set_has_flag();
  flag_ = value;
  // @@protoc_insertion_point(field_set:game.base.EnterNormalGameResp.flag)
}

// optional .game.base.BytesData hand = 3;
inline bool EnterNormalGameResp::has_hand() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EnterNormalGameResp::set_has_hand() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EnterNormalGameResp::clear_has_hand() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EnterNormalGameResp::clear_hand() {
  if (hand_ != NULL) hand_->Clear();
  clear_has_hand();
}
inline const ::game::base::BytesData& EnterNormalGameResp::hand() const {
  const ::game::base::BytesData* p = hand_;
  // @@protoc_insertion_point(field_get:game.base.EnterNormalGameResp.hand)
  return p != NULL ? *p : *reinterpret_cast<const ::game::base::BytesData*>(
      &::game::base::_BytesData_default_instance_);
}
inline ::game::base::BytesData* EnterNormalGameResp::release_hand() {
  // @@protoc_insertion_point(field_release:game.base.EnterNormalGameResp.hand)
  clear_has_hand();
  ::game::base::BytesData* temp = hand_;
  hand_ = NULL;
  return temp;
}
inline ::game::base::BytesData* EnterNormalGameResp::mutable_hand() {
  set_has_hand();
  if (hand_ == NULL) {
    hand_ = new ::game::base::BytesData;
  }
  // @@protoc_insertion_point(field_mutable:game.base.EnterNormalGameResp.hand)
  return hand_;
}
inline void EnterNormalGameResp::set_allocated_hand(::game::base::BytesData* hand) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete hand_;
  }
  if (hand) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      hand = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hand, submessage_arena);
    }
    set_has_hand();
  } else {
    clear_has_hand();
  }
  hand_ = hand;
  // @@protoc_insertion_point(field_set_allocated:game.base.EnterNormalGameResp.hand)
}

// optional .game.base.TablePlayersInfo table_players = 4;
inline bool EnterNormalGameResp::has_table_players() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EnterNormalGameResp::set_has_table_players() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EnterNormalGameResp::clear_has_table_players() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EnterNormalGameResp::clear_table_players() {
  if (table_players_ != NULL) table_players_->Clear();
  clear_has_table_players();
}
inline const ::game::base::TablePlayersInfo& EnterNormalGameResp::table_players() const {
  const ::game::base::TablePlayersInfo* p = table_players_;
  // @@protoc_insertion_point(field_get:game.base.EnterNormalGameResp.table_players)
  return p != NULL ? *p : *reinterpret_cast<const ::game::base::TablePlayersInfo*>(
      &::game::base::_TablePlayersInfo_default_instance_);
}
inline ::game::base::TablePlayersInfo* EnterNormalGameResp::release_table_players() {
  // @@protoc_insertion_point(field_release:game.base.EnterNormalGameResp.table_players)
  clear_has_table_players();
  ::game::base::TablePlayersInfo* temp = table_players_;
  table_players_ = NULL;
  return temp;
}
inline ::game::base::TablePlayersInfo* EnterNormalGameResp::mutable_table_players() {
  set_has_table_players();
  if (table_players_ == NULL) {
    table_players_ = new ::game::base::TablePlayersInfo;
  }
  // @@protoc_insertion_point(field_mutable:game.base.EnterNormalGameResp.table_players)
  return table_players_;
}
inline void EnterNormalGameResp::set_allocated_table_players(::game::base::TablePlayersInfo* table_players) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete table_players_;
  }
  if (table_players) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      table_players = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, table_players, submessage_arena);
    }
    set_has_table_players();
  } else {
    clear_has_table_players();
  }
  table_players_ = table_players;
  // @@protoc_insertion_point(field_set_allocated:game.base.EnterNormalGameResp.table_players)
}

// optional int32 custom_flag = 5;
inline bool EnterNormalGameResp::has_custom_flag() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void EnterNormalGameResp::set_has_custom_flag() {
  _has_bits_[0] |= 0x00000020u;
}
inline void EnterNormalGameResp::clear_has_custom_flag() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void EnterNormalGameResp::clear_custom_flag() {
  custom_flag_ = 0;
  clear_has_custom_flag();
}
inline ::google::protobuf::int32 EnterNormalGameResp::custom_flag() const {
  // @@protoc_insertion_point(field_get:game.base.EnterNormalGameResp.custom_flag)
  return custom_flag_;
}
inline void EnterNormalGameResp::set_custom_flag(::google::protobuf::int32 value) {
  set_has_custom_flag();
  custom_flag_ = value;
  // @@protoc_insertion_point(field_set:game.base.EnterNormalGameResp.custom_flag)
}

// optional .game.base.BytesData custom_data = 6;
inline bool EnterNormalGameResp::has_custom_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EnterNormalGameResp::set_has_custom_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EnterNormalGameResp::clear_has_custom_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EnterNormalGameResp::clear_custom_data() {
  if (custom_data_ != NULL) custom_data_->Clear();
  clear_has_custom_data();
}
inline const ::game::base::BytesData& EnterNormalGameResp::custom_data() const {
  const ::game::base::BytesData* p = custom_data_;
  // @@protoc_insertion_point(field_get:game.base.EnterNormalGameResp.custom_data)
  return p != NULL ? *p : *reinterpret_cast<const ::game::base::BytesData*>(
      &::game::base::_BytesData_default_instance_);
}
inline ::game::base::BytesData* EnterNormalGameResp::release_custom_data() {
  // @@protoc_insertion_point(field_release:game.base.EnterNormalGameResp.custom_data)
  clear_has_custom_data();
  ::game::base::BytesData* temp = custom_data_;
  custom_data_ = NULL;
  return temp;
}
inline ::game::base::BytesData* EnterNormalGameResp::mutable_custom_data() {
  set_has_custom_data();
  if (custom_data_ == NULL) {
    custom_data_ = new ::game::base::BytesData;
  }
  // @@protoc_insertion_point(field_mutable:game.base.EnterNormalGameResp.custom_data)
  return custom_data_;
}
inline void EnterNormalGameResp::set_allocated_custom_data(::game::base::BytesData* custom_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete custom_data_;
  }
  if (custom_data) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      custom_data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, custom_data, submessage_arena);
    }
    set_has_custom_data();
  } else {
    clear_has_custom_data();
  }
  custom_data_ = custom_data;
  // @@protoc_insertion_point(field_set_allocated:game.base.EnterNormalGameResp.custom_data)
}

// optional int32 gameid = 7;
inline bool EnterNormalGameResp::has_gameid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void EnterNormalGameResp::set_has_gameid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void EnterNormalGameResp::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void EnterNormalGameResp::clear_gameid() {
  gameid_ = 0;
  clear_has_gameid();
}
inline ::google::protobuf::int32 EnterNormalGameResp::gameid() const {
  // @@protoc_insertion_point(field_get:game.base.EnterNormalGameResp.gameid)
  return gameid_;
}
inline void EnterNormalGameResp::set_gameid(::google::protobuf::int32 value) {
  set_has_gameid();
  gameid_ = value;
  // @@protoc_insertion_point(field_set:game.base.EnterNormalGameResp.gameid)
}

// -------------------------------------------------------------------

// EnterPrivateGameReq

// optional .game.base.EnterNormalGameReq base_enter = 1;
inline bool EnterPrivateGameReq::has_base_enter() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EnterPrivateGameReq::set_has_base_enter() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EnterPrivateGameReq::clear_has_base_enter() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EnterPrivateGameReq::clear_base_enter() {
  if (base_enter_ != NULL) base_enter_->Clear();
  clear_has_base_enter();
}
inline const ::game::base::EnterNormalGameReq& EnterPrivateGameReq::base_enter() const {
  const ::game::base::EnterNormalGameReq* p = base_enter_;
  // @@protoc_insertion_point(field_get:game.base.EnterPrivateGameReq.base_enter)
  return p != NULL ? *p : *reinterpret_cast<const ::game::base::EnterNormalGameReq*>(
      &::game::base::_EnterNormalGameReq_default_instance_);
}
inline ::game::base::EnterNormalGameReq* EnterPrivateGameReq::release_base_enter() {
  // @@protoc_insertion_point(field_release:game.base.EnterPrivateGameReq.base_enter)
  clear_has_base_enter();
  ::game::base::EnterNormalGameReq* temp = base_enter_;
  base_enter_ = NULL;
  return temp;
}
inline ::game::base::EnterNormalGameReq* EnterPrivateGameReq::mutable_base_enter() {
  set_has_base_enter();
  if (base_enter_ == NULL) {
    base_enter_ = new ::game::base::EnterNormalGameReq;
  }
  // @@protoc_insertion_point(field_mutable:game.base.EnterPrivateGameReq.base_enter)
  return base_enter_;
}
inline void EnterPrivateGameReq::set_allocated_base_enter(::game::base::EnterNormalGameReq* base_enter) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete base_enter_;
  }
  if (base_enter) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      base_enter = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, base_enter, submessage_arena);
    }
    set_has_base_enter();
  } else {
    clear_has_base_enter();
  }
  base_enter_ = base_enter;
  // @@protoc_insertion_point(field_set_allocated:game.base.EnterPrivateGameReq.base_enter)
}

// -------------------------------------------------------------------

// EnterPrivateGameResp

// optional int32 code = 1;
inline bool EnterPrivateGameResp::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EnterPrivateGameResp::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EnterPrivateGameResp::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EnterPrivateGameResp::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 EnterPrivateGameResp::code() const {
  // @@protoc_insertion_point(field_get:game.base.EnterPrivateGameResp.code)
  return code_;
}
inline void EnterPrivateGameResp::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:game.base.EnterPrivateGameResp.code)
}

// -------------------------------------------------------------------

// EnterMatchGameReq

// optional .game.base.EnterNormalGameReq base_enter = 1;
inline bool EnterMatchGameReq::has_base_enter() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EnterMatchGameReq::set_has_base_enter() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EnterMatchGameReq::clear_has_base_enter() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EnterMatchGameReq::clear_base_enter() {
  if (base_enter_ != NULL) base_enter_->Clear();
  clear_has_base_enter();
}
inline const ::game::base::EnterNormalGameReq& EnterMatchGameReq::base_enter() const {
  const ::game::base::EnterNormalGameReq* p = base_enter_;
  // @@protoc_insertion_point(field_get:game.base.EnterMatchGameReq.base_enter)
  return p != NULL ? *p : *reinterpret_cast<const ::game::base::EnterNormalGameReq*>(
      &::game::base::_EnterNormalGameReq_default_instance_);
}
inline ::game::base::EnterNormalGameReq* EnterMatchGameReq::release_base_enter() {
  // @@protoc_insertion_point(field_release:game.base.EnterMatchGameReq.base_enter)
  clear_has_base_enter();
  ::game::base::EnterNormalGameReq* temp = base_enter_;
  base_enter_ = NULL;
  return temp;
}
inline ::game::base::EnterNormalGameReq* EnterMatchGameReq::mutable_base_enter() {
  set_has_base_enter();
  if (base_enter_ == NULL) {
    base_enter_ = new ::game::base::EnterNormalGameReq;
  }
  // @@protoc_insertion_point(field_mutable:game.base.EnterMatchGameReq.base_enter)
  return base_enter_;
}
inline void EnterMatchGameReq::set_allocated_base_enter(::game::base::EnterNormalGameReq* base_enter) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete base_enter_;
  }
  if (base_enter) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      base_enter = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, base_enter, submessage_arena);
    }
    set_has_base_enter();
  } else {
    clear_has_base_enter();
  }
  base_enter_ = base_enter;
  // @@protoc_insertion_point(field_set_allocated:game.base.EnterMatchGameReq.base_enter)
}

// -------------------------------------------------------------------

// EnterMatchGameResp

// optional int32 code = 1;
inline bool EnterMatchGameResp::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EnterMatchGameResp::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EnterMatchGameResp::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EnterMatchGameResp::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 EnterMatchGameResp::code() const {
  // @@protoc_insertion_point(field_get:game.base.EnterMatchGameResp.code)
  return code_;
}
inline void EnterMatchGameResp::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:game.base.EnterMatchGameResp.code)
}

// -------------------------------------------------------------------

// LeaveGameReq

// optional int32 userid = 1;
inline bool LeaveGameReq::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LeaveGameReq::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LeaveGameReq::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LeaveGameReq::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 LeaveGameReq::userid() const {
  // @@protoc_insertion_point(field_get:game.base.LeaveGameReq.userid)
  return userid_;
}
inline void LeaveGameReq::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:game.base.LeaveGameReq.userid)
}

// -------------------------------------------------------------------

// LeaveGameResp

// optional int32 code = 1;
inline bool LeaveGameResp::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LeaveGameResp::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LeaveGameResp::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LeaveGameResp::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 LeaveGameResp::code() const {
  // @@protoc_insertion_point(field_get:game.base.LeaveGameResp.code)
  return code_;
}
inline void LeaveGameResp::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:game.base.LeaveGameResp.code)
}

// -------------------------------------------------------------------

// GiveUpReq

// optional int32 userid = 1;
inline bool GiveUpReq::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GiveUpReq::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GiveUpReq::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GiveUpReq::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 GiveUpReq::userid() const {
  // @@protoc_insertion_point(field_get:game.base.GiveUpReq.userid)
  return userid_;
}
inline void GiveUpReq::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:game.base.GiveUpReq.userid)
}

// -------------------------------------------------------------------

// GiveUpResp

// optional int32 code = 1;
inline bool GiveUpResp::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GiveUpResp::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GiveUpResp::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GiveUpResp::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 GiveUpResp::code() const {
  // @@protoc_insertion_point(field_get:game.base.GiveUpResp.code)
  return code_;
}
inline void GiveUpResp::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:game.base.GiveUpResp.code)
}

// -------------------------------------------------------------------

// Looker2PlayerReq

// optional int32 userid = 1;
inline bool Looker2PlayerReq::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Looker2PlayerReq::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Looker2PlayerReq::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Looker2PlayerReq::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 Looker2PlayerReq::userid() const {
  // @@protoc_insertion_point(field_get:game.base.Looker2PlayerReq.userid)
  return userid_;
}
inline void Looker2PlayerReq::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:game.base.Looker2PlayerReq.userid)
}

// -------------------------------------------------------------------

// Looker2PlayerResp

// optional int32 code = 1;
inline bool Looker2PlayerResp::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Looker2PlayerResp::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Looker2PlayerResp::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Looker2PlayerResp::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 Looker2PlayerResp::code() const {
  // @@protoc_insertion_point(field_get:game.base.Looker2PlayerResp.code)
  return code_;
}
inline void Looker2PlayerResp::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:game.base.Looker2PlayerResp.code)
}

// optional int32 chairno = 2;
inline bool Looker2PlayerResp::has_chairno() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Looker2PlayerResp::set_has_chairno() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Looker2PlayerResp::clear_has_chairno() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Looker2PlayerResp::clear_chairno() {
  chairno_ = 0;
  clear_has_chairno();
}
inline ::google::protobuf::int32 Looker2PlayerResp::chairno() const {
  // @@protoc_insertion_point(field_get:game.base.Looker2PlayerResp.chairno)
  return chairno_;
}
inline void Looker2PlayerResp::set_chairno(::google::protobuf::int32 value) {
  set_has_chairno();
  chairno_ = value;
  // @@protoc_insertion_point(field_set:game.base.Looker2PlayerResp.chairno)
}

// -------------------------------------------------------------------

// Player2LookerReq

// optional int32 userid = 1;
inline bool Player2LookerReq::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Player2LookerReq::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Player2LookerReq::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Player2LookerReq::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 Player2LookerReq::userid() const {
  // @@protoc_insertion_point(field_get:game.base.Player2LookerReq.userid)
  return userid_;
}
inline void Player2LookerReq::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:game.base.Player2LookerReq.userid)
}

// optional int32 flag = 2;
inline bool Player2LookerReq::has_flag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Player2LookerReq::set_has_flag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Player2LookerReq::clear_has_flag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Player2LookerReq::clear_flag() {
  flag_ = 0;
  clear_has_flag();
}
inline ::google::protobuf::int32 Player2LookerReq::flag() const {
  // @@protoc_insertion_point(field_get:game.base.Player2LookerReq.flag)
  return flag_;
}
inline void Player2LookerReq::set_flag(::google::protobuf::int32 value) {
  set_has_flag();
  flag_ = value;
  // @@protoc_insertion_point(field_set:game.base.Player2LookerReq.flag)
}

// -------------------------------------------------------------------

// Player2LookerResp

// optional int32 code = 1;
inline bool Player2LookerResp::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Player2LookerResp::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Player2LookerResp::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Player2LookerResp::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 Player2LookerResp::code() const {
  // @@protoc_insertion_point(field_get:game.base.Player2LookerResp.code)
  return code_;
}
inline void Player2LookerResp::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:game.base.Player2LookerResp.code)
}

// -------------------------------------------------------------------

// SwitchTableReq

// optional int32 userid = 1;
inline bool SwitchTableReq::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SwitchTableReq::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SwitchTableReq::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SwitchTableReq::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 SwitchTableReq::userid() const {
  // @@protoc_insertion_point(field_get:game.base.SwitchTableReq.userid)
  return userid_;
}
inline void SwitchTableReq::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:game.base.SwitchTableReq.userid)
}

// -------------------------------------------------------------------

// SwitchTableResp

// optional int32 code = 1;
inline bool SwitchTableResp::has_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SwitchTableResp::set_has_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SwitchTableResp::clear_has_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SwitchTableResp::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 SwitchTableResp::code() const {
  // @@protoc_insertion_point(field_get:game.base.SwitchTableResp.code)
  return code_;
}
inline void SwitchTableResp::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:game.base.SwitchTableResp.code)
}

// optional .game.base.TablePlayersInfo table_players = 2;
inline bool SwitchTableResp::has_table_players() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SwitchTableResp::set_has_table_players() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SwitchTableResp::clear_has_table_players() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SwitchTableResp::clear_table_players() {
  if (table_players_ != NULL) table_players_->Clear();
  clear_has_table_players();
}
inline const ::game::base::TablePlayersInfo& SwitchTableResp::table_players() const {
  const ::game::base::TablePlayersInfo* p = table_players_;
  // @@protoc_insertion_point(field_get:game.base.SwitchTableResp.table_players)
  return p != NULL ? *p : *reinterpret_cast<const ::game::base::TablePlayersInfo*>(
      &::game::base::_TablePlayersInfo_default_instance_);
}
inline ::game::base::TablePlayersInfo* SwitchTableResp::release_table_players() {
  // @@protoc_insertion_point(field_release:game.base.SwitchTableResp.table_players)
  clear_has_table_players();
  ::game::base::TablePlayersInfo* temp = table_players_;
  table_players_ = NULL;
  return temp;
}
inline ::game::base::TablePlayersInfo* SwitchTableResp::mutable_table_players() {
  set_has_table_players();
  if (table_players_ == NULL) {
    table_players_ = new ::game::base::TablePlayersInfo;
  }
  // @@protoc_insertion_point(field_mutable:game.base.SwitchTableResp.table_players)
  return table_players_;
}
inline void SwitchTableResp::set_allocated_table_players(::game::base::TablePlayersInfo* table_players) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete table_players_;
  }
  if (table_players) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      table_players = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, table_players, submessage_arena);
    }
    set_has_table_players();
  } else {
    clear_has_table_players();
  }
  table_players_ = table_players;
  // @@protoc_insertion_point(field_set_allocated:game.base.SwitchTableResp.table_players)
}

// optional int32 custom_flag = 3;
inline bool SwitchTableResp::has_custom_flag() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SwitchTableResp::set_has_custom_flag() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SwitchTableResp::clear_has_custom_flag() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SwitchTableResp::clear_custom_flag() {
  custom_flag_ = 0;
  clear_has_custom_flag();
}
inline ::google::protobuf::int32 SwitchTableResp::custom_flag() const {
  // @@protoc_insertion_point(field_get:game.base.SwitchTableResp.custom_flag)
  return custom_flag_;
}
inline void SwitchTableResp::set_custom_flag(::google::protobuf::int32 value) {
  set_has_custom_flag();
  custom_flag_ = value;
  // @@protoc_insertion_point(field_set:game.base.SwitchTableResp.custom_flag)
}

// optional .game.base.BytesData custom_data = 4;
inline bool SwitchTableResp::has_custom_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SwitchTableResp::set_has_custom_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SwitchTableResp::clear_has_custom_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SwitchTableResp::clear_custom_data() {
  if (custom_data_ != NULL) custom_data_->Clear();
  clear_has_custom_data();
}
inline const ::game::base::BytesData& SwitchTableResp::custom_data() const {
  const ::game::base::BytesData* p = custom_data_;
  // @@protoc_insertion_point(field_get:game.base.SwitchTableResp.custom_data)
  return p != NULL ? *p : *reinterpret_cast<const ::game::base::BytesData*>(
      &::game::base::_BytesData_default_instance_);
}
inline ::game::base::BytesData* SwitchTableResp::release_custom_data() {
  // @@protoc_insertion_point(field_release:game.base.SwitchTableResp.custom_data)
  clear_has_custom_data();
  ::game::base::BytesData* temp = custom_data_;
  custom_data_ = NULL;
  return temp;
}
inline ::game::base::BytesData* SwitchTableResp::mutable_custom_data() {
  set_has_custom_data();
  if (custom_data_ == NULL) {
    custom_data_ = new ::game::base::BytesData;
  }
  // @@protoc_insertion_point(field_mutable:game.base.SwitchTableResp.custom_data)
  return custom_data_;
}
inline void SwitchTableResp::set_allocated_custom_data(::game::base::BytesData* custom_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete custom_data_;
  }
  if (custom_data) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      custom_data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, custom_data, submessage_arena);
    }
    set_has_custom_data();
  } else {
    clear_has_custom_data();
  }
  custom_data_ = custom_data;
  // @@protoc_insertion_point(field_set_allocated:game.base.SwitchTableResp.custom_data)
}

// -------------------------------------------------------------------

// TableChatReq

// optional int32 userid = 1;
inline bool TableChatReq::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TableChatReq::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TableChatReq::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TableChatReq::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 TableChatReq::userid() const {
  // @@protoc_insertion_point(field_get:game.base.TableChatReq.userid)
  return userid_;
}
inline void TableChatReq::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:game.base.TableChatReq.userid)
}

// optional string msg = 2;
inline bool TableChatReq::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TableChatReq::set_has_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TableChatReq::clear_has_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TableChatReq::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg();
}
inline const ::std::string& TableChatReq::msg() const {
  // @@protoc_insertion_point(field_get:game.base.TableChatReq.msg)
  return msg_.GetNoArena();
}
inline void TableChatReq::set_msg(const ::std::string& value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:game.base.TableChatReq.msg)
}
#if LANG_CXX11
inline void TableChatReq::set_msg(::std::string&& value) {
  set_has_msg();
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:game.base.TableChatReq.msg)
}
#endif
inline void TableChatReq::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:game.base.TableChatReq.msg)
}
inline void TableChatReq::set_msg(const char* value, size_t size) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:game.base.TableChatReq.msg)
}
inline ::std::string* TableChatReq::mutable_msg() {
  set_has_msg();
  // @@protoc_insertion_point(field_mutable:game.base.TableChatReq.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TableChatReq::release_msg() {
  // @@protoc_insertion_point(field_release:game.base.TableChatReq.msg)
  clear_has_msg();
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TableChatReq::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:game.base.TableChatReq.msg)
}

// -------------------------------------------------------------------

// TableChatNotify

// optional int32 userid = 1;
inline bool TableChatNotify::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TableChatNotify::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TableChatNotify::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TableChatNotify::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 TableChatNotify::userid() const {
  // @@protoc_insertion_point(field_get:game.base.TableChatNotify.userid)
  return userid_;
}
inline void TableChatNotify::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:game.base.TableChatNotify.userid)
}

// optional string msg = 2;
inline bool TableChatNotify::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TableChatNotify::set_has_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TableChatNotify::clear_has_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TableChatNotify::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg();
}
inline const ::std::string& TableChatNotify::msg() const {
  // @@protoc_insertion_point(field_get:game.base.TableChatNotify.msg)
  return msg_.GetNoArena();
}
inline void TableChatNotify::set_msg(const ::std::string& value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:game.base.TableChatNotify.msg)
}
#if LANG_CXX11
inline void TableChatNotify::set_msg(::std::string&& value) {
  set_has_msg();
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:game.base.TableChatNotify.msg)
}
#endif
inline void TableChatNotify::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:game.base.TableChatNotify.msg)
}
inline void TableChatNotify::set_msg(const char* value, size_t size) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:game.base.TableChatNotify.msg)
}
inline ::std::string* TableChatNotify::mutable_msg() {
  set_has_msg();
  // @@protoc_insertion_point(field_mutable:game.base.TableChatNotify.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TableChatNotify::release_msg() {
  // @@protoc_insertion_point(field_release:game.base.TableChatNotify.msg)
  clear_has_msg();
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TableChatNotify::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:game.base.TableChatNotify.msg)
}

// -------------------------------------------------------------------

// TableChatResp

// optional int32 code = 1;
inline bool TableChatResp::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TableChatResp::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TableChatResp::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TableChatResp::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 TableChatResp::code() const {
  // @@protoc_insertion_point(field_get:game.base.TableChatResp.code)
  return code_;
}
inline void TableChatResp::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:game.base.TableChatResp.code)
}

// -------------------------------------------------------------------

// StartGameReq

// optional int32 roomid = 1;
inline bool StartGameReq::has_roomid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StartGameReq::set_has_roomid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StartGameReq::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StartGameReq::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
inline ::google::protobuf::int32 StartGameReq::roomid() const {
  // @@protoc_insertion_point(field_get:game.base.StartGameReq.roomid)
  return roomid_;
}
inline void StartGameReq::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:game.base.StartGameReq.roomid)
}

// optional int32 tableno = 2;
inline bool StartGameReq::has_tableno() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StartGameReq::set_has_tableno() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StartGameReq::clear_has_tableno() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StartGameReq::clear_tableno() {
  tableno_ = 0;
  clear_has_tableno();
}
inline ::google::protobuf::int32 StartGameReq::tableno() const {
  // @@protoc_insertion_point(field_get:game.base.StartGameReq.tableno)
  return tableno_;
}
inline void StartGameReq::set_tableno(::google::protobuf::int32 value) {
  set_has_tableno();
  tableno_ = value;
  // @@protoc_insertion_point(field_set:game.base.StartGameReq.tableno)
}

// -------------------------------------------------------------------

// GetTablePlayersInfoReq

// optional int32 userid = 1;
inline bool GetTablePlayersInfoReq::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetTablePlayersInfoReq::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetTablePlayersInfoReq::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetTablePlayersInfoReq::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 GetTablePlayersInfoReq::userid() const {
  // @@protoc_insertion_point(field_get:game.base.GetTablePlayersInfoReq.userid)
  return userid_;
}
inline void GetTablePlayersInfoReq::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:game.base.GetTablePlayersInfoReq.userid)
}

// -------------------------------------------------------------------

// GetTablePlayersInfoResp

// optional int32 code = 1;
inline bool GetTablePlayersInfoResp::has_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GetTablePlayersInfoResp::set_has_code() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GetTablePlayersInfoResp::clear_has_code() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GetTablePlayersInfoResp::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 GetTablePlayersInfoResp::code() const {
  // @@protoc_insertion_point(field_get:game.base.GetTablePlayersInfoResp.code)
  return code_;
}
inline void GetTablePlayersInfoResp::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:game.base.GetTablePlayersInfoResp.code)
}

// optional .game.base.TablePlayersInfo table_players = 2;
inline bool GetTablePlayersInfoResp::has_table_players() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetTablePlayersInfoResp::set_has_table_players() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetTablePlayersInfoResp::clear_has_table_players() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetTablePlayersInfoResp::clear_table_players() {
  if (table_players_ != NULL) table_players_->Clear();
  clear_has_table_players();
}
inline const ::game::base::TablePlayersInfo& GetTablePlayersInfoResp::table_players() const {
  const ::game::base::TablePlayersInfo* p = table_players_;
  // @@protoc_insertion_point(field_get:game.base.GetTablePlayersInfoResp.table_players)
  return p != NULL ? *p : *reinterpret_cast<const ::game::base::TablePlayersInfo*>(
      &::game::base::_TablePlayersInfo_default_instance_);
}
inline ::game::base::TablePlayersInfo* GetTablePlayersInfoResp::release_table_players() {
  // @@protoc_insertion_point(field_release:game.base.GetTablePlayersInfoResp.table_players)
  clear_has_table_players();
  ::game::base::TablePlayersInfo* temp = table_players_;
  table_players_ = NULL;
  return temp;
}
inline ::game::base::TablePlayersInfo* GetTablePlayersInfoResp::mutable_table_players() {
  set_has_table_players();
  if (table_players_ == NULL) {
    table_players_ = new ::game::base::TablePlayersInfo;
  }
  // @@protoc_insertion_point(field_mutable:game.base.GetTablePlayersInfoResp.table_players)
  return table_players_;
}
inline void GetTablePlayersInfoResp::set_allocated_table_players(::game::base::TablePlayersInfo* table_players) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete table_players_;
  }
  if (table_players) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      table_players = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, table_players, submessage_arena);
    }
    set_has_table_players();
  } else {
    clear_has_table_players();
  }
  table_players_ = table_players;
  // @@protoc_insertion_point(field_set_allocated:game.base.GetTablePlayersInfoResp.table_players)
}

// optional int32 custom_flag = 3;
inline bool GetTablePlayersInfoResp::has_custom_flag() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GetTablePlayersInfoResp::set_has_custom_flag() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GetTablePlayersInfoResp::clear_has_custom_flag() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GetTablePlayersInfoResp::clear_custom_flag() {
  custom_flag_ = 0;
  clear_has_custom_flag();
}
inline ::google::protobuf::int32 GetTablePlayersInfoResp::custom_flag() const {
  // @@protoc_insertion_point(field_get:game.base.GetTablePlayersInfoResp.custom_flag)
  return custom_flag_;
}
inline void GetTablePlayersInfoResp::set_custom_flag(::google::protobuf::int32 value) {
  set_has_custom_flag();
  custom_flag_ = value;
  // @@protoc_insertion_point(field_set:game.base.GetTablePlayersInfoResp.custom_flag)
}

// optional .game.base.BytesData custom_data = 4;
inline bool GetTablePlayersInfoResp::has_custom_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetTablePlayersInfoResp::set_has_custom_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetTablePlayersInfoResp::clear_has_custom_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetTablePlayersInfoResp::clear_custom_data() {
  if (custom_data_ != NULL) custom_data_->Clear();
  clear_has_custom_data();
}
inline const ::game::base::BytesData& GetTablePlayersInfoResp::custom_data() const {
  const ::game::base::BytesData* p = custom_data_;
  // @@protoc_insertion_point(field_get:game.base.GetTablePlayersInfoResp.custom_data)
  return p != NULL ? *p : *reinterpret_cast<const ::game::base::BytesData*>(
      &::game::base::_BytesData_default_instance_);
}
inline ::game::base::BytesData* GetTablePlayersInfoResp::release_custom_data() {
  // @@protoc_insertion_point(field_release:game.base.GetTablePlayersInfoResp.custom_data)
  clear_has_custom_data();
  ::game::base::BytesData* temp = custom_data_;
  custom_data_ = NULL;
  return temp;
}
inline ::game::base::BytesData* GetTablePlayersInfoResp::mutable_custom_data() {
  set_has_custom_data();
  if (custom_data_ == NULL) {
    custom_data_ = new ::game::base::BytesData;
  }
  // @@protoc_insertion_point(field_mutable:game.base.GetTablePlayersInfoResp.custom_data)
  return custom_data_;
}
inline void GetTablePlayersInfoResp::set_allocated_custom_data(::game::base::BytesData* custom_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete custom_data_;
  }
  if (custom_data) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      custom_data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, custom_data, submessage_arena);
    }
    set_has_custom_data();
  } else {
    clear_has_custom_data();
  }
  custom_data_ = custom_data;
  // @@protoc_insertion_point(field_set_allocated:game.base.GetTablePlayersInfoResp.custom_data)
}

// optional .game.base.BytesData hand = 5;
inline bool GetTablePlayersInfoResp::has_hand() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetTablePlayersInfoResp::set_has_hand() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetTablePlayersInfoResp::clear_has_hand() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetTablePlayersInfoResp::clear_hand() {
  if (hand_ != NULL) hand_->Clear();
  clear_has_hand();
}
inline const ::game::base::BytesData& GetTablePlayersInfoResp::hand() const {
  const ::game::base::BytesData* p = hand_;
  // @@protoc_insertion_point(field_get:game.base.GetTablePlayersInfoResp.hand)
  return p != NULL ? *p : *reinterpret_cast<const ::game::base::BytesData*>(
      &::game::base::_BytesData_default_instance_);
}
inline ::game::base::BytesData* GetTablePlayersInfoResp::release_hand() {
  // @@protoc_insertion_point(field_release:game.base.GetTablePlayersInfoResp.hand)
  clear_has_hand();
  ::game::base::BytesData* temp = hand_;
  hand_ = NULL;
  return temp;
}
inline ::game::base::BytesData* GetTablePlayersInfoResp::mutable_hand() {
  set_has_hand();
  if (hand_ == NULL) {
    hand_ = new ::game::base::BytesData;
  }
  // @@protoc_insertion_point(field_mutable:game.base.GetTablePlayersInfoResp.hand)
  return hand_;
}
inline void GetTablePlayersInfoResp::set_allocated_hand(::game::base::BytesData* hand) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete hand_;
  }
  if (hand) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      hand = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hand, submessage_arena);
    }
    set_has_hand();
  } else {
    clear_has_hand();
  }
  hand_ = hand;
  // @@protoc_insertion_point(field_set_allocated:game.base.GetTablePlayersInfoResp.hand)
}

// -------------------------------------------------------------------

// CountdownStartNotify

// optional int32 tableno = 1;
inline bool CountdownStartNotify::has_tableno() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CountdownStartNotify::set_has_tableno() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CountdownStartNotify::clear_has_tableno() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CountdownStartNotify::clear_tableno() {
  tableno_ = 0;
  clear_has_tableno();
}
inline ::google::protobuf::int32 CountdownStartNotify::tableno() const {
  // @@protoc_insertion_point(field_get:game.base.CountdownStartNotify.tableno)
  return tableno_;
}
inline void CountdownStartNotify::set_tableno(::google::protobuf::int32 value) {
  set_has_tableno();
  tableno_ = value;
  // @@protoc_insertion_point(field_set:game.base.CountdownStartNotify.tableno)
}

// optional int32 countdown_s = 2;
inline bool CountdownStartNotify::has_countdown_s() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CountdownStartNotify::set_has_countdown_s() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CountdownStartNotify::clear_has_countdown_s() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CountdownStartNotify::clear_countdown_s() {
  countdown_s_ = 0;
  clear_has_countdown_s();
}
inline ::google::protobuf::int32 CountdownStartNotify::countdown_s() const {
  // @@protoc_insertion_point(field_get:game.base.CountdownStartNotify.countdown_s)
  return countdown_s_;
}
inline void CountdownStartNotify::set_countdown_s(::google::protobuf::int32 value) {
  set_has_countdown_s();
  countdown_s_ = value;
  // @@protoc_insertion_point(field_set:game.base.CountdownStartNotify.countdown_s)
}

// -------------------------------------------------------------------

// CountdownStopNotify

// optional int32 tableno = 1;
inline bool CountdownStopNotify::has_tableno() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CountdownStopNotify::set_has_tableno() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CountdownStopNotify::clear_has_tableno() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CountdownStopNotify::clear_tableno() {
  tableno_ = 0;
  clear_has_tableno();
}
inline ::google::protobuf::int32 CountdownStopNotify::tableno() const {
  // @@protoc_insertion_point(field_get:game.base.CountdownStopNotify.tableno)
  return tableno_;
}
inline void CountdownStopNotify::set_tableno(::google::protobuf::int32 value) {
  set_has_tableno();
  tableno_ = value;
  // @@protoc_insertion_point(field_set:game.base.CountdownStopNotify.tableno)
}

// -------------------------------------------------------------------

// GameStartNotify

// optional int32 tableno = 1;
inline bool GameStartNotify::has_tableno() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameStartNotify::set_has_tableno() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameStartNotify::clear_has_tableno() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameStartNotify::clear_tableno() {
  tableno_ = 0;
  clear_has_tableno();
}
inline ::google::protobuf::int32 GameStartNotify::tableno() const {
  // @@protoc_insertion_point(field_get:game.base.GameStartNotify.tableno)
  return tableno_;
}
inline void GameStartNotify::set_tableno(::google::protobuf::int32 value) {
  set_has_tableno();
  tableno_ = value;
  // @@protoc_insertion_point(field_set:game.base.GameStartNotify.tableno)
}

// optional int32 flag = 2;
inline bool GameStartNotify::has_flag() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GameStartNotify::set_has_flag() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GameStartNotify::clear_has_flag() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GameStartNotify::clear_flag() {
  flag_ = 0;
  clear_has_flag();
}
inline ::google::protobuf::int32 GameStartNotify::flag() const {
  // @@protoc_insertion_point(field_get:game.base.GameStartNotify.flag)
  return flag_;
}
inline void GameStartNotify::set_flag(::google::protobuf::int32 value) {
  set_has_flag();
  flag_ = value;
  // @@protoc_insertion_point(field_set:game.base.GameStartNotify.flag)
}

// optional .game.base.BytesData custom_data = 3;
inline bool GameStartNotify::has_custom_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameStartNotify::set_has_custom_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameStartNotify::clear_has_custom_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameStartNotify::clear_custom_data() {
  if (custom_data_ != NULL) custom_data_->Clear();
  clear_has_custom_data();
}
inline const ::game::base::BytesData& GameStartNotify::custom_data() const {
  const ::game::base::BytesData* p = custom_data_;
  // @@protoc_insertion_point(field_get:game.base.GameStartNotify.custom_data)
  return p != NULL ? *p : *reinterpret_cast<const ::game::base::BytesData*>(
      &::game::base::_BytesData_default_instance_);
}
inline ::game::base::BytesData* GameStartNotify::release_custom_data() {
  // @@protoc_insertion_point(field_release:game.base.GameStartNotify.custom_data)
  clear_has_custom_data();
  ::game::base::BytesData* temp = custom_data_;
  custom_data_ = NULL;
  return temp;
}
inline ::game::base::BytesData* GameStartNotify::mutable_custom_data() {
  set_has_custom_data();
  if (custom_data_ == NULL) {
    custom_data_ = new ::game::base::BytesData;
  }
  // @@protoc_insertion_point(field_mutable:game.base.GameStartNotify.custom_data)
  return custom_data_;
}
inline void GameStartNotify::set_allocated_custom_data(::game::base::BytesData* custom_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete custom_data_;
  }
  if (custom_data) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      custom_data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, custom_data, submessage_arena);
    }
    set_has_custom_data();
  } else {
    clear_has_custom_data();
  }
  custom_data_ = custom_data;
  // @@protoc_insertion_point(field_set_allocated:game.base.GameStartNotify.custom_data)
}

// -------------------------------------------------------------------

// PlayerGiveupNotify

// optional int32 userid = 1;
inline bool PlayerGiveupNotify::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerGiveupNotify::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerGiveupNotify::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerGiveupNotify::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 PlayerGiveupNotify::userid() const {
  // @@protoc_insertion_point(field_get:game.base.PlayerGiveupNotify.userid)
  return userid_;
}
inline void PlayerGiveupNotify::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:game.base.PlayerGiveupNotify.userid)
}

// optional int32 chairno = 2;
inline bool PlayerGiveupNotify::has_chairno() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerGiveupNotify::set_has_chairno() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerGiveupNotify::clear_has_chairno() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerGiveupNotify::clear_chairno() {
  chairno_ = 0;
  clear_has_chairno();
}
inline ::google::protobuf::int32 PlayerGiveupNotify::chairno() const {
  // @@protoc_insertion_point(field_get:game.base.PlayerGiveupNotify.chairno)
  return chairno_;
}
inline void PlayerGiveupNotify::set_chairno(::google::protobuf::int32 value) {
  set_has_chairno();
  chairno_ = value;
  // @@protoc_insertion_point(field_set:game.base.PlayerGiveupNotify.chairno)
}

// optional int32 next_chair = 3;
inline bool PlayerGiveupNotify::has_next_chair() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerGiveupNotify::set_has_next_chair() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayerGiveupNotify::clear_has_next_chair() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayerGiveupNotify::clear_next_chair() {
  next_chair_ = 0;
  clear_has_next_chair();
}
inline ::google::protobuf::int32 PlayerGiveupNotify::next_chair() const {
  // @@protoc_insertion_point(field_get:game.base.PlayerGiveupNotify.next_chair)
  return next_chair_;
}
inline void PlayerGiveupNotify::set_next_chair(::google::protobuf::int32 value) {
  set_has_next_chair();
  next_chair_ = value;
  // @@protoc_insertion_point(field_set:game.base.PlayerGiveupNotify.next_chair)
}

// -------------------------------------------------------------------

// GameResultNotify

// optional int32 tableno = 1;
inline bool GameResultNotify::has_tableno() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameResultNotify::set_has_tableno() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameResultNotify::clear_has_tableno() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameResultNotify::clear_tableno() {
  tableno_ = 0;
  clear_has_tableno();
}
inline ::google::protobuf::int32 GameResultNotify::tableno() const {
  // @@protoc_insertion_point(field_get:game.base.GameResultNotify.tableno)
  return tableno_;
}
inline void GameResultNotify::set_tableno(::google::protobuf::int32 value) {
  set_has_tableno();
  tableno_ = value;
  // @@protoc_insertion_point(field_set:game.base.GameResultNotify.tableno)
}

// optional int32 bout_count = 2;
inline bool GameResultNotify::has_bout_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GameResultNotify::set_has_bout_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GameResultNotify::clear_has_bout_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GameResultNotify::clear_bout_count() {
  bout_count_ = 0;
  clear_has_bout_count();
}
inline ::google::protobuf::int32 GameResultNotify::bout_count() const {
  // @@protoc_insertion_point(field_get:game.base.GameResultNotify.bout_count)
  return bout_count_;
}
inline void GameResultNotify::set_bout_count(::google::protobuf::int32 value) {
  set_has_bout_count();
  bout_count_ = value;
  // @@protoc_insertion_point(field_set:game.base.GameResultNotify.bout_count)
}

// optional int32 banker_chair = 3;
inline bool GameResultNotify::has_banker_chair() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GameResultNotify::set_has_banker_chair() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GameResultNotify::clear_has_banker_chair() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GameResultNotify::clear_banker_chair() {
  banker_chair_ = 0;
  clear_has_banker_chair();
}
inline ::google::protobuf::int32 GameResultNotify::banker_chair() const {
  // @@protoc_insertion_point(field_get:game.base.GameResultNotify.banker_chair)
  return banker_chair_;
}
inline void GameResultNotify::set_banker_chair(::google::protobuf::int32 value) {
  set_has_banker_chair();
  banker_chair_ = value;
  // @@protoc_insertion_point(field_set:game.base.GameResultNotify.banker_chair)
}

// optional int64 base_deposit = 4;
inline bool GameResultNotify::has_base_deposit() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GameResultNotify::set_has_base_deposit() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GameResultNotify::clear_has_base_deposit() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GameResultNotify::clear_base_deposit() {
  base_deposit_ = GOOGLE_LONGLONG(0);
  clear_has_base_deposit();
}
inline ::google::protobuf::int64 GameResultNotify::base_deposit() const {
  // @@protoc_insertion_point(field_get:game.base.GameResultNotify.base_deposit)
  return base_deposit_;
}
inline void GameResultNotify::set_base_deposit(::google::protobuf::int64 value) {
  set_has_base_deposit();
  base_deposit_ = value;
  // @@protoc_insertion_point(field_set:game.base.GameResultNotify.base_deposit)
}

// repeated .game.base.UserResult user_results = 5;
inline int GameResultNotify::user_results_size() const {
  return user_results_.size();
}
inline void GameResultNotify::clear_user_results() {
  user_results_.Clear();
}
inline const ::game::base::UserResult& GameResultNotify::user_results(int index) const {
  // @@protoc_insertion_point(field_get:game.base.GameResultNotify.user_results)
  return user_results_.Get(index);
}
inline ::game::base::UserResult* GameResultNotify::mutable_user_results(int index) {
  // @@protoc_insertion_point(field_mutable:game.base.GameResultNotify.user_results)
  return user_results_.Mutable(index);
}
inline ::game::base::UserResult* GameResultNotify::add_user_results() {
  // @@protoc_insertion_point(field_add:game.base.GameResultNotify.user_results)
  return user_results_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::game::base::UserResult >*
GameResultNotify::mutable_user_results() {
  // @@protoc_insertion_point(field_mutable_list:game.base.GameResultNotify.user_results)
  return &user_results_;
}
inline const ::google::protobuf::RepeatedPtrField< ::game::base::UserResult >&
GameResultNotify::user_results() const {
  // @@protoc_insertion_point(field_list:game.base.GameResultNotify.user_results)
  return user_results_;
}

// optional .game.base.BytesData custom_data = 6;
inline bool GameResultNotify::has_custom_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameResultNotify::set_has_custom_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameResultNotify::clear_has_custom_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameResultNotify::clear_custom_data() {
  if (custom_data_ != NULL) custom_data_->Clear();
  clear_has_custom_data();
}
inline const ::game::base::BytesData& GameResultNotify::custom_data() const {
  const ::game::base::BytesData* p = custom_data_;
  // @@protoc_insertion_point(field_get:game.base.GameResultNotify.custom_data)
  return p != NULL ? *p : *reinterpret_cast<const ::game::base::BytesData*>(
      &::game::base::_BytesData_default_instance_);
}
inline ::game::base::BytesData* GameResultNotify::release_custom_data() {
  // @@protoc_insertion_point(field_release:game.base.GameResultNotify.custom_data)
  clear_has_custom_data();
  ::game::base::BytesData* temp = custom_data_;
  custom_data_ = NULL;
  return temp;
}
inline ::game::base::BytesData* GameResultNotify::mutable_custom_data() {
  set_has_custom_data();
  if (custom_data_ == NULL) {
    custom_data_ = new ::game::base::BytesData;
  }
  // @@protoc_insertion_point(field_mutable:game.base.GameResultNotify.custom_data)
  return custom_data_;
}
inline void GameResultNotify::set_allocated_custom_data(::game::base::BytesData* custom_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete custom_data_;
  }
  if (custom_data) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      custom_data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, custom_data, submessage_arena);
    }
    set_has_custom_data();
  } else {
    clear_has_custom_data();
  }
  custom_data_ = custom_data;
  // @@protoc_insertion_point(field_set_allocated:game.base.GameResultNotify.custom_data)
}

// -------------------------------------------------------------------

// UserSitDownNotify

// optional .game.base.User user = 1;
inline bool UserSitDownNotify::has_user() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserSitDownNotify::set_has_user() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserSitDownNotify::clear_has_user() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserSitDownNotify::clear_user() {
  if (user_ != NULL) user_->Clear();
  clear_has_user();
}
inline const ::game::base::User& UserSitDownNotify::user() const {
  const ::game::base::User* p = user_;
  // @@protoc_insertion_point(field_get:game.base.UserSitDownNotify.user)
  return p != NULL ? *p : *reinterpret_cast<const ::game::base::User*>(
      &::game::base::_User_default_instance_);
}
inline ::game::base::User* UserSitDownNotify::release_user() {
  // @@protoc_insertion_point(field_release:game.base.UserSitDownNotify.user)
  clear_has_user();
  ::game::base::User* temp = user_;
  user_ = NULL;
  return temp;
}
inline ::game::base::User* UserSitDownNotify::mutable_user() {
  set_has_user();
  if (user_ == NULL) {
    user_ = new ::game::base::User;
  }
  // @@protoc_insertion_point(field_mutable:game.base.UserSitDownNotify.user)
  return user_;
}
inline void UserSitDownNotify::set_allocated_user(::game::base::User* user) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete user_;
  }
  if (user) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      user = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    set_has_user();
  } else {
    clear_has_user();
  }
  user_ = user;
  // @@protoc_insertion_point(field_set_allocated:game.base.UserSitDownNotify.user)
}

// -------------------------------------------------------------------

// UserStandUpNotify

// optional int32 userid = 1;
inline bool UserStandUpNotify::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserStandUpNotify::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserStandUpNotify::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserStandUpNotify::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 UserStandUpNotify::userid() const {
  // @@protoc_insertion_point(field_get:game.base.UserStandUpNotify.userid)
  return userid_;
}
inline void UserStandUpNotify::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:game.base.UserStandUpNotify.userid)
}

// optional int32 chairno = 2;
inline bool UserStandUpNotify::has_chairno() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserStandUpNotify::set_has_chairno() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserStandUpNotify::clear_has_chairno() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserStandUpNotify::clear_chairno() {
  chairno_ = 0;
  clear_has_chairno();
}
inline ::google::protobuf::int32 UserStandUpNotify::chairno() const {
  // @@protoc_insertion_point(field_get:game.base.UserStandUpNotify.chairno)
  return chairno_;
}
inline void UserStandUpNotify::set_chairno(::google::protobuf::int32 value) {
  set_has_chairno();
  chairno_ = value;
  // @@protoc_insertion_point(field_set:game.base.UserStandUpNotify.chairno)
}

// -------------------------------------------------------------------

// UserLeaveNotify

// optional int32 userid = 1;
inline bool UserLeaveNotify::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserLeaveNotify::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserLeaveNotify::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserLeaveNotify::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 UserLeaveNotify::userid() const {
  // @@protoc_insertion_point(field_get:game.base.UserLeaveNotify.userid)
  return userid_;
}
inline void UserLeaveNotify::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:game.base.UserLeaveNotify.userid)
}

// optional int32 chairno = 2;
inline bool UserLeaveNotify::has_chairno() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserLeaveNotify::set_has_chairno() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserLeaveNotify::clear_has_chairno() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserLeaveNotify::clear_chairno() {
  chairno_ = 0;
  clear_has_chairno();
}
inline ::google::protobuf::int32 UserLeaveNotify::chairno() const {
  // @@protoc_insertion_point(field_get:game.base.UserLeaveNotify.chairno)
  return chairno_;
}
inline void UserLeaveNotify::set_chairno(::google::protobuf::int32 value) {
  set_has_chairno();
  chairno_ = value;
  // @@protoc_insertion_point(field_set:game.base.UserLeaveNotify.chairno)
}

// -------------------------------------------------------------------

// UserDepositChangeNotify

// optional int32 userid = 1;
inline bool UserDepositChangeNotify::has_userid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserDepositChangeNotify::set_has_userid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserDepositChangeNotify::clear_has_userid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserDepositChangeNotify::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 UserDepositChangeNotify::userid() const {
  // @@protoc_insertion_point(field_get:game.base.UserDepositChangeNotify.userid)
  return userid_;
}
inline void UserDepositChangeNotify::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:game.base.UserDepositChangeNotify.userid)
}

// optional int64 diff_deposit = 2;
inline bool UserDepositChangeNotify::has_diff_deposit() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserDepositChangeNotify::set_has_diff_deposit() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserDepositChangeNotify::clear_has_diff_deposit() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserDepositChangeNotify::clear_diff_deposit() {
  diff_deposit_ = GOOGLE_LONGLONG(0);
  clear_has_diff_deposit();
}
inline ::google::protobuf::int64 UserDepositChangeNotify::diff_deposit() const {
  // @@protoc_insertion_point(field_get:game.base.UserDepositChangeNotify.diff_deposit)
  return diff_deposit_;
}
inline void UserDepositChangeNotify::set_diff_deposit(::google::protobuf::int64 value) {
  set_has_diff_deposit();
  diff_deposit_ = value;
  // @@protoc_insertion_point(field_set:game.base.UserDepositChangeNotify.diff_deposit)
}

// optional int64 own_deposit = 3;
inline bool UserDepositChangeNotify::has_own_deposit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserDepositChangeNotify::set_has_own_deposit() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserDepositChangeNotify::clear_has_own_deposit() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserDepositChangeNotify::clear_own_deposit() {
  own_deposit_ = GOOGLE_LONGLONG(0);
  clear_has_own_deposit();
}
inline ::google::protobuf::int64 UserDepositChangeNotify::own_deposit() const {
  // @@protoc_insertion_point(field_get:game.base.UserDepositChangeNotify.own_deposit)
  return own_deposit_;
}
inline void UserDepositChangeNotify::set_own_deposit(::google::protobuf::int64 value) {
  set_has_own_deposit();
  own_deposit_ = value;
  // @@protoc_insertion_point(field_set:game.base.UserDepositChangeNotify.own_deposit)
}

// -------------------------------------------------------------------

// MallProduct

// optional int32 productid = 1;
inline bool MallProduct::has_productid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MallProduct::set_has_productid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MallProduct::clear_has_productid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MallProduct::clear_productid() {
  productid_ = 0;
  clear_has_productid();
}
inline ::google::protobuf::int32 MallProduct::productid() const {
  // @@protoc_insertion_point(field_get:game.base.MallProduct.productid)
  return productid_;
}
inline void MallProduct::set_productid(::google::protobuf::int32 value) {
  set_has_productid();
  productid_ = value;
  // @@protoc_insertion_point(field_set:game.base.MallProduct.productid)
}

// optional int32 currency = 2;
inline bool MallProduct::has_currency() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MallProduct::set_has_currency() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MallProduct::clear_has_currency() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MallProduct::clear_currency() {
  currency_ = 0;
  clear_has_currency();
}
inline ::google::protobuf::int32 MallProduct::currency() const {
  // @@protoc_insertion_point(field_get:game.base.MallProduct.currency)
  return currency_;
}
inline void MallProduct::set_currency(::google::protobuf::int32 value) {
  set_has_currency();
  currency_ = value;
  // @@protoc_insertion_point(field_set:game.base.MallProduct.currency)
}

// optional int64 price = 3;
inline bool MallProduct::has_price() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MallProduct::set_has_price() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MallProduct::clear_has_price() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MallProduct::clear_price() {
  price_ = GOOGLE_LONGLONG(0);
  clear_has_price();
}
inline ::google::protobuf::int64 MallProduct::price() const {
  // @@protoc_insertion_point(field_get:game.base.MallProduct.price)
  return price_;
}
inline void MallProduct::set_price(::google::protobuf::int64 value) {
  set_has_price();
  price_ = value;
  // @@protoc_insertion_point(field_set:game.base.MallProduct.price)
}

// optional string product_name = 4;
inline bool MallProduct::has_product_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MallProduct::set_has_product_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MallProduct::clear_has_product_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MallProduct::clear_product_name() {
  product_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_product_name();
}
inline const ::std::string& MallProduct::product_name() const {
  // @@protoc_insertion_point(field_get:game.base.MallProduct.product_name)
  return product_name_.GetNoArena();
}
inline void MallProduct::set_product_name(const ::std::string& value) {
  set_has_product_name();
  product_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:game.base.MallProduct.product_name)
}
#if LANG_CXX11
inline void MallProduct::set_product_name(::std::string&& value) {
  set_has_product_name();
  product_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:game.base.MallProduct.product_name)
}
#endif
inline void MallProduct::set_product_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_product_name();
  product_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:game.base.MallProduct.product_name)
}
inline void MallProduct::set_product_name(const char* value, size_t size) {
  set_has_product_name();
  product_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:game.base.MallProduct.product_name)
}
inline ::std::string* MallProduct::mutable_product_name() {
  set_has_product_name();
  // @@protoc_insertion_point(field_mutable:game.base.MallProduct.product_name)
  return product_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MallProduct::release_product_name() {
  // @@protoc_insertion_point(field_release:game.base.MallProduct.product_name)
  clear_has_product_name();
  return product_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MallProduct::set_allocated_product_name(::std::string* product_name) {
  if (product_name != NULL) {
    set_has_product_name();
  } else {
    clear_has_product_name();
  }
  product_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), product_name);
  // @@protoc_insertion_point(field_set_allocated:game.base.MallProduct.product_name)
}

// optional string product_code = 5;
inline bool MallProduct::has_product_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MallProduct::set_has_product_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MallProduct::clear_has_product_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MallProduct::clear_product_code() {
  product_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_product_code();
}
inline const ::std::string& MallProduct::product_code() const {
  // @@protoc_insertion_point(field_get:game.base.MallProduct.product_code)
  return product_code_.GetNoArena();
}
inline void MallProduct::set_product_code(const ::std::string& value) {
  set_has_product_code();
  product_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:game.base.MallProduct.product_code)
}
#if LANG_CXX11
inline void MallProduct::set_product_code(::std::string&& value) {
  set_has_product_code();
  product_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:game.base.MallProduct.product_code)
}
#endif
inline void MallProduct::set_product_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_product_code();
  product_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:game.base.MallProduct.product_code)
}
inline void MallProduct::set_product_code(const char* value, size_t size) {
  set_has_product_code();
  product_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:game.base.MallProduct.product_code)
}
inline ::std::string* MallProduct::mutable_product_code() {
  set_has_product_code();
  // @@protoc_insertion_point(field_mutable:game.base.MallProduct.product_code)
  return product_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MallProduct::release_product_code() {
  // @@protoc_insertion_point(field_release:game.base.MallProduct.product_code)
  clear_has_product_code();
  return product_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MallProduct::set_allocated_product_code(::std::string* product_code) {
  if (product_code != NULL) {
    set_has_product_code();
  } else {
    clear_has_product_code();
  }
  product_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), product_code);
  // @@protoc_insertion_point(field_set_allocated:game.base.MallProduct.product_code)
}

// optional int32 os_support = 6;
inline bool MallProduct::has_os_support() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MallProduct::set_has_os_support() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MallProduct::clear_has_os_support() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MallProduct::clear_os_support() {
  os_support_ = 0;
  clear_has_os_support();
}
inline ::google::protobuf::int32 MallProduct::os_support() const {
  // @@protoc_insertion_point(field_get:game.base.MallProduct.os_support)
  return os_support_;
}
inline void MallProduct::set_os_support(::google::protobuf::int32 value) {
  set_has_os_support();
  os_support_ = value;
  // @@protoc_insertion_point(field_set:game.base.MallProduct.os_support)
}

// -------------------------------------------------------------------

// GetMallProductsReq

// optional int32 userid = 1;
inline bool GetMallProductsReq::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetMallProductsReq::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetMallProductsReq::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetMallProductsReq::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 GetMallProductsReq::userid() const {
  // @@protoc_insertion_point(field_get:game.base.GetMallProductsReq.userid)
  return userid_;
}
inline void GetMallProductsReq::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:game.base.GetMallProductsReq.userid)
}

// optional int32 os = 2;
inline bool GetMallProductsReq::has_os() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetMallProductsReq::set_has_os() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetMallProductsReq::clear_has_os() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetMallProductsReq::clear_os() {
  os_ = 0;
  clear_has_os();
}
inline ::google::protobuf::int32 GetMallProductsReq::os() const {
  // @@protoc_insertion_point(field_get:game.base.GetMallProductsReq.os)
  return os_;
}
inline void GetMallProductsReq::set_os(::google::protobuf::int32 value) {
  set_has_os();
  os_ = value;
  // @@protoc_insertion_point(field_set:game.base.GetMallProductsReq.os)
}

// -------------------------------------------------------------------

// GetMallProductsResp

// optional int32 code = 1;
inline bool GetMallProductsResp::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetMallProductsResp::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetMallProductsResp::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetMallProductsResp::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 GetMallProductsResp::code() const {
  // @@protoc_insertion_point(field_get:game.base.GetMallProductsResp.code)
  return code_;
}
inline void GetMallProductsResp::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:game.base.GetMallProductsResp.code)
}

// repeated .game.base.MallProduct product = 2;
inline int GetMallProductsResp::product_size() const {
  return product_.size();
}
inline void GetMallProductsResp::clear_product() {
  product_.Clear();
}
inline const ::game::base::MallProduct& GetMallProductsResp::product(int index) const {
  // @@protoc_insertion_point(field_get:game.base.GetMallProductsResp.product)
  return product_.Get(index);
}
inline ::game::base::MallProduct* GetMallProductsResp::mutable_product(int index) {
  // @@protoc_insertion_point(field_mutable:game.base.GetMallProductsResp.product)
  return product_.Mutable(index);
}
inline ::game::base::MallProduct* GetMallProductsResp::add_product() {
  // @@protoc_insertion_point(field_add:game.base.GetMallProductsResp.product)
  return product_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::game::base::MallProduct >*
GetMallProductsResp::mutable_product() {
  // @@protoc_insertion_point(field_mutable_list:game.base.GetMallProductsResp.product)
  return &product_;
}
inline const ::google::protobuf::RepeatedPtrField< ::game::base::MallProduct >&
GetMallProductsResp::product() const {
  // @@protoc_insertion_point(field_list:game.base.GetMallProductsResp.product)
  return product_;
}

// -------------------------------------------------------------------

// MallShopingReq

// optional int32 userid = 1;
inline bool MallShopingReq::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MallShopingReq::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MallShopingReq::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MallShopingReq::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 MallShopingReq::userid() const {
  // @@protoc_insertion_point(field_get:game.base.MallShopingReq.userid)
  return userid_;
}
inline void MallShopingReq::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:game.base.MallShopingReq.userid)
}

// optional int32 productid = 2;
inline bool MallShopingReq::has_productid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MallShopingReq::set_has_productid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MallShopingReq::clear_has_productid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MallShopingReq::clear_productid() {
  productid_ = 0;
  clear_has_productid();
}
inline ::google::protobuf::int32 MallShopingReq::productid() const {
  // @@protoc_insertion_point(field_get:game.base.MallShopingReq.productid)
  return productid_;
}
inline void MallShopingReq::set_productid(::google::protobuf::int32 value) {
  set_has_productid();
  productid_ = value;
  // @@protoc_insertion_point(field_set:game.base.MallShopingReq.productid)
}

// optional int32 count = 3;
inline bool MallShopingReq::has_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MallShopingReq::set_has_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MallShopingReq::clear_has_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MallShopingReq::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 MallShopingReq::count() const {
  // @@protoc_insertion_point(field_get:game.base.MallShopingReq.count)
  return count_;
}
inline void MallShopingReq::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:game.base.MallShopingReq.count)
}

// -------------------------------------------------------------------

// MallShopingResp

// optional int32 code = 1;
inline bool MallShopingResp::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MallShopingResp::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MallShopingResp::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MallShopingResp::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 MallShopingResp::code() const {
  // @@protoc_insertion_point(field_get:game.base.MallShopingResp.code)
  return code_;
}
inline void MallShopingResp::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:game.base.MallShopingResp.code)
}

// optional int32 currency = 2;
inline bool MallShopingResp::has_currency() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MallShopingResp::set_has_currency() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MallShopingResp::clear_has_currency() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MallShopingResp::clear_currency() {
  currency_ = 0;
  clear_has_currency();
}
inline ::google::protobuf::int32 MallShopingResp::currency() const {
  // @@protoc_insertion_point(field_get:game.base.MallShopingResp.currency)
  return currency_;
}
inline void MallShopingResp::set_currency(::google::protobuf::int32 value) {
  set_has_currency();
  currency_ = value;
  // @@protoc_insertion_point(field_set:game.base.MallShopingResp.currency)
}

// optional int32 cost = 3;
inline bool MallShopingResp::has_cost() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MallShopingResp::set_has_cost() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MallShopingResp::clear_has_cost() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MallShopingResp::clear_cost() {
  cost_ = 0;
  clear_has_cost();
}
inline ::google::protobuf::int32 MallShopingResp::cost() const {
  // @@protoc_insertion_point(field_get:game.base.MallShopingResp.cost)
  return cost_;
}
inline void MallShopingResp::set_cost(::google::protobuf::int32 value) {
  set_has_cost();
  cost_ = value;
  // @@protoc_insertion_point(field_set:game.base.MallShopingResp.cost)
}

// -------------------------------------------------------------------

// RobotSvrValidateReq

// optional int32 client_id = 1;
inline bool RobotSvrValidateReq::has_client_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RobotSvrValidateReq::set_has_client_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RobotSvrValidateReq::clear_has_client_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RobotSvrValidateReq::clear_client_id() {
  client_id_ = 0;
  clear_has_client_id();
}
inline ::google::protobuf::int32 RobotSvrValidateReq::client_id() const {
  // @@protoc_insertion_point(field_get:game.base.RobotSvrValidateReq.client_id)
  return client_id_;
}
inline void RobotSvrValidateReq::set_client_id(::google::protobuf::int32 value) {
  set_has_client_id();
  client_id_ = value;
  // @@protoc_insertion_point(field_set:game.base.RobotSvrValidateReq.client_id)
}

// -------------------------------------------------------------------

// RobotSvrValidateResp

// optional int32 code = 1;
inline bool RobotSvrValidateResp::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RobotSvrValidateResp::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RobotSvrValidateResp::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RobotSvrValidateResp::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 RobotSvrValidateResp::code() const {
  // @@protoc_insertion_point(field_get:game.base.RobotSvrValidateResp.code)
  return code_;
}
inline void RobotSvrValidateResp::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:game.base.RobotSvrValidateResp.code)
}

// -------------------------------------------------------------------

// GetGameUsersReq

// optional int32 clientid = 1;
inline bool GetGameUsersReq::has_clientid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetGameUsersReq::set_has_clientid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetGameUsersReq::clear_has_clientid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetGameUsersReq::clear_clientid() {
  clientid_ = 0;
  clear_has_clientid();
}
inline ::google::protobuf::int32 GetGameUsersReq::clientid() const {
  // @@protoc_insertion_point(field_get:game.base.GetGameUsersReq.clientid)
  return clientid_;
}
inline void GetGameUsersReq::set_clientid(::google::protobuf::int32 value) {
  set_has_clientid();
  clientid_ = value;
  // @@protoc_insertion_point(field_set:game.base.GetGameUsersReq.clientid)
}

// optional int32 roomid = 2;
inline bool GetGameUsersReq::has_roomid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetGameUsersReq::set_has_roomid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetGameUsersReq::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetGameUsersReq::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
inline ::google::protobuf::int32 GetGameUsersReq::roomid() const {
  // @@protoc_insertion_point(field_get:game.base.GetGameUsersReq.roomid)
  return roomid_;
}
inline void GetGameUsersReq::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:game.base.GetGameUsersReq.roomid)
}

// -------------------------------------------------------------------

// GetGameUsersResp

// optional int32 code = 1;
inline bool GetGameUsersResp::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetGameUsersResp::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetGameUsersResp::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetGameUsersResp::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 GetGameUsersResp::code() const {
  // @@protoc_insertion_point(field_get:game.base.GetGameUsersResp.code)
  return code_;
}
inline void GetGameUsersResp::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:game.base.GetGameUsersResp.code)
}

// repeated .game.base.Room rooms = 2;
inline int GetGameUsersResp::rooms_size() const {
  return rooms_.size();
}
inline void GetGameUsersResp::clear_rooms() {
  rooms_.Clear();
}
inline const ::game::base::Room& GetGameUsersResp::rooms(int index) const {
  // @@protoc_insertion_point(field_get:game.base.GetGameUsersResp.rooms)
  return rooms_.Get(index);
}
inline ::game::base::Room* GetGameUsersResp::mutable_rooms(int index) {
  // @@protoc_insertion_point(field_mutable:game.base.GetGameUsersResp.rooms)
  return rooms_.Mutable(index);
}
inline ::game::base::Room* GetGameUsersResp::add_rooms() {
  // @@protoc_insertion_point(field_add:game.base.GetGameUsersResp.rooms)
  return rooms_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::game::base::Room >*
GetGameUsersResp::mutable_rooms() {
  // @@protoc_insertion_point(field_mutable_list:game.base.GetGameUsersResp.rooms)
  return &rooms_;
}
inline const ::google::protobuf::RepeatedPtrField< ::game::base::Room >&
GetGameUsersResp::rooms() const {
  // @@protoc_insertion_point(field_list:game.base.GetGameUsersResp.rooms)
  return rooms_;
}

// repeated .game.base.User users = 3;
inline int GetGameUsersResp::users_size() const {
  return users_.size();
}
inline void GetGameUsersResp::clear_users() {
  users_.Clear();
}
inline const ::game::base::User& GetGameUsersResp::users(int index) const {
  // @@protoc_insertion_point(field_get:game.base.GetGameUsersResp.users)
  return users_.Get(index);
}
inline ::game::base::User* GetGameUsersResp::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:game.base.GetGameUsersResp.users)
  return users_.Mutable(index);
}
inline ::game::base::User* GetGameUsersResp::add_users() {
  // @@protoc_insertion_point(field_add:game.base.GetGameUsersResp.users)
  return users_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::game::base::User >*
GetGameUsersResp::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:game.base.GetGameUsersResp.users)
  return &users_;
}
inline const ::google::protobuf::RepeatedPtrField< ::game::base::User >&
GetGameUsersResp::users() const {
  // @@protoc_insertion_point(field_list:game.base.GetGameUsersResp.users)
  return users_;
}

// -------------------------------------------------------------------

// RS_UserEnterGameNotify

// optional .game.base.User user = 1;
inline bool RS_UserEnterGameNotify::has_user() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RS_UserEnterGameNotify::set_has_user() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RS_UserEnterGameNotify::clear_has_user() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RS_UserEnterGameNotify::clear_user() {
  if (user_ != NULL) user_->Clear();
  clear_has_user();
}
inline const ::game::base::User& RS_UserEnterGameNotify::user() const {
  const ::game::base::User* p = user_;
  // @@protoc_insertion_point(field_get:game.base.RS_UserEnterGameNotify.user)
  return p != NULL ? *p : *reinterpret_cast<const ::game::base::User*>(
      &::game::base::_User_default_instance_);
}
inline ::game::base::User* RS_UserEnterGameNotify::release_user() {
  // @@protoc_insertion_point(field_release:game.base.RS_UserEnterGameNotify.user)
  clear_has_user();
  ::game::base::User* temp = user_;
  user_ = NULL;
  return temp;
}
inline ::game::base::User* RS_UserEnterGameNotify::mutable_user() {
  set_has_user();
  if (user_ == NULL) {
    user_ = new ::game::base::User;
  }
  // @@protoc_insertion_point(field_mutable:game.base.RS_UserEnterGameNotify.user)
  return user_;
}
inline void RS_UserEnterGameNotify::set_allocated_user(::game::base::User* user) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete user_;
  }
  if (user) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      user = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    set_has_user();
  } else {
    clear_has_user();
  }
  user_ = user;
  // @@protoc_insertion_point(field_set_allocated:game.base.RS_UserEnterGameNotify.user)
}

// optional .game.base.RoomData room_data = 2;
inline bool RS_UserEnterGameNotify::has_room_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RS_UserEnterGameNotify::set_has_room_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RS_UserEnterGameNotify::clear_has_room_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RS_UserEnterGameNotify::clear_room_data() {
  if (room_data_ != NULL) room_data_->Clear();
  clear_has_room_data();
}
inline const ::game::base::RoomData& RS_UserEnterGameNotify::room_data() const {
  const ::game::base::RoomData* p = room_data_;
  // @@protoc_insertion_point(field_get:game.base.RS_UserEnterGameNotify.room_data)
  return p != NULL ? *p : *reinterpret_cast<const ::game::base::RoomData*>(
      &::game::base::_RoomData_default_instance_);
}
inline ::game::base::RoomData* RS_UserEnterGameNotify::release_room_data() {
  // @@protoc_insertion_point(field_release:game.base.RS_UserEnterGameNotify.room_data)
  clear_has_room_data();
  ::game::base::RoomData* temp = room_data_;
  room_data_ = NULL;
  return temp;
}
inline ::game::base::RoomData* RS_UserEnterGameNotify::mutable_room_data() {
  set_has_room_data();
  if (room_data_ == NULL) {
    room_data_ = new ::game::base::RoomData;
  }
  // @@protoc_insertion_point(field_mutable:game.base.RS_UserEnterGameNotify.room_data)
  return room_data_;
}
inline void RS_UserEnterGameNotify::set_allocated_room_data(::game::base::RoomData* room_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete room_data_;
  }
  if (room_data) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      room_data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, room_data, submessage_arena);
    }
    set_has_room_data();
  } else {
    clear_has_room_data();
  }
  room_data_ = room_data;
  // @@protoc_insertion_point(field_set_allocated:game.base.RS_UserEnterGameNotify.room_data)
}

// optional int64 min_deposit = 3;
inline bool RS_UserEnterGameNotify::has_min_deposit() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RS_UserEnterGameNotify::set_has_min_deposit() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RS_UserEnterGameNotify::clear_has_min_deposit() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RS_UserEnterGameNotify::clear_min_deposit() {
  min_deposit_ = GOOGLE_LONGLONG(0);
  clear_has_min_deposit();
}
inline ::google::protobuf::int64 RS_UserEnterGameNotify::min_deposit() const {
  // @@protoc_insertion_point(field_get:game.base.RS_UserEnterGameNotify.min_deposit)
  return min_deposit_;
}
inline void RS_UserEnterGameNotify::set_min_deposit(::google::protobuf::int64 value) {
  set_has_min_deposit();
  min_deposit_ = value;
  // @@protoc_insertion_point(field_set:game.base.RS_UserEnterGameNotify.min_deposit)
}

// optional int64 max_deposit = 4;
inline bool RS_UserEnterGameNotify::has_max_deposit() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RS_UserEnterGameNotify::set_has_max_deposit() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RS_UserEnterGameNotify::clear_has_max_deposit() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RS_UserEnterGameNotify::clear_max_deposit() {
  max_deposit_ = GOOGLE_LONGLONG(0);
  clear_has_max_deposit();
}
inline ::google::protobuf::int64 RS_UserEnterGameNotify::max_deposit() const {
  // @@protoc_insertion_point(field_get:game.base.RS_UserEnterGameNotify.max_deposit)
  return max_deposit_;
}
inline void RS_UserEnterGameNotify::set_max_deposit(::google::protobuf::int64 value) {
  set_has_max_deposit();
  max_deposit_ = value;
  // @@protoc_insertion_point(field_set:game.base.RS_UserEnterGameNotify.max_deposit)
}

// optional int64 base_deposit = 5;
inline bool RS_UserEnterGameNotify::has_base_deposit() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RS_UserEnterGameNotify::set_has_base_deposit() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RS_UserEnterGameNotify::clear_has_base_deposit() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RS_UserEnterGameNotify::clear_base_deposit() {
  base_deposit_ = GOOGLE_LONGLONG(0);
  clear_has_base_deposit();
}
inline ::google::protobuf::int64 RS_UserEnterGameNotify::base_deposit() const {
  // @@protoc_insertion_point(field_get:game.base.RS_UserEnterGameNotify.base_deposit)
  return base_deposit_;
}
inline void RS_UserEnterGameNotify::set_base_deposit(::google::protobuf::int64 value) {
  set_has_base_deposit();
  base_deposit_ = value;
  // @@protoc_insertion_point(field_set:game.base.RS_UserEnterGameNotify.base_deposit)
}

// -------------------------------------------------------------------

// RS_SwitchLookerPlayerNotify

// optional int32 userid = 1;
inline bool RS_SwitchLookerPlayerNotify::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RS_SwitchLookerPlayerNotify::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RS_SwitchLookerPlayerNotify::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RS_SwitchLookerPlayerNotify::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 RS_SwitchLookerPlayerNotify::userid() const {
  // @@protoc_insertion_point(field_get:game.base.RS_SwitchLookerPlayerNotify.userid)
  return userid_;
}
inline void RS_SwitchLookerPlayerNotify::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:game.base.RS_SwitchLookerPlayerNotify.userid)
}

// optional int32 roomid = 2;
inline bool RS_SwitchLookerPlayerNotify::has_roomid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RS_SwitchLookerPlayerNotify::set_has_roomid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RS_SwitchLookerPlayerNotify::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RS_SwitchLookerPlayerNotify::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
inline ::google::protobuf::int32 RS_SwitchLookerPlayerNotify::roomid() const {
  // @@protoc_insertion_point(field_get:game.base.RS_SwitchLookerPlayerNotify.roomid)
  return roomid_;
}
inline void RS_SwitchLookerPlayerNotify::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:game.base.RS_SwitchLookerPlayerNotify.roomid)
}

// optional int32 tableno = 3;
inline bool RS_SwitchLookerPlayerNotify::has_tableno() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RS_SwitchLookerPlayerNotify::set_has_tableno() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RS_SwitchLookerPlayerNotify::clear_has_tableno() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RS_SwitchLookerPlayerNotify::clear_tableno() {
  tableno_ = 0;
  clear_has_tableno();
}
inline ::google::protobuf::int32 RS_SwitchLookerPlayerNotify::tableno() const {
  // @@protoc_insertion_point(field_get:game.base.RS_SwitchLookerPlayerNotify.tableno)
  return tableno_;
}
inline void RS_SwitchLookerPlayerNotify::set_tableno(::google::protobuf::int32 value) {
  set_has_tableno();
  tableno_ = value;
  // @@protoc_insertion_point(field_set:game.base.RS_SwitchLookerPlayerNotify.tableno)
}

// optional int32 chairno = 4;
inline bool RS_SwitchLookerPlayerNotify::has_chairno() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RS_SwitchLookerPlayerNotify::set_has_chairno() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RS_SwitchLookerPlayerNotify::clear_has_chairno() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RS_SwitchLookerPlayerNotify::clear_chairno() {
  chairno_ = 0;
  clear_has_chairno();
}
inline ::google::protobuf::int32 RS_SwitchLookerPlayerNotify::chairno() const {
  // @@protoc_insertion_point(field_get:game.base.RS_SwitchLookerPlayerNotify.chairno)
  return chairno_;
}
inline void RS_SwitchLookerPlayerNotify::set_chairno(::google::protobuf::int32 value) {
  set_has_chairno();
  chairno_ = value;
  // @@protoc_insertion_point(field_set:game.base.RS_SwitchLookerPlayerNotify.chairno)
}

// -------------------------------------------------------------------

// RS_StartGameNotify

// optional int32 roomid = 1;
inline bool RS_StartGameNotify::has_roomid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RS_StartGameNotify::set_has_roomid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RS_StartGameNotify::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RS_StartGameNotify::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
inline ::google::protobuf::int32 RS_StartGameNotify::roomid() const {
  // @@protoc_insertion_point(field_get:game.base.RS_StartGameNotify.roomid)
  return roomid_;
}
inline void RS_StartGameNotify::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:game.base.RS_StartGameNotify.roomid)
}

// optional int32 tableno = 2;
inline bool RS_StartGameNotify::has_tableno() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RS_StartGameNotify::set_has_tableno() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RS_StartGameNotify::clear_has_tableno() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RS_StartGameNotify::clear_tableno() {
  tableno_ = 0;
  clear_has_tableno();
}
inline ::google::protobuf::int32 RS_StartGameNotify::tableno() const {
  // @@protoc_insertion_point(field_get:game.base.RS_StartGameNotify.tableno)
  return tableno_;
}
inline void RS_StartGameNotify::set_tableno(::google::protobuf::int32 value) {
  set_has_tableno();
  tableno_ = value;
  // @@protoc_insertion_point(field_set:game.base.RS_StartGameNotify.tableno)
}

// repeated .game.base.ChairInfo chairs = 3;
inline int RS_StartGameNotify::chairs_size() const {
  return chairs_.size();
}
inline void RS_StartGameNotify::clear_chairs() {
  chairs_.Clear();
}
inline const ::game::base::ChairInfo& RS_StartGameNotify::chairs(int index) const {
  // @@protoc_insertion_point(field_get:game.base.RS_StartGameNotify.chairs)
  return chairs_.Get(index);
}
inline ::game::base::ChairInfo* RS_StartGameNotify::mutable_chairs(int index) {
  // @@protoc_insertion_point(field_mutable:game.base.RS_StartGameNotify.chairs)
  return chairs_.Mutable(index);
}
inline ::game::base::ChairInfo* RS_StartGameNotify::add_chairs() {
  // @@protoc_insertion_point(field_add:game.base.RS_StartGameNotify.chairs)
  return chairs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::game::base::ChairInfo >*
RS_StartGameNotify::mutable_chairs() {
  // @@protoc_insertion_point(field_mutable_list:game.base.RS_StartGameNotify.chairs)
  return &chairs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::game::base::ChairInfo >&
RS_StartGameNotify::chairs() const {
  // @@protoc_insertion_point(field_list:game.base.RS_StartGameNotify.chairs)
  return chairs_;
}

// -------------------------------------------------------------------

// RS_UserRefreshResultNotify

// optional int32 userid = 1;
inline bool RS_UserRefreshResultNotify::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RS_UserRefreshResultNotify::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RS_UserRefreshResultNotify::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RS_UserRefreshResultNotify::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 RS_UserRefreshResultNotify::userid() const {
  // @@protoc_insertion_point(field_get:game.base.RS_UserRefreshResultNotify.userid)
  return userid_;
}
inline void RS_UserRefreshResultNotify::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:game.base.RS_UserRefreshResultNotify.userid)
}

// optional int32 roomid = 2;
inline bool RS_UserRefreshResultNotify::has_roomid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RS_UserRefreshResultNotify::set_has_roomid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RS_UserRefreshResultNotify::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RS_UserRefreshResultNotify::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
inline ::google::protobuf::int32 RS_UserRefreshResultNotify::roomid() const {
  // @@protoc_insertion_point(field_get:game.base.RS_UserRefreshResultNotify.roomid)
  return roomid_;
}
inline void RS_UserRefreshResultNotify::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:game.base.RS_UserRefreshResultNotify.roomid)
}

// optional int32 tableno = 3;
inline bool RS_UserRefreshResultNotify::has_tableno() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RS_UserRefreshResultNotify::set_has_tableno() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RS_UserRefreshResultNotify::clear_has_tableno() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RS_UserRefreshResultNotify::clear_tableno() {
  tableno_ = 0;
  clear_has_tableno();
}
inline ::google::protobuf::int32 RS_UserRefreshResultNotify::tableno() const {
  // @@protoc_insertion_point(field_get:game.base.RS_UserRefreshResultNotify.tableno)
  return tableno_;
}
inline void RS_UserRefreshResultNotify::set_tableno(::google::protobuf::int32 value) {
  set_has_tableno();
  tableno_ = value;
  // @@protoc_insertion_point(field_set:game.base.RS_UserRefreshResultNotify.tableno)
}

// optional int32 chairno = 4;
inline bool RS_UserRefreshResultNotify::has_chairno() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RS_UserRefreshResultNotify::set_has_chairno() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RS_UserRefreshResultNotify::clear_has_chairno() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RS_UserRefreshResultNotify::clear_chairno() {
  chairno_ = 0;
  clear_has_chairno();
}
inline ::google::protobuf::int32 RS_UserRefreshResultNotify::chairno() const {
  // @@protoc_insertion_point(field_get:game.base.RS_UserRefreshResultNotify.chairno)
  return chairno_;
}
inline void RS_UserRefreshResultNotify::set_chairno(::google::protobuf::int32 value) {
  set_has_chairno();
  chairno_ = value;
  // @@protoc_insertion_point(field_set:game.base.RS_UserRefreshResultNotify.chairno)
}

// -------------------------------------------------------------------

// RS_RefreshResultNotify

// optional int32 roomid = 1;
inline bool RS_RefreshResultNotify::has_roomid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RS_RefreshResultNotify::set_has_roomid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RS_RefreshResultNotify::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RS_RefreshResultNotify::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
inline ::google::protobuf::int32 RS_RefreshResultNotify::roomid() const {
  // @@protoc_insertion_point(field_get:game.base.RS_RefreshResultNotify.roomid)
  return roomid_;
}
inline void RS_RefreshResultNotify::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:game.base.RS_RefreshResultNotify.roomid)
}

// optional int32 tableno = 2;
inline bool RS_RefreshResultNotify::has_tableno() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RS_RefreshResultNotify::set_has_tableno() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RS_RefreshResultNotify::clear_has_tableno() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RS_RefreshResultNotify::clear_tableno() {
  tableno_ = 0;
  clear_has_tableno();
}
inline ::google::protobuf::int32 RS_RefreshResultNotify::tableno() const {
  // @@protoc_insertion_point(field_get:game.base.RS_RefreshResultNotify.tableno)
  return tableno_;
}
inline void RS_RefreshResultNotify::set_tableno(::google::protobuf::int32 value) {
  set_has_tableno();
  tableno_ = value;
  // @@protoc_insertion_point(field_set:game.base.RS_RefreshResultNotify.tableno)
}

// -------------------------------------------------------------------

// RS_UserLeaveGameNotify

// optional .game.base.User user = 1;
inline bool RS_UserLeaveGameNotify::has_user() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RS_UserLeaveGameNotify::set_has_user() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RS_UserLeaveGameNotify::clear_has_user() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RS_UserLeaveGameNotify::clear_user() {
  if (user_ != NULL) user_->Clear();
  clear_has_user();
}
inline const ::game::base::User& RS_UserLeaveGameNotify::user() const {
  const ::game::base::User* p = user_;
  // @@protoc_insertion_point(field_get:game.base.RS_UserLeaveGameNotify.user)
  return p != NULL ? *p : *reinterpret_cast<const ::game::base::User*>(
      &::game::base::_User_default_instance_);
}
inline ::game::base::User* RS_UserLeaveGameNotify::release_user() {
  // @@protoc_insertion_point(field_release:game.base.RS_UserLeaveGameNotify.user)
  clear_has_user();
  ::game::base::User* temp = user_;
  user_ = NULL;
  return temp;
}
inline ::game::base::User* RS_UserLeaveGameNotify::mutable_user() {
  set_has_user();
  if (user_ == NULL) {
    user_ = new ::game::base::User;
  }
  // @@protoc_insertion_point(field_mutable:game.base.RS_UserLeaveGameNotify.user)
  return user_;
}
inline void RS_UserLeaveGameNotify::set_allocated_user(::game::base::User* user) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete user_;
  }
  if (user) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      user = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    set_has_user();
  } else {
    clear_has_user();
  }
  user_ = user;
  // @@protoc_insertion_point(field_set_allocated:game.base.RS_UserLeaveGameNotify.user)
}

// -------------------------------------------------------------------

// RS_SwitchTableNotify

// optional int32 userid = 1;
inline bool RS_SwitchTableNotify::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RS_SwitchTableNotify::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RS_SwitchTableNotify::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RS_SwitchTableNotify::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 RS_SwitchTableNotify::userid() const {
  // @@protoc_insertion_point(field_get:game.base.RS_SwitchTableNotify.userid)
  return userid_;
}
inline void RS_SwitchTableNotify::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:game.base.RS_SwitchTableNotify.userid)
}

// optional int32 roomid = 2;
inline bool RS_SwitchTableNotify::has_roomid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RS_SwitchTableNotify::set_has_roomid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RS_SwitchTableNotify::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RS_SwitchTableNotify::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
inline ::google::protobuf::int32 RS_SwitchTableNotify::roomid() const {
  // @@protoc_insertion_point(field_get:game.base.RS_SwitchTableNotify.roomid)
  return roomid_;
}
inline void RS_SwitchTableNotify::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:game.base.RS_SwitchTableNotify.roomid)
}

// optional int32 old_tableno = 3;
inline bool RS_SwitchTableNotify::has_old_tableno() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RS_SwitchTableNotify::set_has_old_tableno() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RS_SwitchTableNotify::clear_has_old_tableno() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RS_SwitchTableNotify::clear_old_tableno() {
  old_tableno_ = 0;
  clear_has_old_tableno();
}
inline ::google::protobuf::int32 RS_SwitchTableNotify::old_tableno() const {
  // @@protoc_insertion_point(field_get:game.base.RS_SwitchTableNotify.old_tableno)
  return old_tableno_;
}
inline void RS_SwitchTableNotify::set_old_tableno(::google::protobuf::int32 value) {
  set_has_old_tableno();
  old_tableno_ = value;
  // @@protoc_insertion_point(field_set:game.base.RS_SwitchTableNotify.old_tableno)
}

// optional int32 new_tableno = 4;
inline bool RS_SwitchTableNotify::has_new_tableno() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RS_SwitchTableNotify::set_has_new_tableno() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RS_SwitchTableNotify::clear_has_new_tableno() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RS_SwitchTableNotify::clear_new_tableno() {
  new_tableno_ = 0;
  clear_has_new_tableno();
}
inline ::google::protobuf::int32 RS_SwitchTableNotify::new_tableno() const {
  // @@protoc_insertion_point(field_get:game.base.RS_SwitchTableNotify.new_tableno)
  return new_tableno_;
}
inline void RS_SwitchTableNotify::set_new_tableno(::google::protobuf::int32 value) {
  set_has_new_tableno();
  new_tableno_ = value;
  // @@protoc_insertion_point(field_set:game.base.RS_SwitchTableNotify.new_tableno)
}

// optional int32 new_chairno = 5;
inline bool RS_SwitchTableNotify::has_new_chairno() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RS_SwitchTableNotify::set_has_new_chairno() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RS_SwitchTableNotify::clear_has_new_chairno() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RS_SwitchTableNotify::clear_new_chairno() {
  new_chairno_ = 0;
  clear_has_new_chairno();
}
inline ::google::protobuf::int32 RS_SwitchTableNotify::new_chairno() const {
  // @@protoc_insertion_point(field_get:game.base.RS_SwitchTableNotify.new_chairno)
  return new_chairno_;
}
inline void RS_SwitchTableNotify::set_new_chairno(::google::protobuf::int32 value) {
  set_has_new_chairno();
  new_chairno_ = value;
  // @@protoc_insertion_point(field_set:game.base.RS_SwitchTableNotify.new_chairno)
}

// -------------------------------------------------------------------

// RS_NewRoomNotify

// optional .game.base.Room room = 1;
inline bool RS_NewRoomNotify::has_room() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RS_NewRoomNotify::set_has_room() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RS_NewRoomNotify::clear_has_room() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RS_NewRoomNotify::clear_room() {
  if (room_ != NULL) room_->Clear();
  clear_has_room();
}
inline const ::game::base::Room& RS_NewRoomNotify::room() const {
  const ::game::base::Room* p = room_;
  // @@protoc_insertion_point(field_get:game.base.RS_NewRoomNotify.room)
  return p != NULL ? *p : *reinterpret_cast<const ::game::base::Room*>(
      &::game::base::_Room_default_instance_);
}
inline ::game::base::Room* RS_NewRoomNotify::release_room() {
  // @@protoc_insertion_point(field_release:game.base.RS_NewRoomNotify.room)
  clear_has_room();
  ::game::base::Room* temp = room_;
  room_ = NULL;
  return temp;
}
inline ::game::base::Room* RS_NewRoomNotify::mutable_room() {
  set_has_room();
  if (room_ == NULL) {
    room_ = new ::game::base::Room;
  }
  // @@protoc_insertion_point(field_mutable:game.base.RS_NewRoomNotify.room)
  return room_;
}
inline void RS_NewRoomNotify::set_allocated_room(::game::base::Room* room) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete room_;
  }
  if (room) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      room = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, room, submessage_arena);
    }
    set_has_room();
  } else {
    clear_has_room();
  }
  room_ = room;
  // @@protoc_insertion_point(field_set_allocated:game.base.RS_NewRoomNotify.room)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace base
}  // namespace game

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_game_5fbase_2eproto__INCLUDED
