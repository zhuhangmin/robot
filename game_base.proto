syntax = "proto2";

package game.base;

//======================= 基本数据结构定义 =========================
message BytesData
{
	optional bytes data 			= 1;
	optional int32 data_len			= 2;
}

message RoomData
{
	optional int32 roomid		= 1;	
	optional int32 options		= 2;	
	optional int32 configs		= 3;	
	optional int32 manages		= 4;		
	optional int32 max_table_cout		= 5;	
	optional int32 chaircount_per_table	= 6;	
	optional int64 min_deposit	= 7;
	optional int64 max_deposit	= 8;
}

message User
{
	optional int32 userid		= 1;	
	optional int32 roomid		= 2;	
	optional int32 tableno		= 3;	
	optional int32 chairno		= 4;	
	optional int32 user_type	= 5;	
	optional int64 deposit		= 6;	
	optional int32 total_bout	= 7;	
	optional int32 offline_count	= 8;
	optional int32 enter_timestamp	= 9;
	
	optional string head_url	= 10;		// 头像url
	optional string hardid		= 11;		// 硬件信息
	optional string nick_name	= 12;		// 昵称
	//optional bytes hand		= 13;		// 手牌
}

message TableUserInfo
{
	optional int32 userid			= 1;			
	optional int32 offline_count	= 2;	// 断线次数
	optional int32 bout_count		= 3;	// 玩家在桌子上的对局次数
	optional int32 bind_timestamp	= 4;	// 玩家上桌的时间	
}

message ChairInfo
{
	optional int32 chairno			= 1;			
	optional int32 userid			= 2;
	optional int32 chair_status		= 3;	// 椅子状态
}

message Table
{
	optional int32 tableno		= 1;	
	optional int32 roomid		= 2;	
	optional int32 chair_count	= 3;	
	optional int32 banker_chair	= 4;	// 庄家椅子号	
	optional int64 min_deposit	= 5;	
	optional int64 max_deposit	= 6;	
	optional int64 base_deposit	= 7;	// 基础银
	optional int32 table_status	= 8;
	repeated ChairInfo chairs	= 9;	// 椅子信息
	repeated TableUserInfo table_users = 10;
}

message Room
{
	optional RoomData room_data = 1;
	repeated Table tables		= 2;
}

message UserResult
{
	optional int32 userid		= 1;	
	optional int32 chaino		= 2;	
	optional int64 old_deposit	= 3;	// 原有银子数		
	optional int64 diff_deposit = 4;	// 银子变化值
	optional int32 fee			= 5;	// 服务费
}

//======================= 业务数据结构定义 ==========================
message PulseReq
{
	optional int32 id			= 1;	// 客户端传userid，RobotSvr传clientid
}
message PulseResp
{
	optional int32 timestamp	= 1;	// 游戏服务启动时间
}

message EnterNormalGameReq
{
	optional int32 userid	= 1;
	optional int32 roomid	= 2;
	optional int32 flag 	= 3;			// 定义见EnterGameFlag
	optional int32 target 	= 4;			// 根据flag不同，target有不同的含义（userid\tableno等）
	optional string hardid	= 5;			// 硬件信息
}

// TODO:所有entergame使用相同的resp？
message EnterNormalGameResp
{
	optional int32 code				= 1;
	optional int32 roomid			= 2;
	optional int32 tableno			= 3;
	optional int32 chairno			= 4;
	optional int64 deposit			= 5;	
	optional int32 table_status 	= 6;
	optional int32 flag		 		= 7;	// 定义见EnterGameRespFlag
	repeated User others			= 8;	// 桌上其他玩家的信息
	optional BytesData hand			= 9;	// 断线续玩的时候返回自己的手牌
	optional int32 custom_flag		= 10;	// 标记custom_data的类型
	optional BytesData custom_data	= 11;	// 游戏方自定义数据
}

message PlayerEnterGameNotify
{
	optional User player_info		= 1;
}

message EnterPrivateGameReq
{
	optional EnterNormalGameReq base_enter = 1;
}
message EnterPrivateGameResp
{
	optional int32 code		= 1;
}


message EnterMatchGameReq
{
	optional EnterNormalGameReq base_enter = 1;
}
message EnterMatchGameResp
{
	optional int32 code		= 1;
}


message LeaveGameReq
{
	optional int32 userid	= 1;
}
message LeaveGameResp
{
	optional int32 code		= 1;
}

message GiveUpReq
{
	optional int32 userid	= 1;
}
message GiveUpResp
{
	optional int32 code		= 1;
}

message Looker2PlayerReq
{
	optional int32 userid	= 1;
}
message Looker2PlayerResp
{
	optional int32 code		= 1;
	optional int32 chairno	= 2;
}

message Player2LookerReq
{
	optional int32 userid	= 1;
}
message Player2LookerResp
{
	optional int32 code		= 1;
}

message SwitchTableReq
{
	optional int32 userid	= 1;
}
message SwitchTableResp
{
	optional int32 code		= 1;
	optional int32 tableno	= 2;
	optional int32 chairno	= 3;
}


message TableChatReq
{
	optional int32 userid	= 1;
	optional string msg		= 2;
}
message TableChatNotify
{
	optional int32 userid	= 1;
	optional string msg		= 2;
}
message TableChatResp
{
	optional int32 code		= 1;
}

// 玩家行为通知
message UserActionNotify
{
	optional int32 action		= 1;
	optional User user			= 2;	// 只有kUser_SitDown时提供玩家全部信息，其他消息只提供基本信息
}

// 倒计时开始通知
message CountdownStartNotify
{
	optional int32 tableno		= 1;
	optional int32 countdown_s	= 2;	// 倒计时秒数	
}

// 倒计时结束通知
message CountdownStopNotify
{
	optional int32 tableno	= 1;	
}

// 游戏开始通知
message GameStartNotify
{
	optional int32 tableno	= 1;	
	//optional int32 flag		= 2;			// 标记custom_data的类型
	//optional BytesData custom_data	= 3;	// 游戏方自定义数据
}

// 玩家弃牌通知
message PlayerGiveupNotify
{
	optional int32 userid	= 1;
	optional int32 chairno	= 2;	
	optional int32 tableno	= 3;
}

// 服务内部消息
message StartGameReq
{
	optional int32 roomid	= 1;
	optional int32 tableno	= 2;
}

// 游戏结果通知
message GameResultNotify
{
	optional int32 tableno		= 1;	
	optional int32 bout_count	= 2;		// 第几局
	optional int32 banker_chair	= 3;		// 庄家椅子号		
	optional int64 base_deposit = 4;		// 基础银子
	repeated UserResult user_results = 5;	// 玩家结果
	optional BytesData custom_data = 6;		// 游戏方自定义数据
}


//==================================== 机器人消息 ==========================================//


message RobotSvrValidateReq
{
	optional int32 client_id	= 1;	// 机器人服务ID
}

message RobotSvrValidateResp
{
	optional int32 code			= 1;	
}

message GetGameUsersReq
{
	optional int32 clientid		= 1;	// 机器人服务ID
	optional int32 roomid		= 2;	// 房间id  0表示获取所有房间的信息
}

message GetGameUsersResp
{
	optional int32 code			= 1;	
	repeated Room rooms			= 2;	// 房间信息
	repeated User users			= 3;	// 玩家信息
}

// GN_RS_PLAER_ENTERGAME/GN_RS_LOOKER_ENTERGAME
message RS_UserEnterGameNotify
{
	optional int32 userid		= 1;
	optional int32 tableno		= 2;
	optional int32 chairno		= 3;	// GN_RS_LOOKER_ENTERGAME时为0
	optional int32 user_type	= 4;	// 普通玩家/管理员/机器人
	optional RoomData room_data = 5;
}

// GN_RS_LOOER2PLAYER/GN_RS_PLAYER2LOOKER
message RS_SwitchLookerPlayerNotify
{
	optional int32 userid		= 1;
	optional int32 roomid		= 2;
	optional int32 tableno		= 3;
	optional int32 chairno		= 4;
}

// GN_RS_GAME_START
message RS_StartGameNotify
{
	optional int32 roomid		= 1;
	optional int32 tableno		= 2;
	repeated ChairInfo chairs	= 3;
}

// GN_RS_USER_REFRESH_RESULT
message RS_UserRefreshResultNotify
{
	optional int32 userid		= 1;
	optional int32 roomid		= 2;
	optional int32 tableno		= 3;
	optional int32 chairno		= 4;
}

// GN_RS_REFRESH_RESULT
message RS_RefreshResultNotify
{
	optional int32 roomid		= 1;
	optional int32 tableno		= 2;
}

// GN_RS_USER_LEAVEGAME
message RS_UserLeaveGameNotify
{
	optional int32 userid		= 1;
	optional int32 roomid		= 2;
	optional int32 tableno		= 3;
}

// GN_RS_SWITCH_TABLE
message RS_SwitchTableNotify
{
	optional int32 userid		= 1;
	optional int32 roomid		= 2;
	optional int32 old_tableno	= 3;
	optional int32 new_tableno	= 4;
	optional int32 new_chairno	= 5;
}