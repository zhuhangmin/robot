// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game_base.proto
#include "stdafx.h"
#include "game_base.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace game {
    namespace base {
        class BytesDataDefaultTypeInternal {
        public:
            ::google::protobuf::internal::ExplicitlyConstructed<BytesData>
                _instance;
        } _BytesData_default_instance_;
        class RoomDataDefaultTypeInternal {
        public:
            ::google::protobuf::internal::ExplicitlyConstructed<RoomData>
                _instance;
        } _RoomData_default_instance_;
        class UserDefaultTypeInternal {
        public:
            ::google::protobuf::internal::ExplicitlyConstructed<User>
                _instance;
        } _User_default_instance_;
        class TableUserInfoDefaultTypeInternal {
        public:
            ::google::protobuf::internal::ExplicitlyConstructed<TableUserInfo>
                _instance;
        } _TableUserInfo_default_instance_;
        class ChairInfoDefaultTypeInternal {
        public:
            ::google::protobuf::internal::ExplicitlyConstructed<ChairInfo>
                _instance;
        } _ChairInfo_default_instance_;
        class TableDefaultTypeInternal {
        public:
            ::google::protobuf::internal::ExplicitlyConstructed<Table>
                _instance;
        } _Table_default_instance_;
        class RoomDefaultTypeInternal {
        public:
            ::google::protobuf::internal::ExplicitlyConstructed<Room>
                _instance;
        } _Room_default_instance_;
        class UserResultDefaultTypeInternal {
        public:
            ::google::protobuf::internal::ExplicitlyConstructed<UserResult>
                _instance;
        } _UserResult_default_instance_;
        class PulseReqDefaultTypeInternal {
        public:
            ::google::protobuf::internal::ExplicitlyConstructed<PulseReq>
                _instance;
        } _PulseReq_default_instance_;
        class PulseRespDefaultTypeInternal {
        public:
            ::google::protobuf::internal::ExplicitlyConstructed<PulseResp>
                _instance;
        } _PulseResp_default_instance_;
        class EnterNormalGameReqDefaultTypeInternal {
        public:
            ::google::protobuf::internal::ExplicitlyConstructed<EnterNormalGameReq>
                _instance;
        } _EnterNormalGameReq_default_instance_;
        class EnterNormalGameRespDefaultTypeInternal {
        public:
            ::google::protobuf::internal::ExplicitlyConstructed<EnterNormalGameResp>
                _instance;
        } _EnterNormalGameResp_default_instance_;
        class PlayerEnterGameNotifyDefaultTypeInternal {
        public:
            ::google::protobuf::internal::ExplicitlyConstructed<PlayerEnterGameNotify>
                _instance;
        } _PlayerEnterGameNotify_default_instance_;
        class EnterPrivateGameReqDefaultTypeInternal {
        public:
            ::google::protobuf::internal::ExplicitlyConstructed<EnterPrivateGameReq>
                _instance;
        } _EnterPrivateGameReq_default_instance_;
        class EnterPrivateGameRespDefaultTypeInternal {
        public:
            ::google::protobuf::internal::ExplicitlyConstructed<EnterPrivateGameResp>
                _instance;
        } _EnterPrivateGameResp_default_instance_;
        class EnterMatchGameReqDefaultTypeInternal {
        public:
            ::google::protobuf::internal::ExplicitlyConstructed<EnterMatchGameReq>
                _instance;
        } _EnterMatchGameReq_default_instance_;
        class EnterMatchGameRespDefaultTypeInternal {
        public:
            ::google::protobuf::internal::ExplicitlyConstructed<EnterMatchGameResp>
                _instance;
        } _EnterMatchGameResp_default_instance_;
        class LeaveGameReqDefaultTypeInternal {
        public:
            ::google::protobuf::internal::ExplicitlyConstructed<LeaveGameReq>
                _instance;
        } _LeaveGameReq_default_instance_;
        class LeaveGameRespDefaultTypeInternal {
        public:
            ::google::protobuf::internal::ExplicitlyConstructed<LeaveGameResp>
                _instance;
        } _LeaveGameResp_default_instance_;
        class GiveUpReqDefaultTypeInternal {
        public:
            ::google::protobuf::internal::ExplicitlyConstructed<GiveUpReq>
                _instance;
        } _GiveUpReq_default_instance_;
        class GiveUpRespDefaultTypeInternal {
        public:
            ::google::protobuf::internal::ExplicitlyConstructed<GiveUpResp>
                _instance;
        } _GiveUpResp_default_instance_;
        class Looker2PlayerReqDefaultTypeInternal {
        public:
            ::google::protobuf::internal::ExplicitlyConstructed<Looker2PlayerReq>
                _instance;
        } _Looker2PlayerReq_default_instance_;
        class Looker2PlayerRespDefaultTypeInternal {
        public:
            ::google::protobuf::internal::ExplicitlyConstructed<Looker2PlayerResp>
                _instance;
        } _Looker2PlayerResp_default_instance_;
        class Player2LookerReqDefaultTypeInternal {
        public:
            ::google::protobuf::internal::ExplicitlyConstructed<Player2LookerReq>
                _instance;
        } _Player2LookerReq_default_instance_;
        class Player2LookerRespDefaultTypeInternal {
        public:
            ::google::protobuf::internal::ExplicitlyConstructed<Player2LookerResp>
                _instance;
        } _Player2LookerResp_default_instance_;
        class SwitchTableReqDefaultTypeInternal {
        public:
            ::google::protobuf::internal::ExplicitlyConstructed<SwitchTableReq>
                _instance;
        } _SwitchTableReq_default_instance_;
        class SwitchTableRespDefaultTypeInternal {
        public:
            ::google::protobuf::internal::ExplicitlyConstructed<SwitchTableResp>
                _instance;
        } _SwitchTableResp_default_instance_;
        class TableChatReqDefaultTypeInternal {
        public:
            ::google::protobuf::internal::ExplicitlyConstructed<TableChatReq>
                _instance;
        } _TableChatReq_default_instance_;
        class TableChatNotifyDefaultTypeInternal {
        public:
            ::google::protobuf::internal::ExplicitlyConstructed<TableChatNotify>
                _instance;
        } _TableChatNotify_default_instance_;
        class TableChatRespDefaultTypeInternal {
        public:
            ::google::protobuf::internal::ExplicitlyConstructed<TableChatResp>
                _instance;
        } _TableChatResp_default_instance_;
        class UserActionNotifyDefaultTypeInternal {
        public:
            ::google::protobuf::internal::ExplicitlyConstructed<UserActionNotify>
                _instance;
        } _UserActionNotify_default_instance_;
        class CountdownStartNotifyDefaultTypeInternal {
        public:
            ::google::protobuf::internal::ExplicitlyConstructed<CountdownStartNotify>
                _instance;
        } _CountdownStartNotify_default_instance_;
        class CountdownStopNotifyDefaultTypeInternal {
        public:
            ::google::protobuf::internal::ExplicitlyConstructed<CountdownStopNotify>
                _instance;
        } _CountdownStopNotify_default_instance_;
        class GameStartNotifyDefaultTypeInternal {
        public:
            ::google::protobuf::internal::ExplicitlyConstructed<GameStartNotify>
                _instance;
        } _GameStartNotify_default_instance_;
        class PlayerGiveupNotifyDefaultTypeInternal {
        public:
            ::google::protobuf::internal::ExplicitlyConstructed<PlayerGiveupNotify>
                _instance;
        } _PlayerGiveupNotify_default_instance_;
        class StartGameReqDefaultTypeInternal {
        public:
            ::google::protobuf::internal::ExplicitlyConstructed<StartGameReq>
                _instance;
        } _StartGameReq_default_instance_;
        class GameResultNotifyDefaultTypeInternal {
        public:
            ::google::protobuf::internal::ExplicitlyConstructed<GameResultNotify>
                _instance;
        } _GameResultNotify_default_instance_;
        class RobotSvrValidateReqDefaultTypeInternal {
        public:
            ::google::protobuf::internal::ExplicitlyConstructed<RobotSvrValidateReq>
                _instance;
        } _RobotSvrValidateReq_default_instance_;
        class RobotSvrValidateRespDefaultTypeInternal {
        public:
            ::google::protobuf::internal::ExplicitlyConstructed<RobotSvrValidateResp>
                _instance;
        } _RobotSvrValidateResp_default_instance_;
        class GetGameUsersReqDefaultTypeInternal {
        public:
            ::google::protobuf::internal::ExplicitlyConstructed<GetGameUsersReq>
                _instance;
        } _GetGameUsersReq_default_instance_;
        class GetGameUsersRespDefaultTypeInternal {
        public:
            ::google::protobuf::internal::ExplicitlyConstructed<GetGameUsersResp>
                _instance;
        } _GetGameUsersResp_default_instance_;
        class RS_UserEnterGameNotifyDefaultTypeInternal {
        public:
            ::google::protobuf::internal::ExplicitlyConstructed<RS_UserEnterGameNotify>
                _instance;
        } _RS_UserEnterGameNotify_default_instance_;
        class RS_SwitchLookerPlayerNotifyDefaultTypeInternal {
        public:
            ::google::protobuf::internal::ExplicitlyConstructed<RS_SwitchLookerPlayerNotify>
                _instance;
        } _RS_SwitchLookerPlayerNotify_default_instance_;
        class RS_StartGameNotifyDefaultTypeInternal {
        public:
            ::google::protobuf::internal::ExplicitlyConstructed<RS_StartGameNotify>
                _instance;
        } _RS_StartGameNotify_default_instance_;
        class RS_UserRefreshResultNotifyDefaultTypeInternal {
        public:
            ::google::protobuf::internal::ExplicitlyConstructed<RS_UserRefreshResultNotify>
                _instance;
        } _RS_UserRefreshResultNotify_default_instance_;
        class RS_RefreshResultNotifyDefaultTypeInternal {
        public:
            ::google::protobuf::internal::ExplicitlyConstructed<RS_RefreshResultNotify>
                _instance;
        } _RS_RefreshResultNotify_default_instance_;
        class RS_UserLeaveGameNotifyDefaultTypeInternal {
        public:
            ::google::protobuf::internal::ExplicitlyConstructed<RS_UserLeaveGameNotify>
                _instance;
        } _RS_UserLeaveGameNotify_default_instance_;
        class RS_SwitchTableNotifyDefaultTypeInternal {
        public:
            ::google::protobuf::internal::ExplicitlyConstructed<RS_SwitchTableNotify>
                _instance;
        } _RS_SwitchTableNotify_default_instance_;
    }  // namespace base
}  // namespace game
namespace protobuf_game_5fbase_2eproto {
    void InitDefaultsBytesDataImpl() {
        GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
        ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
        ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
        {
            void* ptr = &::game::base::_BytesData_default_instance_;
            new (ptr) ::game::base::BytesData();
            ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
        }
        ::game::base::BytesData::InitAsDefaultInstance();
    }

    void InitDefaultsBytesData() {
        static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
        ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsBytesDataImpl);
    }

    void InitDefaultsRoomDataImpl() {
        GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
        ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
        ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
        {
            void* ptr = &::game::base::_RoomData_default_instance_;
            new (ptr) ::game::base::RoomData();
            ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
        }
        ::game::base::RoomData::InitAsDefaultInstance();
    }

    void InitDefaultsRoomData() {
        static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
        ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRoomDataImpl);
    }

    void InitDefaultsUserImpl() {
        GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
        ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
        ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
        {
            void* ptr = &::game::base::_User_default_instance_;
            new (ptr) ::game::base::User();
            ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
        }
        ::game::base::User::InitAsDefaultInstance();
    }

    void InitDefaultsUser() {
        static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
        ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsUserImpl);
    }

    void InitDefaultsTableUserInfoImpl() {
        GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
        ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
        ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
        {
            void* ptr = &::game::base::_TableUserInfo_default_instance_;
            new (ptr) ::game::base::TableUserInfo();
            ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
        }
        ::game::base::TableUserInfo::InitAsDefaultInstance();
    }

    void InitDefaultsTableUserInfo() {
        static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
        ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTableUserInfoImpl);
    }

    void InitDefaultsChairInfoImpl() {
        GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
        ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
        ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
        {
            void* ptr = &::game::base::_ChairInfo_default_instance_;
            new (ptr) ::game::base::ChairInfo();
            ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
        }
        ::game::base::ChairInfo::InitAsDefaultInstance();
    }

    void InitDefaultsChairInfo() {
        static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
        ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsChairInfoImpl);
    }

    void InitDefaultsTableImpl() {
        GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
        ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
        ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
        protobuf_game_5fbase_2eproto::InitDefaultsChairInfo();
        protobuf_game_5fbase_2eproto::InitDefaultsTableUserInfo();
        {
            void* ptr = &::game::base::_Table_default_instance_;
            new (ptr) ::game::base::Table();
            ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
        }
        ::game::base::Table::InitAsDefaultInstance();
    }

    void InitDefaultsTable() {
        static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
        ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTableImpl);
    }

    void InitDefaultsRoomImpl() {
        GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
        ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
        ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
        protobuf_game_5fbase_2eproto::InitDefaultsRoomData();
        protobuf_game_5fbase_2eproto::InitDefaultsTable();
        {
            void* ptr = &::game::base::_Room_default_instance_;
            new (ptr) ::game::base::Room();
            ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
        }
        ::game::base::Room::InitAsDefaultInstance();
    }

    void InitDefaultsRoom() {
        static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
        ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRoomImpl);
    }

    void InitDefaultsUserResultImpl() {
        GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
        ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
        ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
        {
            void* ptr = &::game::base::_UserResult_default_instance_;
            new (ptr) ::game::base::UserResult();
            ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
        }
        ::game::base::UserResult::InitAsDefaultInstance();
    }

    void InitDefaultsUserResult() {
        static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
        ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsUserResultImpl);
    }

    void InitDefaultsPulseReqImpl() {
        GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
        ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
        ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
        {
            void* ptr = &::game::base::_PulseReq_default_instance_;
            new (ptr) ::game::base::PulseReq();
            ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
        }
        ::game::base::PulseReq::InitAsDefaultInstance();
    }

    void InitDefaultsPulseReq() {
        static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
        ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPulseReqImpl);
    }

    void InitDefaultsPulseRespImpl() {
        GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
        ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
        ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
        {
            void* ptr = &::game::base::_PulseResp_default_instance_;
            new (ptr) ::game::base::PulseResp();
            ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
        }
        ::game::base::PulseResp::InitAsDefaultInstance();
    }

    void InitDefaultsPulseResp() {
        static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
        ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPulseRespImpl);
    }

    void InitDefaultsEnterNormalGameReqImpl() {
        GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
        ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
        ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
        {
            void* ptr = &::game::base::_EnterNormalGameReq_default_instance_;
            new (ptr) ::game::base::EnterNormalGameReq();
            ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
        }
        ::game::base::EnterNormalGameReq::InitAsDefaultInstance();
    }

    void InitDefaultsEnterNormalGameReq() {
        static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
        ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsEnterNormalGameReqImpl);
    }

    void InitDefaultsEnterNormalGameRespImpl() {
        GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
        ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
        ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
        protobuf_game_5fbase_2eproto::InitDefaultsUser();
        protobuf_game_5fbase_2eproto::InitDefaultsBytesData();
        {
            void* ptr = &::game::base::_EnterNormalGameResp_default_instance_;
            new (ptr) ::game::base::EnterNormalGameResp();
            ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
        }
        ::game::base::EnterNormalGameResp::InitAsDefaultInstance();
    }

    void InitDefaultsEnterNormalGameResp() {
        static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
        ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsEnterNormalGameRespImpl);
    }

    void InitDefaultsPlayerEnterGameNotifyImpl() {
        GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
        ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
        ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
        protobuf_game_5fbase_2eproto::InitDefaultsUser();
        {
            void* ptr = &::game::base::_PlayerEnterGameNotify_default_instance_;
            new (ptr) ::game::base::PlayerEnterGameNotify();
            ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
        }
        ::game::base::PlayerEnterGameNotify::InitAsDefaultInstance();
    }

    void InitDefaultsPlayerEnterGameNotify() {
        static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
        ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPlayerEnterGameNotifyImpl);
    }

    void InitDefaultsEnterPrivateGameReqImpl() {
        GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
        ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
        ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
        protobuf_game_5fbase_2eproto::InitDefaultsEnterNormalGameReq();
        {
            void* ptr = &::game::base::_EnterPrivateGameReq_default_instance_;
            new (ptr) ::game::base::EnterPrivateGameReq();
            ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
        }
        ::game::base::EnterPrivateGameReq::InitAsDefaultInstance();
    }

    void InitDefaultsEnterPrivateGameReq() {
        static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
        ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsEnterPrivateGameReqImpl);
    }

    void InitDefaultsEnterPrivateGameRespImpl() {
        GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
        ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
        ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
        {
            void* ptr = &::game::base::_EnterPrivateGameResp_default_instance_;
            new (ptr) ::game::base::EnterPrivateGameResp();
            ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
        }
        ::game::base::EnterPrivateGameResp::InitAsDefaultInstance();
    }

    void InitDefaultsEnterPrivateGameResp() {
        static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
        ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsEnterPrivateGameRespImpl);
    }

    void InitDefaultsEnterMatchGameReqImpl() {
        GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
        ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
        ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
        protobuf_game_5fbase_2eproto::InitDefaultsEnterNormalGameReq();
        {
            void* ptr = &::game::base::_EnterMatchGameReq_default_instance_;
            new (ptr) ::game::base::EnterMatchGameReq();
            ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
        }
        ::game::base::EnterMatchGameReq::InitAsDefaultInstance();
    }

    void InitDefaultsEnterMatchGameReq() {
        static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
        ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsEnterMatchGameReqImpl);
    }

    void InitDefaultsEnterMatchGameRespImpl() {
        GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
        ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
        ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
        {
            void* ptr = &::game::base::_EnterMatchGameResp_default_instance_;
            new (ptr) ::game::base::EnterMatchGameResp();
            ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
        }
        ::game::base::EnterMatchGameResp::InitAsDefaultInstance();
    }

    void InitDefaultsEnterMatchGameResp() {
        static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
        ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsEnterMatchGameRespImpl);
    }

    void InitDefaultsLeaveGameReqImpl() {
        GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
        ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
        ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
        {
            void* ptr = &::game::base::_LeaveGameReq_default_instance_;
            new (ptr) ::game::base::LeaveGameReq();
            ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
        }
        ::game::base::LeaveGameReq::InitAsDefaultInstance();
    }

    void InitDefaultsLeaveGameReq() {
        static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
        ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLeaveGameReqImpl);
    }

    void InitDefaultsLeaveGameRespImpl() {
        GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
        ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
        ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
        {
            void* ptr = &::game::base::_LeaveGameResp_default_instance_;
            new (ptr) ::game::base::LeaveGameResp();
            ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
        }
        ::game::base::LeaveGameResp::InitAsDefaultInstance();
    }

    void InitDefaultsLeaveGameResp() {
        static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
        ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLeaveGameRespImpl);
    }

    void InitDefaultsGiveUpReqImpl() {
        GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
        ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
        ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
        {
            void* ptr = &::game::base::_GiveUpReq_default_instance_;
            new (ptr) ::game::base::GiveUpReq();
            ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
        }
        ::game::base::GiveUpReq::InitAsDefaultInstance();
    }

    void InitDefaultsGiveUpReq() {
        static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
        ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGiveUpReqImpl);
    }

    void InitDefaultsGiveUpRespImpl() {
        GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
        ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
        ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
        {
            void* ptr = &::game::base::_GiveUpResp_default_instance_;
            new (ptr) ::game::base::GiveUpResp();
            ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
        }
        ::game::base::GiveUpResp::InitAsDefaultInstance();
    }

    void InitDefaultsGiveUpResp() {
        static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
        ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGiveUpRespImpl);
    }

    void InitDefaultsLooker2PlayerReqImpl() {
        GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
        ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
        ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
        {
            void* ptr = &::game::base::_Looker2PlayerReq_default_instance_;
            new (ptr) ::game::base::Looker2PlayerReq();
            ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
        }
        ::game::base::Looker2PlayerReq::InitAsDefaultInstance();
    }

    void InitDefaultsLooker2PlayerReq() {
        static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
        ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLooker2PlayerReqImpl);
    }

    void InitDefaultsLooker2PlayerRespImpl() {
        GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
        ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
        ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
        {
            void* ptr = &::game::base::_Looker2PlayerResp_default_instance_;
            new (ptr) ::game::base::Looker2PlayerResp();
            ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
        }
        ::game::base::Looker2PlayerResp::InitAsDefaultInstance();
    }

    void InitDefaultsLooker2PlayerResp() {
        static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
        ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLooker2PlayerRespImpl);
    }

    void InitDefaultsPlayer2LookerReqImpl() {
        GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
        ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
        ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
        {
            void* ptr = &::game::base::_Player2LookerReq_default_instance_;
            new (ptr) ::game::base::Player2LookerReq();
            ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
        }
        ::game::base::Player2LookerReq::InitAsDefaultInstance();
    }

    void InitDefaultsPlayer2LookerReq() {
        static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
        ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPlayer2LookerReqImpl);
    }

    void InitDefaultsPlayer2LookerRespImpl() {
        GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
        ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
        ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
        {
            void* ptr = &::game::base::_Player2LookerResp_default_instance_;
            new (ptr) ::game::base::Player2LookerResp();
            ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
        }
        ::game::base::Player2LookerResp::InitAsDefaultInstance();
    }

    void InitDefaultsPlayer2LookerResp() {
        static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
        ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPlayer2LookerRespImpl);
    }

    void InitDefaultsSwitchTableReqImpl() {
        GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
        ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
        ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
        {
            void* ptr = &::game::base::_SwitchTableReq_default_instance_;
            new (ptr) ::game::base::SwitchTableReq();
            ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
        }
        ::game::base::SwitchTableReq::InitAsDefaultInstance();
    }

    void InitDefaultsSwitchTableReq() {
        static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
        ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSwitchTableReqImpl);
    }

    void InitDefaultsSwitchTableRespImpl() {
        GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
        ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
        ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
        {
            void* ptr = &::game::base::_SwitchTableResp_default_instance_;
            new (ptr) ::game::base::SwitchTableResp();
            ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
        }
        ::game::base::SwitchTableResp::InitAsDefaultInstance();
    }

    void InitDefaultsSwitchTableResp() {
        static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
        ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSwitchTableRespImpl);
    }

    void InitDefaultsTableChatReqImpl() {
        GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
        ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
        ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
        {
            void* ptr = &::game::base::_TableChatReq_default_instance_;
            new (ptr) ::game::base::TableChatReq();
            ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
        }
        ::game::base::TableChatReq::InitAsDefaultInstance();
    }

    void InitDefaultsTableChatReq() {
        static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
        ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTableChatReqImpl);
    }

    void InitDefaultsTableChatNotifyImpl() {
        GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
        ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
        ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
        {
            void* ptr = &::game::base::_TableChatNotify_default_instance_;
            new (ptr) ::game::base::TableChatNotify();
            ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
        }
        ::game::base::TableChatNotify::InitAsDefaultInstance();
    }

    void InitDefaultsTableChatNotify() {
        static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
        ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTableChatNotifyImpl);
    }

    void InitDefaultsTableChatRespImpl() {
        GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
        ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
        ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
        {
            void* ptr = &::game::base::_TableChatResp_default_instance_;
            new (ptr) ::game::base::TableChatResp();
            ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
        }
        ::game::base::TableChatResp::InitAsDefaultInstance();
    }

    void InitDefaultsTableChatResp() {
        static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
        ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTableChatRespImpl);
    }

    void InitDefaultsUserActionNotifyImpl() {
        GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
        ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
        ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
        protobuf_game_5fbase_2eproto::InitDefaultsUser();
        {
            void* ptr = &::game::base::_UserActionNotify_default_instance_;
            new (ptr) ::game::base::UserActionNotify();
            ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
        }
        ::game::base::UserActionNotify::InitAsDefaultInstance();
    }

    void InitDefaultsUserActionNotify() {
        static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
        ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsUserActionNotifyImpl);
    }

    void InitDefaultsCountdownStartNotifyImpl() {
        GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
        ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
        ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
        {
            void* ptr = &::game::base::_CountdownStartNotify_default_instance_;
            new (ptr) ::game::base::CountdownStartNotify();
            ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
        }
        ::game::base::CountdownStartNotify::InitAsDefaultInstance();
    }

    void InitDefaultsCountdownStartNotify() {
        static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
        ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCountdownStartNotifyImpl);
    }

    void InitDefaultsCountdownStopNotifyImpl() {
        GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
        ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
        ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
        {
            void* ptr = &::game::base::_CountdownStopNotify_default_instance_;
            new (ptr) ::game::base::CountdownStopNotify();
            ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
        }
        ::game::base::CountdownStopNotify::InitAsDefaultInstance();
    }

    void InitDefaultsCountdownStopNotify() {
        static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
        ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCountdownStopNotifyImpl);
    }

    void InitDefaultsGameStartNotifyImpl() {
        GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
        ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
        ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
        {
            void* ptr = &::game::base::_GameStartNotify_default_instance_;
            new (ptr) ::game::base::GameStartNotify();
            ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
        }
        ::game::base::GameStartNotify::InitAsDefaultInstance();
    }

    void InitDefaultsGameStartNotify() {
        static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
        ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGameStartNotifyImpl);
    }

    void InitDefaultsPlayerGiveupNotifyImpl() {
        GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
        ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
        ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
        {
            void* ptr = &::game::base::_PlayerGiveupNotify_default_instance_;
            new (ptr) ::game::base::PlayerGiveupNotify();
            ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
        }
        ::game::base::PlayerGiveupNotify::InitAsDefaultInstance();
    }

    void InitDefaultsPlayerGiveupNotify() {
        static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
        ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPlayerGiveupNotifyImpl);
    }

    void InitDefaultsStartGameReqImpl() {
        GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
        ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
        ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
        {
            void* ptr = &::game::base::_StartGameReq_default_instance_;
            new (ptr) ::game::base::StartGameReq();
            ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
        }
        ::game::base::StartGameReq::InitAsDefaultInstance();
    }

    void InitDefaultsStartGameReq() {
        static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
        ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsStartGameReqImpl);
    }

    void InitDefaultsGameResultNotifyImpl() {
        GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
        ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
        ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
        protobuf_game_5fbase_2eproto::InitDefaultsUserResult();
        protobuf_game_5fbase_2eproto::InitDefaultsBytesData();
        {
            void* ptr = &::game::base::_GameResultNotify_default_instance_;
            new (ptr) ::game::base::GameResultNotify();
            ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
        }
        ::game::base::GameResultNotify::InitAsDefaultInstance();
    }

    void InitDefaultsGameResultNotify() {
        static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
        ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGameResultNotifyImpl);
    }

    void InitDefaultsRobotSvrValidateReqImpl() {
        GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
        ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
        ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
        {
            void* ptr = &::game::base::_RobotSvrValidateReq_default_instance_;
            new (ptr) ::game::base::RobotSvrValidateReq();
            ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
        }
        ::game::base::RobotSvrValidateReq::InitAsDefaultInstance();
    }

    void InitDefaultsRobotSvrValidateReq() {
        static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
        ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRobotSvrValidateReqImpl);
    }

    void InitDefaultsRobotSvrValidateRespImpl() {
        GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
        ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
        ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
        {
            void* ptr = &::game::base::_RobotSvrValidateResp_default_instance_;
            new (ptr) ::game::base::RobotSvrValidateResp();
            ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
        }
        ::game::base::RobotSvrValidateResp::InitAsDefaultInstance();
    }

    void InitDefaultsRobotSvrValidateResp() {
        static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
        ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRobotSvrValidateRespImpl);
    }

    void InitDefaultsGetGameUsersReqImpl() {
        GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
        ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
        ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
        {
            void* ptr = &::game::base::_GetGameUsersReq_default_instance_;
            new (ptr) ::game::base::GetGameUsersReq();
            ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
        }
        ::game::base::GetGameUsersReq::InitAsDefaultInstance();
    }

    void InitDefaultsGetGameUsersReq() {
        static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
        ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGetGameUsersReqImpl);
    }

    void InitDefaultsGetGameUsersRespImpl() {
        GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
        ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
        ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
        protobuf_game_5fbase_2eproto::InitDefaultsRoom();
        protobuf_game_5fbase_2eproto::InitDefaultsUser();
        {
            void* ptr = &::game::base::_GetGameUsersResp_default_instance_;
            new (ptr) ::game::base::GetGameUsersResp();
            ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
        }
        ::game::base::GetGameUsersResp::InitAsDefaultInstance();
    }

    void InitDefaultsGetGameUsersResp() {
        static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
        ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGetGameUsersRespImpl);
    }

    void InitDefaultsRS_UserEnterGameNotifyImpl() {
        GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
        ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
        ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
        protobuf_game_5fbase_2eproto::InitDefaultsRoomData();
        {
            void* ptr = &::game::base::_RS_UserEnterGameNotify_default_instance_;
            new (ptr) ::game::base::RS_UserEnterGameNotify();
            ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
        }
        ::game::base::RS_UserEnterGameNotify::InitAsDefaultInstance();
    }

    void InitDefaultsRS_UserEnterGameNotify() {
        static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
        ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRS_UserEnterGameNotifyImpl);
    }

    void InitDefaultsRS_SwitchLookerPlayerNotifyImpl() {
        GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
        ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
        ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
        {
            void* ptr = &::game::base::_RS_SwitchLookerPlayerNotify_default_instance_;
            new (ptr) ::game::base::RS_SwitchLookerPlayerNotify();
            ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
        }
        ::game::base::RS_SwitchLookerPlayerNotify::InitAsDefaultInstance();
    }

    void InitDefaultsRS_SwitchLookerPlayerNotify() {
        static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
        ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRS_SwitchLookerPlayerNotifyImpl);
    }

    void InitDefaultsRS_StartGameNotifyImpl() {
        GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
        ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
        ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
        protobuf_game_5fbase_2eproto::InitDefaultsChairInfo();
        {
            void* ptr = &::game::base::_RS_StartGameNotify_default_instance_;
            new (ptr) ::game::base::RS_StartGameNotify();
            ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
        }
        ::game::base::RS_StartGameNotify::InitAsDefaultInstance();
    }

    void InitDefaultsRS_StartGameNotify() {
        static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
        ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRS_StartGameNotifyImpl);
    }

    void InitDefaultsRS_UserRefreshResultNotifyImpl() {
        GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
        ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
        ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
        {
            void* ptr = &::game::base::_RS_UserRefreshResultNotify_default_instance_;
            new (ptr) ::game::base::RS_UserRefreshResultNotify();
            ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
        }
        ::game::base::RS_UserRefreshResultNotify::InitAsDefaultInstance();
    }

    void InitDefaultsRS_UserRefreshResultNotify() {
        static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
        ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRS_UserRefreshResultNotifyImpl);
    }

    void InitDefaultsRS_RefreshResultNotifyImpl() {
        GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
        ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
        ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
        {
            void* ptr = &::game::base::_RS_RefreshResultNotify_default_instance_;
            new (ptr) ::game::base::RS_RefreshResultNotify();
            ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
        }
        ::game::base::RS_RefreshResultNotify::InitAsDefaultInstance();
    }

    void InitDefaultsRS_RefreshResultNotify() {
        static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
        ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRS_RefreshResultNotifyImpl);
    }

    void InitDefaultsRS_UserLeaveGameNotifyImpl() {
        GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
        ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
        ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
        {
            void* ptr = &::game::base::_RS_UserLeaveGameNotify_default_instance_;
            new (ptr) ::game::base::RS_UserLeaveGameNotify();
            ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
        }
        ::game::base::RS_UserLeaveGameNotify::InitAsDefaultInstance();
    }

    void InitDefaultsRS_UserLeaveGameNotify() {
        static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
        ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRS_UserLeaveGameNotifyImpl);
    }

    void InitDefaultsRS_SwitchTableNotifyImpl() {
        GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
        ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
        ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
        {
            void* ptr = &::game::base::_RS_SwitchTableNotify_default_instance_;
            new (ptr) ::game::base::RS_SwitchTableNotify();
            ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
        }
        ::game::base::RS_SwitchTableNotify::InitAsDefaultInstance();
    }

    void InitDefaultsRS_SwitchTableNotify() {
        static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
        ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRS_SwitchTableNotifyImpl);
    }

    ::google::protobuf::Metadata file_level_metadata[48];

    const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::BytesData, _has_bits_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::BytesData, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::BytesData, data_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::BytesData, data_len_),
        0,
        1,
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::RoomData, _has_bits_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::RoomData, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::RoomData, roomid_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::RoomData, options_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::RoomData, configs_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::RoomData, manages_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::RoomData, max_table_cout_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::RoomData, chaircount_per_table_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::RoomData, min_deposit_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::RoomData, max_deposit_),
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::User, _has_bits_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::User, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::User, userid_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::User, roomid_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::User, tableno_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::User, chairno_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::User, user_type_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::User, deposit_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::User, total_bout_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::User, offline_count_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::User, enter_timestamp_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::User, head_url_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::User, hardid_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::User, nick_name_),
        3,
        4,
        5,
        6,
        8,
        7,
        9,
        10,
        11,
        0,
        1,
        2,
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::TableUserInfo, _has_bits_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::TableUserInfo, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::TableUserInfo, userid_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::TableUserInfo, offline_count_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::TableUserInfo, bout_count_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::TableUserInfo, bind_timestamp_),
        0,
        1,
        2,
        3,
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::ChairInfo, _has_bits_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::ChairInfo, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::ChairInfo, chairno_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::ChairInfo, userid_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::ChairInfo, chair_status_),
        0,
        1,
        2,
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::Table, _has_bits_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::Table, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::Table, tableno_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::Table, roomid_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::Table, chair_count_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::Table, banker_chair_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::Table, min_deposit_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::Table, max_deposit_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::Table, base_deposit_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::Table, table_status_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::Table, chairs_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::Table, table_users_),
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        ~0u,
        ~0u,
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::Room, _has_bits_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::Room, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::Room, room_data_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::Room, tables_),
        0,
        ~0u,
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::UserResult, _has_bits_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::UserResult, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::UserResult, userid_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::UserResult, chaino_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::UserResult, old_deposit_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::UserResult, diff_deposit_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::UserResult, fee_),
        0,
        1,
        2,
        3,
        4,
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::PulseReq, _has_bits_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::PulseReq, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::PulseReq, id_),
        0,
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::PulseResp, _has_bits_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::PulseResp, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::PulseResp, timestamp_),
        0,
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::EnterNormalGameReq, _has_bits_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::EnterNormalGameReq, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::EnterNormalGameReq, userid_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::EnterNormalGameReq, roomid_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::EnterNormalGameReq, flag_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::EnterNormalGameReq, target_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::EnterNormalGameReq, hardid_),
        1,
        2,
        3,
        4,
        0,
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::EnterNormalGameResp, _has_bits_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::EnterNormalGameResp, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::EnterNormalGameResp, code_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::EnterNormalGameResp, roomid_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::EnterNormalGameResp, tableno_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::EnterNormalGameResp, chairno_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::EnterNormalGameResp, deposit_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::EnterNormalGameResp, table_status_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::EnterNormalGameResp, flag_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::EnterNormalGameResp, others_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::EnterNormalGameResp, hand_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::EnterNormalGameResp, custom_flag_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::EnterNormalGameResp, custom_data_),
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        ~0u,
        0,
        9,
        1,
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::PlayerEnterGameNotify, _has_bits_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::PlayerEnterGameNotify, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::PlayerEnterGameNotify, player_info_),
        0,
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::EnterPrivateGameReq, _has_bits_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::EnterPrivateGameReq, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::EnterPrivateGameReq, base_enter_),
        0,
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::EnterPrivateGameResp, _has_bits_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::EnterPrivateGameResp, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::EnterPrivateGameResp, code_),
        0,
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::EnterMatchGameReq, _has_bits_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::EnterMatchGameReq, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::EnterMatchGameReq, base_enter_),
        0,
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::EnterMatchGameResp, _has_bits_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::EnterMatchGameResp, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::EnterMatchGameResp, code_),
        0,
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::LeaveGameReq, _has_bits_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::LeaveGameReq, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::LeaveGameReq, userid_),
        0,
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::LeaveGameResp, _has_bits_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::LeaveGameResp, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::LeaveGameResp, code_),
        0,
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::GiveUpReq, _has_bits_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::GiveUpReq, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::GiveUpReq, userid_),
        0,
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::GiveUpResp, _has_bits_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::GiveUpResp, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::GiveUpResp, code_),
        0,
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::Looker2PlayerReq, _has_bits_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::Looker2PlayerReq, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::Looker2PlayerReq, userid_),
        0,
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::Looker2PlayerResp, _has_bits_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::Looker2PlayerResp, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::Looker2PlayerResp, code_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::Looker2PlayerResp, chairno_),
        0,
        1,
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::Player2LookerReq, _has_bits_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::Player2LookerReq, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::Player2LookerReq, userid_),
        0,
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::Player2LookerResp, _has_bits_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::Player2LookerResp, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::Player2LookerResp, code_),
        0,
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::SwitchTableReq, _has_bits_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::SwitchTableReq, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::SwitchTableReq, userid_),
        0,
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::SwitchTableResp, _has_bits_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::SwitchTableResp, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::SwitchTableResp, code_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::SwitchTableResp, tableno_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::SwitchTableResp, chairno_),
        0,
        1,
        2,
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::TableChatReq, _has_bits_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::TableChatReq, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::TableChatReq, userid_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::TableChatReq, msg_),
        1,
        0,
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::TableChatNotify, _has_bits_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::TableChatNotify, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::TableChatNotify, userid_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::TableChatNotify, msg_),
        1,
        0,
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::TableChatResp, _has_bits_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::TableChatResp, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::TableChatResp, code_),
        0,
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::UserActionNotify, _has_bits_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::UserActionNotify, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::UserActionNotify, action_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::UserActionNotify, user_),
        1,
        0,
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::CountdownStartNotify, _has_bits_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::CountdownStartNotify, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::CountdownStartNotify, tableno_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::CountdownStartNotify, countdown_s_),
        0,
        1,
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::CountdownStopNotify, _has_bits_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::CountdownStopNotify, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::CountdownStopNotify, tableno_),
        0,
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::GameStartNotify, _has_bits_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::GameStartNotify, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::GameStartNotify, tableno_),
        0,
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::PlayerGiveupNotify, _has_bits_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::PlayerGiveupNotify, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::PlayerGiveupNotify, userid_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::PlayerGiveupNotify, chairno_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::PlayerGiveupNotify, tableno_),
        0,
        1,
        2,
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::StartGameReq, _has_bits_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::StartGameReq, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::StartGameReq, roomid_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::StartGameReq, tableno_),
        0,
        1,
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::GameResultNotify, _has_bits_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::GameResultNotify, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::GameResultNotify, tableno_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::GameResultNotify, bout_count_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::GameResultNotify, banker_chair_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::GameResultNotify, base_deposit_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::GameResultNotify, user_results_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::GameResultNotify, custom_data_),
        1,
        2,
        4,
        3,
        ~0u,
        0,
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::RobotSvrValidateReq, _has_bits_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::RobotSvrValidateReq, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::RobotSvrValidateReq, client_id_),
        0,
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::RobotSvrValidateResp, _has_bits_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::RobotSvrValidateResp, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::RobotSvrValidateResp, code_),
        0,
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::GetGameUsersReq, _has_bits_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::GetGameUsersReq, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::GetGameUsersReq, clientid_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::GetGameUsersReq, roomid_),
        0,
        1,
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::GetGameUsersResp, _has_bits_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::GetGameUsersResp, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::GetGameUsersResp, code_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::GetGameUsersResp, rooms_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::GetGameUsersResp, users_),
        0,
        ~0u,
        ~0u,
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::RS_UserEnterGameNotify, _has_bits_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::RS_UserEnterGameNotify, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::RS_UserEnterGameNotify, userid_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::RS_UserEnterGameNotify, tableno_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::RS_UserEnterGameNotify, chairno_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::RS_UserEnterGameNotify, user_type_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::RS_UserEnterGameNotify, room_data_),
        1,
        2,
        3,
        4,
        0,
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::RS_SwitchLookerPlayerNotify, _has_bits_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::RS_SwitchLookerPlayerNotify, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::RS_SwitchLookerPlayerNotify, userid_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::RS_SwitchLookerPlayerNotify, roomid_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::RS_SwitchLookerPlayerNotify, tableno_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::RS_SwitchLookerPlayerNotify, chairno_),
        0,
        1,
        2,
        3,
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::RS_StartGameNotify, _has_bits_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::RS_StartGameNotify, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::RS_StartGameNotify, roomid_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::RS_StartGameNotify, tableno_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::RS_StartGameNotify, chairs_),
        0,
        1,
        ~0u,
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::RS_UserRefreshResultNotify, _has_bits_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::RS_UserRefreshResultNotify, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::RS_UserRefreshResultNotify, userid_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::RS_UserRefreshResultNotify, roomid_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::RS_UserRefreshResultNotify, tableno_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::RS_UserRefreshResultNotify, chairno_),
        0,
        1,
        2,
        3,
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::RS_RefreshResultNotify, _has_bits_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::RS_RefreshResultNotify, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::RS_RefreshResultNotify, roomid_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::RS_RefreshResultNotify, tableno_),
        0,
        1,
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::RS_UserLeaveGameNotify, _has_bits_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::RS_UserLeaveGameNotify, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::RS_UserLeaveGameNotify, userid_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::RS_UserLeaveGameNotify, roomid_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::RS_UserLeaveGameNotify, tableno_),
        0,
        1,
        2,
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::RS_SwitchTableNotify, _has_bits_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::RS_SwitchTableNotify, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::RS_SwitchTableNotify, userid_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::RS_SwitchTableNotify, roomid_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::RS_SwitchTableNotify, old_tableno_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::RS_SwitchTableNotify, new_tableno_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::game::base::RS_SwitchTableNotify, new_chairno_),
        0,
        1,
        2,
        3,
        4,
    };
    static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 7, sizeof(::game::base::BytesData)},
        {9, 22, sizeof(::game::base::RoomData)},
        {30, 47, sizeof(::game::base::User)},
        {59, 68, sizeof(::game::base::TableUserInfo)},
        {72, 80, sizeof(::game::base::ChairInfo)},
        {83, 98, sizeof(::game::base::Table)},
        {108, 115, sizeof(::game::base::Room)},
        {117, 127, sizeof(::game::base::UserResult)},
        {132, 138, sizeof(::game::base::PulseReq)},
        {139, 145, sizeof(::game::base::PulseResp)},
        {146, 156, sizeof(::game::base::EnterNormalGameReq)},
        {161, 177, sizeof(::game::base::EnterNormalGameResp)},
        {188, 194, sizeof(::game::base::PlayerEnterGameNotify)},
        {195, 201, sizeof(::game::base::EnterPrivateGameReq)},
        {202, 208, sizeof(::game::base::EnterPrivateGameResp)},
        {209, 215, sizeof(::game::base::EnterMatchGameReq)},
        {216, 222, sizeof(::game::base::EnterMatchGameResp)},
        {223, 229, sizeof(::game::base::LeaveGameReq)},
        {230, 236, sizeof(::game::base::LeaveGameResp)},
        {237, 243, sizeof(::game::base::GiveUpReq)},
        {244, 250, sizeof(::game::base::GiveUpResp)},
        {251, 257, sizeof(::game::base::Looker2PlayerReq)},
        {258, 265, sizeof(::game::base::Looker2PlayerResp)},
        {267, 273, sizeof(::game::base::Player2LookerReq)},
        {274, 280, sizeof(::game::base::Player2LookerResp)},
        {281, 287, sizeof(::game::base::SwitchTableReq)},
        {288, 296, sizeof(::game::base::SwitchTableResp)},
        {299, 306, sizeof(::game::base::TableChatReq)},
        {308, 315, sizeof(::game::base::TableChatNotify)},
        {317, 323, sizeof(::game::base::TableChatResp)},
        {324, 331, sizeof(::game::base::UserActionNotify)},
        {333, 340, sizeof(::game::base::CountdownStartNotify)},
        {342, 348, sizeof(::game::base::CountdownStopNotify)},
        {349, 355, sizeof(::game::base::GameStartNotify)},
        {356, 364, sizeof(::game::base::PlayerGiveupNotify)},
        {367, 374, sizeof(::game::base::StartGameReq)},
        {376, 387, sizeof(::game::base::GameResultNotify)},
        {393, 399, sizeof(::game::base::RobotSvrValidateReq)},
        {400, 406, sizeof(::game::base::RobotSvrValidateResp)},
        {407, 414, sizeof(::game::base::GetGameUsersReq)},
        {416, 424, sizeof(::game::base::GetGameUsersResp)},
        {427, 437, sizeof(::game::base::RS_UserEnterGameNotify)},
        {442, 451, sizeof(::game::base::RS_SwitchLookerPlayerNotify)},
        {455, 463, sizeof(::game::base::RS_StartGameNotify)},
        {466, 475, sizeof(::game::base::RS_UserRefreshResultNotify)},
        {479, 486, sizeof(::game::base::RS_RefreshResultNotify)},
        {488, 496, sizeof(::game::base::RS_UserLeaveGameNotify)},
        {499, 509, sizeof(::game::base::RS_SwitchTableNotify)},
    };

    static ::google::protobuf::Message const * const file_default_instances[] = {
        reinterpret_cast<const ::google::protobuf::Message*>(&::game::base::_BytesData_default_instance_),
        reinterpret_cast<const ::google::protobuf::Message*>(&::game::base::_RoomData_default_instance_),
        reinterpret_cast<const ::google::protobuf::Message*>(&::game::base::_User_default_instance_),
        reinterpret_cast<const ::google::protobuf::Message*>(&::game::base::_TableUserInfo_default_instance_),
        reinterpret_cast<const ::google::protobuf::Message*>(&::game::base::_ChairInfo_default_instance_),
        reinterpret_cast<const ::google::protobuf::Message*>(&::game::base::_Table_default_instance_),
        reinterpret_cast<const ::google::protobuf::Message*>(&::game::base::_Room_default_instance_),
        reinterpret_cast<const ::google::protobuf::Message*>(&::game::base::_UserResult_default_instance_),
        reinterpret_cast<const ::google::protobuf::Message*>(&::game::base::_PulseReq_default_instance_),
        reinterpret_cast<const ::google::protobuf::Message*>(&::game::base::_PulseResp_default_instance_),
        reinterpret_cast<const ::google::protobuf::Message*>(&::game::base::_EnterNormalGameReq_default_instance_),
        reinterpret_cast<const ::google::protobuf::Message*>(&::game::base::_EnterNormalGameResp_default_instance_),
        reinterpret_cast<const ::google::protobuf::Message*>(&::game::base::_PlayerEnterGameNotify_default_instance_),
        reinterpret_cast<const ::google::protobuf::Message*>(&::game::base::_EnterPrivateGameReq_default_instance_),
        reinterpret_cast<const ::google::protobuf::Message*>(&::game::base::_EnterPrivateGameResp_default_instance_),
        reinterpret_cast<const ::google::protobuf::Message*>(&::game::base::_EnterMatchGameReq_default_instance_),
        reinterpret_cast<const ::google::protobuf::Message*>(&::game::base::_EnterMatchGameResp_default_instance_),
        reinterpret_cast<const ::google::protobuf::Message*>(&::game::base::_LeaveGameReq_default_instance_),
        reinterpret_cast<const ::google::protobuf::Message*>(&::game::base::_LeaveGameResp_default_instance_),
        reinterpret_cast<const ::google::protobuf::Message*>(&::game::base::_GiveUpReq_default_instance_),
        reinterpret_cast<const ::google::protobuf::Message*>(&::game::base::_GiveUpResp_default_instance_),
        reinterpret_cast<const ::google::protobuf::Message*>(&::game::base::_Looker2PlayerReq_default_instance_),
        reinterpret_cast<const ::google::protobuf::Message*>(&::game::base::_Looker2PlayerResp_default_instance_),
        reinterpret_cast<const ::google::protobuf::Message*>(&::game::base::_Player2LookerReq_default_instance_),
        reinterpret_cast<const ::google::protobuf::Message*>(&::game::base::_Player2LookerResp_default_instance_),
        reinterpret_cast<const ::google::protobuf::Message*>(&::game::base::_SwitchTableReq_default_instance_),
        reinterpret_cast<const ::google::protobuf::Message*>(&::game::base::_SwitchTableResp_default_instance_),
        reinterpret_cast<const ::google::protobuf::Message*>(&::game::base::_TableChatReq_default_instance_),
        reinterpret_cast<const ::google::protobuf::Message*>(&::game::base::_TableChatNotify_default_instance_),
        reinterpret_cast<const ::google::protobuf::Message*>(&::game::base::_TableChatResp_default_instance_),
        reinterpret_cast<const ::google::protobuf::Message*>(&::game::base::_UserActionNotify_default_instance_),
        reinterpret_cast<const ::google::protobuf::Message*>(&::game::base::_CountdownStartNotify_default_instance_),
        reinterpret_cast<const ::google::protobuf::Message*>(&::game::base::_CountdownStopNotify_default_instance_),
        reinterpret_cast<const ::google::protobuf::Message*>(&::game::base::_GameStartNotify_default_instance_),
        reinterpret_cast<const ::google::protobuf::Message*>(&::game::base::_PlayerGiveupNotify_default_instance_),
        reinterpret_cast<const ::google::protobuf::Message*>(&::game::base::_StartGameReq_default_instance_),
        reinterpret_cast<const ::google::protobuf::Message*>(&::game::base::_GameResultNotify_default_instance_),
        reinterpret_cast<const ::google::protobuf::Message*>(&::game::base::_RobotSvrValidateReq_default_instance_),
        reinterpret_cast<const ::google::protobuf::Message*>(&::game::base::_RobotSvrValidateResp_default_instance_),
        reinterpret_cast<const ::google::protobuf::Message*>(&::game::base::_GetGameUsersReq_default_instance_),
        reinterpret_cast<const ::google::protobuf::Message*>(&::game::base::_GetGameUsersResp_default_instance_),
        reinterpret_cast<const ::google::protobuf::Message*>(&::game::base::_RS_UserEnterGameNotify_default_instance_),
        reinterpret_cast<const ::google::protobuf::Message*>(&::game::base::_RS_SwitchLookerPlayerNotify_default_instance_),
        reinterpret_cast<const ::google::protobuf::Message*>(&::game::base::_RS_StartGameNotify_default_instance_),
        reinterpret_cast<const ::google::protobuf::Message*>(&::game::base::_RS_UserRefreshResultNotify_default_instance_),
        reinterpret_cast<const ::google::protobuf::Message*>(&::game::base::_RS_RefreshResultNotify_default_instance_),
        reinterpret_cast<const ::google::protobuf::Message*>(&::game::base::_RS_UserLeaveGameNotify_default_instance_),
        reinterpret_cast<const ::google::protobuf::Message*>(&::game::base::_RS_SwitchTableNotify_default_instance_),
    };

    void protobuf_AssignDescriptors() {
        AddDescriptors();
        ::google::protobuf::MessageFactory* factory = NULL;
        AssignDescriptors(
            "game_base.proto", schemas, file_default_instances, TableStruct::offsets, factory,
            file_level_metadata, NULL, NULL);
    }

    void protobuf_AssignDescriptorsOnce() {
        static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
        ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
    }

    void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
    void protobuf_RegisterTypes(const ::std::string&) {
        protobuf_AssignDescriptorsOnce();
        ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 48);
    }

    void AddDescriptorsImpl() {
        InitDefaults();
        static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
            "\n\017game_base.proto\022\tgame.base\"+\n\tBytesDat"
            "a\022\014\n\004data\030\001 \001(\014\022\020\n\010data_len\030\002 \001(\005\"\255\001\n\010Ro"
            "omData\022\016\n\006roomid\030\001 \001(\005\022\017\n\007options\030\002 \001(\005\022"
            "\017\n\007configs\030\003 \001(\005\022\017\n\007manages\030\004 \001(\005\022\026\n\016max"
            "_table_cout\030\005 \001(\005\022\034\n\024chaircount_per_tabl"
            "e\030\006 \001(\005\022\023\n\013min_deposit\030\007 \001(\003\022\023\n\013max_depo"
            "sit\030\010 \001(\003\"\345\001\n\004User\022\016\n\006userid\030\001 \001(\005\022\016\n\006ro"
            "omid\030\002 \001(\005\022\017\n\007tableno\030\003 \001(\005\022\017\n\007chairno\030\004"
            " \001(\005\022\021\n\tuser_type\030\005 \001(\005\022\017\n\007deposit\030\006 \001(\003"
            "\022\022\n\ntotal_bout\030\007 \001(\005\022\025\n\roffline_count\030\010 "
            "\001(\005\022\027\n\017enter_timestamp\030\t \001(\005\022\020\n\010head_url"
            "\030\n \001(\t\022\016\n\006hardid\030\013 \001(\t\022\021\n\tnick_name\030\014 \001("
            "\t\"b\n\rTableUserInfo\022\016\n\006userid\030\001 \001(\005\022\025\n\rof"
            "fline_count\030\002 \001(\005\022\022\n\nbout_count\030\003 \001(\005\022\026\n"
            "\016bind_timestamp\030\004 \001(\005\"B\n\tChairInfo\022\017\n\007ch"
            "airno\030\001 \001(\005\022\016\n\006userid\030\002 \001(\005\022\024\n\014chair_sta"
            "tus\030\003 \001(\005\"\376\001\n\005Table\022\017\n\007tableno\030\001 \001(\005\022\016\n\006"
            "roomid\030\002 \001(\005\022\023\n\013chair_count\030\003 \001(\005\022\024\n\014ban"
            "ker_chair\030\004 \001(\005\022\023\n\013min_deposit\030\005 \001(\003\022\023\n\013"
            "max_deposit\030\006 \001(\003\022\024\n\014base_deposit\030\007 \001(\003\022"
            "\024\n\014table_status\030\010 \001(\005\022$\n\006chairs\030\t \003(\0132\024."
            "game.base.ChairInfo\022-\n\013table_users\030\n \003(\013"
            "2\030.game.base.TableUserInfo\"P\n\004Room\022&\n\tro"
            "om_data\030\001 \001(\0132\023.game.base.RoomData\022 \n\006ta"
            "bles\030\002 \003(\0132\020.game.base.Table\"d\n\nUserResu"
            "lt\022\016\n\006userid\030\001 \001(\005\022\016\n\006chaino\030\002 \001(\005\022\023\n\013ol"
            "d_deposit\030\003 \001(\003\022\024\n\014diff_deposit\030\004 \001(\003\022\013\n"
            "\003fee\030\005 \001(\005\"\026\n\010PulseReq\022\n\n\002id\030\001 \001(\005\"\036\n\tPu"
            "lseResp\022\021\n\ttimestamp\030\001 \001(\005\"b\n\022EnterNorma"
            "lGameReq\022\016\n\006userid\030\001 \001(\005\022\016\n\006roomid\030\002 \001(\005"
            "\022\014\n\004flag\030\003 \001(\005\022\016\n\006target\030\004 \001(\005\022\016\n\006hardid"
            "\030\005 \001(\t\"\217\002\n\023EnterNormalGameResp\022\014\n\004code\030\001"
            " \001(\005\022\016\n\006roomid\030\002 \001(\005\022\017\n\007tableno\030\003 \001(\005\022\017\n"
            "\007chairno\030\004 \001(\005\022\017\n\007deposit\030\005 \001(\003\022\024\n\014table"
            "_status\030\006 \001(\005\022\014\n\004flag\030\007 \001(\005\022\037\n\006others\030\010 "
            "\003(\0132\017.game.base.User\022\"\n\004hand\030\t \001(\0132\024.gam"
            "e.base.BytesData\022\023\n\013custom_flag\030\n \001(\005\022)\n"
            "\013custom_data\030\013 \001(\0132\024.game.base.BytesData"
            "\"=\n\025PlayerEnterGameNotify\022$\n\013player_info"
            "\030\001 \001(\0132\017.game.base.User\"H\n\023EnterPrivateG"
            "ameReq\0221\n\nbase_enter\030\001 \001(\0132\035.game.base.E"
            "nterNormalGameReq\"$\n\024EnterPrivateGameRes"
            "p\022\014\n\004code\030\001 \001(\005\"F\n\021EnterMatchGameReq\0221\n\n"
            "base_enter\030\001 \001(\0132\035.game.base.EnterNormal"
            "GameReq\"\"\n\022EnterMatchGameResp\022\014\n\004code\030\001 "
            "\001(\005\"\036\n\014LeaveGameReq\022\016\n\006userid\030\001 \001(\005\"\035\n\rL"
            "eaveGameResp\022\014\n\004code\030\001 \001(\005\"\033\n\tGiveUpReq\022"
            "\016\n\006userid\030\001 \001(\005\"\032\n\nGiveUpResp\022\014\n\004code\030\001 "
            "\001(\005\"\"\n\020Looker2PlayerReq\022\016\n\006userid\030\001 \001(\005\""
            "2\n\021Looker2PlayerResp\022\014\n\004code\030\001 \001(\005\022\017\n\007ch"
            "airno\030\002 \001(\005\"\"\n\020Player2LookerReq\022\016\n\006useri"
            "d\030\001 \001(\005\"!\n\021Player2LookerResp\022\014\n\004code\030\001 \001"
            "(\005\" \n\016SwitchTableReq\022\016\n\006userid\030\001 \001(\005\"A\n\017"
            "SwitchTableResp\022\014\n\004code\030\001 \001(\005\022\017\n\007tableno"
            "\030\002 \001(\005\022\017\n\007chairno\030\003 \001(\005\"+\n\014TableChatReq\022"
            "\016\n\006userid\030\001 \001(\005\022\013\n\003msg\030\002 \001(\t\".\n\017TableCha"
            "tNotify\022\016\n\006userid\030\001 \001(\005\022\013\n\003msg\030\002 \001(\t\"\035\n\r"
            "TableChatResp\022\014\n\004code\030\001 \001(\005\"A\n\020UserActio"
            "nNotify\022\016\n\006action\030\001 \001(\005\022\035\n\004user\030\002 \001(\0132\017."
            "game.base.User\"<\n\024CountdownStartNotify\022\017"
            "\n\007tableno\030\001 \001(\005\022\023\n\013countdown_s\030\002 \001(\005\"&\n\023"
            "CountdownStopNotify\022\017\n\007tableno\030\001 \001(\005\"\"\n\017"
            "GameStartNotify\022\017\n\007tableno\030\001 \001(\005\"F\n\022Play"
            "erGiveupNotify\022\016\n\006userid\030\001 \001(\005\022\017\n\007chairn"
            "o\030\002 \001(\005\022\017\n\007tableno\030\003 \001(\005\"/\n\014StartGameReq"
            "\022\016\n\006roomid\030\001 \001(\005\022\017\n\007tableno\030\002 \001(\005\"\273\001\n\020Ga"
            "meResultNotify\022\017\n\007tableno\030\001 \001(\005\022\022\n\nbout_"
            "count\030\002 \001(\005\022\024\n\014banker_chair\030\003 \001(\005\022\024\n\014bas"
            "e_deposit\030\004 \001(\003\022+\n\014user_results\030\005 \003(\0132\025."
            "game.base.UserResult\022)\n\013custom_data\030\006 \001("
            "\0132\024.game.base.BytesData\"(\n\023RobotSvrValid"
            "ateReq\022\021\n\tclient_id\030\001 \001(\005\"$\n\024RobotSvrVal"
            "idateResp\022\014\n\004code\030\001 \001(\005\"3\n\017GetGameUsersR"
            "eq\022\020\n\010clientid\030\001 \001(\005\022\016\n\006roomid\030\002 \001(\005\"`\n\020"
            "GetGameUsersResp\022\014\n\004code\030\001 \001(\005\022\036\n\005rooms\030"
            "\002 \003(\0132\017.game.base.Room\022\036\n\005users\030\003 \003(\0132\017."
            "game.base.User\"\205\001\n\026RS_UserEnterGameNotif"
            "y\022\016\n\006userid\030\001 \001(\005\022\017\n\007tableno\030\002 \001(\005\022\017\n\007ch"
            "airno\030\003 \001(\005\022\021\n\tuser_type\030\004 \001(\005\022&\n\troom_d"
            "ata\030\005 \001(\0132\023.game.base.RoomData\"_\n\033RS_Swi"
            "tchLookerPlayerNotify\022\016\n\006userid\030\001 \001(\005\022\016\n"
            "\006roomid\030\002 \001(\005\022\017\n\007tableno\030\003 \001(\005\022\017\n\007chairn"
            "o\030\004 \001(\005\"[\n\022RS_StartGameNotify\022\016\n\006roomid\030"
            "\001 \001(\005\022\017\n\007tableno\030\002 \001(\005\022$\n\006chairs\030\003 \003(\0132\024"
            ".game.base.ChairInfo\"^\n\032RS_UserRefreshRe"
            "sultNotify\022\016\n\006userid\030\001 \001(\005\022\016\n\006roomid\030\002 \001"
            "(\005\022\017\n\007tableno\030\003 \001(\005\022\017\n\007chairno\030\004 \001(\005\"9\n\026"
            "RS_RefreshResultNotify\022\016\n\006roomid\030\001 \001(\005\022\017"
            "\n\007tableno\030\002 \001(\005\"I\n\026RS_UserLeaveGameNotif"
            "y\022\016\n\006userid\030\001 \001(\005\022\016\n\006roomid\030\002 \001(\005\022\017\n\007tab"
            "leno\030\003 \001(\005\"u\n\024RS_SwitchTableNotify\022\016\n\006us"
            "erid\030\001 \001(\005\022\016\n\006roomid\030\002 \001(\005\022\023\n\013old_tablen"
            "o\030\003 \001(\005\022\023\n\013new_tableno\030\004 \001(\005\022\023\n\013new_chai"
            "rno\030\005 \001(\005"
        };
        ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
            descriptor, 3729);
        ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
            "game_base.proto", &protobuf_RegisterTypes);
    }

    void AddDescriptors() {
        static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
        ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
    }
    // Force AddDescriptors() to be called at dynamic initialization time.
    struct StaticDescriptorInitializer {
        StaticDescriptorInitializer() {
            AddDescriptors();
        }
    } static_descriptor_initializer;
}  // namespace protobuf_game_5fbase_2eproto
namespace game {
    namespace base {

        // ===================================================================

        void BytesData::InitAsDefaultInstance() {}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
        const int BytesData::kDataFieldNumber;
        const int BytesData::kDataLenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

        BytesData::BytesData()
            : ::google::protobuf::Message(), _internal_metadata_(NULL) {
            if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
                ::protobuf_game_5fbase_2eproto::InitDefaultsBytesData();
            }
            SharedCtor();
            // @@protoc_insertion_point(constructor:game.base.BytesData)
        }
        BytesData::BytesData(const BytesData& from)
            : ::google::protobuf::Message(),
            _internal_metadata_(NULL),
            _has_bits_(from._has_bits_),
            _cached_size_(0) {
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
            if (from.has_data()) {
                data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
            }
            data_len_ = from.data_len_;
            // @@protoc_insertion_point(copy_constructor:game.base.BytesData)
        }

        void BytesData::SharedCtor() {
            _cached_size_ = 0;
            data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
            data_len_ = 0;
        }

        BytesData::~BytesData() {
            // @@protoc_insertion_point(destructor:game.base.BytesData)
            SharedDtor();
        }

        void BytesData::SharedDtor() {
            data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }

        void BytesData::SetCachedSize(int size) const {
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
        }
        const ::google::protobuf::Descriptor* BytesData::descriptor() {
            ::protobuf_game_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
            return ::protobuf_game_5fbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
        }

        const BytesData& BytesData::default_instance() {
            ::protobuf_game_5fbase_2eproto::InitDefaultsBytesData();
            return *internal_default_instance();
        }

        BytesData* BytesData::New(::google::protobuf::Arena* arena) const {
            BytesData* n = new BytesData;
            if (arena != NULL) {
                arena->Own(n);
            }
            return n;
        }

        void BytesData::Clear() {
            // @@protoc_insertion_point(message_clear_start:game.base.BytesData)
            ::google::protobuf::uint32 cached_has_bits = 0;
            // Prevent compiler warnings about cached_has_bits being unused
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
                GOOGLE_DCHECK(!data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
                (*data_.UnsafeRawStringPointer())->clear();
            }
            data_len_ = 0;
            _has_bits_.Clear();
            _internal_metadata_.Clear();
        }

        bool BytesData::MergePartialFromCodedStream(
            ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
            ::google::protobuf::uint32 tag;
            // @@protoc_insertion_point(parse_start:game.base.BytesData)
            for (;;) {
                ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
                tag = p.first;
                if (!p.second) goto handle_unusual;
                switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
                    // optional bytes data = 1;
                    case 1: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
                            DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                                input, this->mutable_data()));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // optional int32 data_len = 2;
                    case 2: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
                            set_has_data_len();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &data_len_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                    default: {
handle_unusual:
                        if (tag == 0) {
                            goto success;
                        }
                        DO_(::google::protobuf::internal::WireFormat::SkipField(
                            input, tag, _internal_metadata_.mutable_unknown_fields()));
                        break;
                    }
                }
            }
success:
            // @@protoc_insertion_point(parse_success:game.base.BytesData)
            return true;
failure:
            // @@protoc_insertion_point(parse_failure:game.base.BytesData)
            return false;
#undef DO_
        }

        void BytesData::SerializeWithCachedSizes(
            ::google::protobuf::io::CodedOutputStream* output) const {
            // @@protoc_insertion_point(serialize_start:game.base.BytesData)
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            // optional bytes data = 1;
            if (cached_has_bits & 0x00000001u) {
                ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
                    1, this->data(), output);
            }

            // optional int32 data_len = 2;
            if (cached_has_bits & 0x00000002u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->data_len(), output);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
                    _internal_metadata_.unknown_fields(), output);
            }
            // @@protoc_insertion_point(serialize_end:game.base.BytesData)
        }

        ::google::protobuf::uint8* BytesData::InternalSerializeWithCachedSizesToArray(
            bool deterministic, ::google::protobuf::uint8* target) const {
            (void) deterministic; // Unused
            // @@protoc_insertion_point(serialize_to_array_start:game.base.BytesData)
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            // optional bytes data = 1;
            if (cached_has_bits & 0x00000001u) {
                target =
                    ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
                    1, this->data(), target);
            }

            // optional int32 data_len = 2;
            if (cached_has_bits & 0x00000002u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->data_len(), target);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                    _internal_metadata_.unknown_fields(), target);
            }
            // @@protoc_insertion_point(serialize_to_array_end:game.base.BytesData)
            return target;
        }

        size_t BytesData::ByteSizeLong() const {
            // @@protoc_insertion_point(message_byte_size_start:game.base.BytesData)
            size_t total_size = 0;

            if (_internal_metadata_.have_unknown_fields()) {
                total_size +=
                    ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
                    _internal_metadata_.unknown_fields());
            }
            if (_has_bits_[0 / 32] & 3u) {
                // optional bytes data = 1;
                if (has_data()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::BytesSize(
                        this->data());
                }

                // optional int32 data_len = 2;
                if (has_data_len()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::Int32Size(
                        this->data_len());
                }

            }
            int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = cached_size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
            return total_size;
        }

        void BytesData::MergeFrom(const ::google::protobuf::Message& from) {
            // @@protoc_insertion_point(generalized_merge_from_start:game.base.BytesData)
            GOOGLE_DCHECK_NE(&from, this);
            const BytesData* source =
                ::google::protobuf::internal::DynamicCastToGenerated<const BytesData>(
                &from);
            if (source == NULL) {
                // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.base.BytesData)
                ::google::protobuf::internal::ReflectionOps::Merge(from, this);
            } else {
                // @@protoc_insertion_point(generalized_merge_from_cast_success:game.base.BytesData)
                MergeFrom(*source);
            }
        }

        void BytesData::MergeFrom(const BytesData& from) {
            // @@protoc_insertion_point(class_specific_merge_from_start:game.base.BytesData)
            GOOGLE_DCHECK_NE(&from, this);
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = from._has_bits_[0];
            if (cached_has_bits & 3u) {
                if (cached_has_bits & 0x00000001u) {
                    set_has_data();
                    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
                }
                if (cached_has_bits & 0x00000002u) {
                    data_len_ = from.data_len_;
                }
                _has_bits_[0] |= cached_has_bits;
            }
        }

        void BytesData::CopyFrom(const ::google::protobuf::Message& from) {
            // @@protoc_insertion_point(generalized_copy_from_start:game.base.BytesData)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        void BytesData::CopyFrom(const BytesData& from) {
            // @@protoc_insertion_point(class_specific_copy_from_start:game.base.BytesData)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        bool BytesData::IsInitialized() const {
            return true;
        }

        void BytesData::Swap(BytesData* other) {
            if (other == this) return;
            InternalSwap(other);
        }
        void BytesData::InternalSwap(BytesData* other) {
            using std::swap;
            data_.Swap(&other->data_);
            swap(data_len_, other->data_len_);
            swap(_has_bits_[0], other->_has_bits_[0]);
            _internal_metadata_.Swap(&other->_internal_metadata_);
            swap(_cached_size_, other->_cached_size_);
        }

        ::google::protobuf::Metadata BytesData::GetMetadata() const {
            protobuf_game_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
            return ::protobuf_game_5fbase_2eproto::file_level_metadata[kIndexInFileMessages];
        }


        // ===================================================================

        void RoomData::InitAsDefaultInstance() {}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
        const int RoomData::kRoomidFieldNumber;
        const int RoomData::kOptionsFieldNumber;
        const int RoomData::kConfigsFieldNumber;
        const int RoomData::kManagesFieldNumber;
        const int RoomData::kMaxTableCoutFieldNumber;
        const int RoomData::kChaircountPerTableFieldNumber;
        const int RoomData::kMinDepositFieldNumber;
        const int RoomData::kMaxDepositFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

        RoomData::RoomData()
            : ::google::protobuf::Message(), _internal_metadata_(NULL) {
            if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
                ::protobuf_game_5fbase_2eproto::InitDefaultsRoomData();
            }
            SharedCtor();
            // @@protoc_insertion_point(constructor:game.base.RoomData)
        }
        RoomData::RoomData(const RoomData& from)
            : ::google::protobuf::Message(),
            _internal_metadata_(NULL),
            _has_bits_(from._has_bits_),
            _cached_size_(0) {
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            ::memcpy(&roomid_, &from.roomid_,
                     static_cast<size_t>(reinterpret_cast<char*>(&max_deposit_) -
                     reinterpret_cast<char*>(&roomid_)) + sizeof(max_deposit_));
            // @@protoc_insertion_point(copy_constructor:game.base.RoomData)
        }

        void RoomData::SharedCtor() {
            _cached_size_ = 0;
            ::memset(&roomid_, 0, static_cast<size_t>(
                reinterpret_cast<char*>(&max_deposit_) -
                reinterpret_cast<char*>(&roomid_)) + sizeof(max_deposit_));
        }

        RoomData::~RoomData() {
            // @@protoc_insertion_point(destructor:game.base.RoomData)
            SharedDtor();
        }

        void RoomData::SharedDtor() {}

        void RoomData::SetCachedSize(int size) const {
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
        }
        const ::google::protobuf::Descriptor* RoomData::descriptor() {
            ::protobuf_game_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
            return ::protobuf_game_5fbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
        }

        const RoomData& RoomData::default_instance() {
            ::protobuf_game_5fbase_2eproto::InitDefaultsRoomData();
            return *internal_default_instance();
        }

        RoomData* RoomData::New(::google::protobuf::Arena* arena) const {
            RoomData* n = new RoomData;
            if (arena != NULL) {
                arena->Own(n);
            }
            return n;
        }

        void RoomData::Clear() {
            // @@protoc_insertion_point(message_clear_start:game.base.RoomData)
            ::google::protobuf::uint32 cached_has_bits = 0;
            // Prevent compiler warnings about cached_has_bits being unused
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            if (cached_has_bits & 255u) {
                ::memset(&roomid_, 0, static_cast<size_t>(
                    reinterpret_cast<char*>(&max_deposit_) -
                    reinterpret_cast<char*>(&roomid_)) + sizeof(max_deposit_));
            }
            _has_bits_.Clear();
            _internal_metadata_.Clear();
        }

        bool RoomData::MergePartialFromCodedStream(
            ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
            ::google::protobuf::uint32 tag;
            // @@protoc_insertion_point(parse_start:game.base.RoomData)
            for (;;) {
                ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
                tag = p.first;
                if (!p.second) goto handle_unusual;
                switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
                    // optional int32 roomid = 1;
                    case 1: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
                            set_has_roomid();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &roomid_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // optional int32 options = 2;
                    case 2: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
                            set_has_options();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &options_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // optional int32 configs = 3;
                    case 3: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
                            set_has_configs();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &configs_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // optional int32 manages = 4;
                    case 4: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
                            set_has_manages();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &manages_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // optional int32 max_table_cout = 5;
                    case 5: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
                            set_has_max_table_cout();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &max_table_cout_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // optional int32 chaircount_per_table = 6;
                    case 6: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
                            set_has_chaircount_per_table();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &chaircount_per_table_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // optional int64 min_deposit = 7;
                    case 7: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
                            set_has_min_deposit();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                                input, &min_deposit_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // optional int64 max_deposit = 8;
                    case 8: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
                            set_has_max_deposit();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                                input, &max_deposit_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                    default: {
handle_unusual:
                        if (tag == 0) {
                            goto success;
                        }
                        DO_(::google::protobuf::internal::WireFormat::SkipField(
                            input, tag, _internal_metadata_.mutable_unknown_fields()));
                        break;
                    }
                }
            }
success:
            // @@protoc_insertion_point(parse_success:game.base.RoomData)
            return true;
failure:
            // @@protoc_insertion_point(parse_failure:game.base.RoomData)
            return false;
#undef DO_
        }

        void RoomData::SerializeWithCachedSizes(
            ::google::protobuf::io::CodedOutputStream* output) const {
            // @@protoc_insertion_point(serialize_start:game.base.RoomData)
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            // optional int32 roomid = 1;
            if (cached_has_bits & 0x00000001u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
            }

            // optional int32 options = 2;
            if (cached_has_bits & 0x00000002u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->options(), output);
            }

            // optional int32 configs = 3;
            if (cached_has_bits & 0x00000004u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->configs(), output);
            }

            // optional int32 manages = 4;
            if (cached_has_bits & 0x00000008u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->manages(), output);
            }

            // optional int32 max_table_cout = 5;
            if (cached_has_bits & 0x00000010u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->max_table_cout(), output);
            }

            // optional int32 chaircount_per_table = 6;
            if (cached_has_bits & 0x00000020u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->chaircount_per_table(), output);
            }

            // optional int64 min_deposit = 7;
            if (cached_has_bits & 0x00000040u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->min_deposit(), output);
            }

            // optional int64 max_deposit = 8;
            if (cached_has_bits & 0x00000080u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->max_deposit(), output);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
                    _internal_metadata_.unknown_fields(), output);
            }
            // @@protoc_insertion_point(serialize_end:game.base.RoomData)
        }

        ::google::protobuf::uint8* RoomData::InternalSerializeWithCachedSizesToArray(
            bool deterministic, ::google::protobuf::uint8* target) const {
            (void) deterministic; // Unused
            // @@protoc_insertion_point(serialize_to_array_start:game.base.RoomData)
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            // optional int32 roomid = 1;
            if (cached_has_bits & 0x00000001u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
            }

            // optional int32 options = 2;
            if (cached_has_bits & 0x00000002u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->options(), target);
            }

            // optional int32 configs = 3;
            if (cached_has_bits & 0x00000004u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->configs(), target);
            }

            // optional int32 manages = 4;
            if (cached_has_bits & 0x00000008u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->manages(), target);
            }

            // optional int32 max_table_cout = 5;
            if (cached_has_bits & 0x00000010u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->max_table_cout(), target);
            }

            // optional int32 chaircount_per_table = 6;
            if (cached_has_bits & 0x00000020u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->chaircount_per_table(), target);
            }

            // optional int64 min_deposit = 7;
            if (cached_has_bits & 0x00000040u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->min_deposit(), target);
            }

            // optional int64 max_deposit = 8;
            if (cached_has_bits & 0x00000080u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->max_deposit(), target);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                    _internal_metadata_.unknown_fields(), target);
            }
            // @@protoc_insertion_point(serialize_to_array_end:game.base.RoomData)
            return target;
        }

        size_t RoomData::ByteSizeLong() const {
            // @@protoc_insertion_point(message_byte_size_start:game.base.RoomData)
            size_t total_size = 0;

            if (_internal_metadata_.have_unknown_fields()) {
                total_size +=
                    ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
                    _internal_metadata_.unknown_fields());
            }
            if (_has_bits_[0 / 32] & 255u) {
                // optional int32 roomid = 1;
                if (has_roomid()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::Int32Size(
                        this->roomid());
                }

                // optional int32 options = 2;
                if (has_options()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::Int32Size(
                        this->options());
                }

                // optional int32 configs = 3;
                if (has_configs()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::Int32Size(
                        this->configs());
                }

                // optional int32 manages = 4;
                if (has_manages()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::Int32Size(
                        this->manages());
                }

                // optional int32 max_table_cout = 5;
                if (has_max_table_cout()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::Int32Size(
                        this->max_table_cout());
                }

                // optional int32 chaircount_per_table = 6;
                if (has_chaircount_per_table()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::Int32Size(
                        this->chaircount_per_table());
                }

                // optional int64 min_deposit = 7;
                if (has_min_deposit()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::Int64Size(
                        this->min_deposit());
                }

                // optional int64 max_deposit = 8;
                if (has_max_deposit()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::Int64Size(
                        this->max_deposit());
                }

            }
            int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = cached_size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
            return total_size;
        }

        void RoomData::MergeFrom(const ::google::protobuf::Message& from) {
            // @@protoc_insertion_point(generalized_merge_from_start:game.base.RoomData)
            GOOGLE_DCHECK_NE(&from, this);
            const RoomData* source =
                ::google::protobuf::internal::DynamicCastToGenerated<const RoomData>(
                &from);
            if (source == NULL) {
                // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.base.RoomData)
                ::google::protobuf::internal::ReflectionOps::Merge(from, this);
            } else {
                // @@protoc_insertion_point(generalized_merge_from_cast_success:game.base.RoomData)
                MergeFrom(*source);
            }
        }

        void RoomData::MergeFrom(const RoomData& from) {
            // @@protoc_insertion_point(class_specific_merge_from_start:game.base.RoomData)
            GOOGLE_DCHECK_NE(&from, this);
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = from._has_bits_[0];
            if (cached_has_bits & 255u) {
                if (cached_has_bits & 0x00000001u) {
                    roomid_ = from.roomid_;
                }
                if (cached_has_bits & 0x00000002u) {
                    options_ = from.options_;
                }
                if (cached_has_bits & 0x00000004u) {
                    configs_ = from.configs_;
                }
                if (cached_has_bits & 0x00000008u) {
                    manages_ = from.manages_;
                }
                if (cached_has_bits & 0x00000010u) {
                    max_table_cout_ = from.max_table_cout_;
                }
                if (cached_has_bits & 0x00000020u) {
                    chaircount_per_table_ = from.chaircount_per_table_;
                }
                if (cached_has_bits & 0x00000040u) {
                    min_deposit_ = from.min_deposit_;
                }
                if (cached_has_bits & 0x00000080u) {
                    max_deposit_ = from.max_deposit_;
                }
                _has_bits_[0] |= cached_has_bits;
            }
        }

        void RoomData::CopyFrom(const ::google::protobuf::Message& from) {
            // @@protoc_insertion_point(generalized_copy_from_start:game.base.RoomData)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        void RoomData::CopyFrom(const RoomData& from) {
            // @@protoc_insertion_point(class_specific_copy_from_start:game.base.RoomData)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        bool RoomData::IsInitialized() const {
            return true;
        }

        void RoomData::Swap(RoomData* other) {
            if (other == this) return;
            InternalSwap(other);
        }
        void RoomData::InternalSwap(RoomData* other) {
            using std::swap;
            swap(roomid_, other->roomid_);
            swap(options_, other->options_);
            swap(configs_, other->configs_);
            swap(manages_, other->manages_);
            swap(max_table_cout_, other->max_table_cout_);
            swap(chaircount_per_table_, other->chaircount_per_table_);
            swap(min_deposit_, other->min_deposit_);
            swap(max_deposit_, other->max_deposit_);
            swap(_has_bits_[0], other->_has_bits_[0]);
            _internal_metadata_.Swap(&other->_internal_metadata_);
            swap(_cached_size_, other->_cached_size_);
        }

        ::google::protobuf::Metadata RoomData::GetMetadata() const {
            protobuf_game_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
            return ::protobuf_game_5fbase_2eproto::file_level_metadata[kIndexInFileMessages];
        }


        // ===================================================================

        void User::InitAsDefaultInstance() {}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
        const int User::kUseridFieldNumber;
        const int User::kRoomidFieldNumber;
        const int User::kTablenoFieldNumber;
        const int User::kChairnoFieldNumber;
        const int User::kUserTypeFieldNumber;
        const int User::kDepositFieldNumber;
        const int User::kTotalBoutFieldNumber;
        const int User::kOfflineCountFieldNumber;
        const int User::kEnterTimestampFieldNumber;
        const int User::kHeadUrlFieldNumber;
        const int User::kHardidFieldNumber;
        const int User::kNickNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

        User::User()
            : ::google::protobuf::Message(), _internal_metadata_(NULL) {
            if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
                ::protobuf_game_5fbase_2eproto::InitDefaultsUser();
            }
            SharedCtor();
            // @@protoc_insertion_point(constructor:game.base.User)
        }
        User::User(const User& from)
            : ::google::protobuf::Message(),
            _internal_metadata_(NULL),
            _has_bits_(from._has_bits_),
            _cached_size_(0) {
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            head_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
            if (from.has_head_url()) {
                head_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.head_url_);
            }
            hardid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
            if (from.has_hardid()) {
                hardid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hardid_);
            }
            nick_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
            if (from.has_nick_name()) {
                nick_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nick_name_);
            }
            ::memcpy(&userid_, &from.userid_,
                     static_cast<size_t>(reinterpret_cast<char*>(&enter_timestamp_) -
                     reinterpret_cast<char*>(&userid_)) + sizeof(enter_timestamp_));
            // @@protoc_insertion_point(copy_constructor:game.base.User)
        }

        void User::SharedCtor() {
            _cached_size_ = 0;
            head_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
            hardid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
            nick_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
            ::memset(&userid_, 0, static_cast<size_t>(
                reinterpret_cast<char*>(&enter_timestamp_) -
                reinterpret_cast<char*>(&userid_)) + sizeof(enter_timestamp_));
        }

        User::~User() {
            // @@protoc_insertion_point(destructor:game.base.User)
            SharedDtor();
        }

        void User::SharedDtor() {
            head_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
            hardid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
            nick_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }

        void User::SetCachedSize(int size) const {
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
        }
        const ::google::protobuf::Descriptor* User::descriptor() {
            ::protobuf_game_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
            return ::protobuf_game_5fbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
        }

        const User& User::default_instance() {
            ::protobuf_game_5fbase_2eproto::InitDefaultsUser();
            return *internal_default_instance();
        }

        User* User::New(::google::protobuf::Arena* arena) const {
            User* n = new User;
            if (arena != NULL) {
                arena->Own(n);
            }
            return n;
        }

        void User::Clear() {
            // @@protoc_insertion_point(message_clear_start:game.base.User)
            ::google::protobuf::uint32 cached_has_bits = 0;
            // Prevent compiler warnings about cached_has_bits being unused
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            if (cached_has_bits & 7u) {
                if (cached_has_bits & 0x00000001u) {
                    GOOGLE_DCHECK(!head_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
                    (*head_url_.UnsafeRawStringPointer())->clear();
                }
                if (cached_has_bits & 0x00000002u) {
                    GOOGLE_DCHECK(!hardid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
                    (*hardid_.UnsafeRawStringPointer())->clear();
                }
                if (cached_has_bits & 0x00000004u) {
                    GOOGLE_DCHECK(!nick_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
                    (*nick_name_.UnsafeRawStringPointer())->clear();
                }
            }
            if (cached_has_bits & 248u) {
                ::memset(&userid_, 0, static_cast<size_t>(
                    reinterpret_cast<char*>(&deposit_) -
                    reinterpret_cast<char*>(&userid_)) + sizeof(deposit_));
            }
            if (cached_has_bits & 3840u) {
                ::memset(&user_type_, 0, static_cast<size_t>(
                    reinterpret_cast<char*>(&enter_timestamp_) -
                    reinterpret_cast<char*>(&user_type_)) + sizeof(enter_timestamp_));
            }
            _has_bits_.Clear();
            _internal_metadata_.Clear();
        }

        bool User::MergePartialFromCodedStream(
            ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
            ::google::protobuf::uint32 tag;
            // @@protoc_insertion_point(parse_start:game.base.User)
            for (;;) {
                ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
                tag = p.first;
                if (!p.second) goto handle_unusual;
                switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
                    // optional int32 userid = 1;
                    case 1: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
                            set_has_userid();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &userid_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // optional int32 roomid = 2;
                    case 2: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
                            set_has_roomid();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &roomid_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // optional int32 tableno = 3;
                    case 3: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
                            set_has_tableno();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &tableno_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // optional int32 chairno = 4;
                    case 4: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
                            set_has_chairno();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &chairno_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // optional int32 user_type = 5;
                    case 5: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
                            set_has_user_type();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &user_type_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // optional int64 deposit = 6;
                    case 6: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
                            set_has_deposit();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                                input, &deposit_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // optional int32 total_bout = 7;
                    case 7: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
                            set_has_total_bout();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &total_bout_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // optional int32 offline_count = 8;
                    case 8: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
                            set_has_offline_count();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &offline_count_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // optional int32 enter_timestamp = 9;
                    case 9: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
                            set_has_enter_timestamp();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &enter_timestamp_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // optional string head_url = 10;
                    case 10: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
                            DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                                input, this->mutable_head_url()));
                            ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
                                this->head_url().data(), static_cast<int>(this->head_url().length()),
                                ::google::protobuf::internal::WireFormat::PARSE,
                                "game.base.User.head_url");
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                             // optional string hardid = 11;
                    case 11: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
                            DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                                input, this->mutable_hardid()));
                            ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
                                this->hardid().data(), static_cast<int>(this->hardid().length()),
                                ::google::protobuf::internal::WireFormat::PARSE,
                                "game.base.User.hardid");
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                             // optional string nick_name = 12;
                    case 12: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
                            DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                                input, this->mutable_nick_name()));
                            ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
                                this->nick_name().data(), static_cast<int>(this->nick_name().length()),
                                ::google::protobuf::internal::WireFormat::PARSE,
                                "game.base.User.nick_name");
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                    default: {
handle_unusual:
                        if (tag == 0) {
                            goto success;
                        }
                        DO_(::google::protobuf::internal::WireFormat::SkipField(
                            input, tag, _internal_metadata_.mutable_unknown_fields()));
                        break;
                    }
                }
            }
success:
            // @@protoc_insertion_point(parse_success:game.base.User)
            return true;
failure:
            // @@protoc_insertion_point(parse_failure:game.base.User)
            return false;
#undef DO_
        }

        void User::SerializeWithCachedSizes(
            ::google::protobuf::io::CodedOutputStream* output) const {
            // @@protoc_insertion_point(serialize_start:game.base.User)
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            // optional int32 userid = 1;
            if (cached_has_bits & 0x00000008u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
            }

            // optional int32 roomid = 2;
            if (cached_has_bits & 0x00000010u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roomid(), output);
            }

            // optional int32 tableno = 3;
            if (cached_has_bits & 0x00000020u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->tableno(), output);
            }

            // optional int32 chairno = 4;
            if (cached_has_bits & 0x00000040u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->chairno(), output);
            }

            // optional int32 user_type = 5;
            if (cached_has_bits & 0x00000100u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->user_type(), output);
            }

            // optional int64 deposit = 6;
            if (cached_has_bits & 0x00000080u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->deposit(), output);
            }

            // optional int32 total_bout = 7;
            if (cached_has_bits & 0x00000200u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->total_bout(), output);
            }

            // optional int32 offline_count = 8;
            if (cached_has_bits & 0x00000400u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->offline_count(), output);
            }

            // optional int32 enter_timestamp = 9;
            if (cached_has_bits & 0x00000800u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->enter_timestamp(), output);
            }

            // optional string head_url = 10;
            if (cached_has_bits & 0x00000001u) {
                ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
                    this->head_url().data(), static_cast<int>(this->head_url().length()),
                    ::google::protobuf::internal::WireFormat::SERIALIZE,
                    "game.base.User.head_url");
                ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
                    10, this->head_url(), output);
            }

            // optional string hardid = 11;
            if (cached_has_bits & 0x00000002u) {
                ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
                    this->hardid().data(), static_cast<int>(this->hardid().length()),
                    ::google::protobuf::internal::WireFormat::SERIALIZE,
                    "game.base.User.hardid");
                ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
                    11, this->hardid(), output);
            }

            // optional string nick_name = 12;
            if (cached_has_bits & 0x00000004u) {
                ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
                    this->nick_name().data(), static_cast<int>(this->nick_name().length()),
                    ::google::protobuf::internal::WireFormat::SERIALIZE,
                    "game.base.User.nick_name");
                ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
                    12, this->nick_name(), output);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
                    _internal_metadata_.unknown_fields(), output);
            }
            // @@protoc_insertion_point(serialize_end:game.base.User)
        }

        ::google::protobuf::uint8* User::InternalSerializeWithCachedSizesToArray(
            bool deterministic, ::google::protobuf::uint8* target) const {
            (void) deterministic; // Unused
            // @@protoc_insertion_point(serialize_to_array_start:game.base.User)
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            // optional int32 userid = 1;
            if (cached_has_bits & 0x00000008u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
            }

            // optional int32 roomid = 2;
            if (cached_has_bits & 0x00000010u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roomid(), target);
            }

            // optional int32 tableno = 3;
            if (cached_has_bits & 0x00000020u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->tableno(), target);
            }

            // optional int32 chairno = 4;
            if (cached_has_bits & 0x00000040u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->chairno(), target);
            }

            // optional int32 user_type = 5;
            if (cached_has_bits & 0x00000100u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->user_type(), target);
            }

            // optional int64 deposit = 6;
            if (cached_has_bits & 0x00000080u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->deposit(), target);
            }

            // optional int32 total_bout = 7;
            if (cached_has_bits & 0x00000200u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->total_bout(), target);
            }

            // optional int32 offline_count = 8;
            if (cached_has_bits & 0x00000400u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->offline_count(), target);
            }

            // optional int32 enter_timestamp = 9;
            if (cached_has_bits & 0x00000800u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->enter_timestamp(), target);
            }

            // optional string head_url = 10;
            if (cached_has_bits & 0x00000001u) {
                ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
                    this->head_url().data(), static_cast<int>(this->head_url().length()),
                    ::google::protobuf::internal::WireFormat::SERIALIZE,
                    "game.base.User.head_url");
                target =
                    ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
                    10, this->head_url(), target);
            }

            // optional string hardid = 11;
            if (cached_has_bits & 0x00000002u) {
                ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
                    this->hardid().data(), static_cast<int>(this->hardid().length()),
                    ::google::protobuf::internal::WireFormat::SERIALIZE,
                    "game.base.User.hardid");
                target =
                    ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
                    11, this->hardid(), target);
            }

            // optional string nick_name = 12;
            if (cached_has_bits & 0x00000004u) {
                ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
                    this->nick_name().data(), static_cast<int>(this->nick_name().length()),
                    ::google::protobuf::internal::WireFormat::SERIALIZE,
                    "game.base.User.nick_name");
                target =
                    ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
                    12, this->nick_name(), target);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                    _internal_metadata_.unknown_fields(), target);
            }
            // @@protoc_insertion_point(serialize_to_array_end:game.base.User)
            return target;
        }

        size_t User::ByteSizeLong() const {
            // @@protoc_insertion_point(message_byte_size_start:game.base.User)
            size_t total_size = 0;

            if (_internal_metadata_.have_unknown_fields()) {
                total_size +=
                    ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
                    _internal_metadata_.unknown_fields());
            }
            if (_has_bits_[0 / 32] & 255u) {
                // optional string head_url = 10;
                if (has_head_url()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::StringSize(
                        this->head_url());
                }

                // optional string hardid = 11;
                if (has_hardid()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::StringSize(
                        this->hardid());
                }

                // optional string nick_name = 12;
                if (has_nick_name()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::StringSize(
                        this->nick_name());
                }

                // optional int32 userid = 1;
                if (has_userid()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::Int32Size(
                        this->userid());
                }

                // optional int32 roomid = 2;
                if (has_roomid()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::Int32Size(
                        this->roomid());
                }

                // optional int32 tableno = 3;
                if (has_tableno()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::Int32Size(
                        this->tableno());
                }

                // optional int32 chairno = 4;
                if (has_chairno()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::Int32Size(
                        this->chairno());
                }

                // optional int64 deposit = 6;
                if (has_deposit()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::Int64Size(
                        this->deposit());
                }

            }
            if (_has_bits_[8 / 32] & 3840u) {
                // optional int32 user_type = 5;
                if (has_user_type()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::Int32Size(
                        this->user_type());
                }

                // optional int32 total_bout = 7;
                if (has_total_bout()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::Int32Size(
                        this->total_bout());
                }

                // optional int32 offline_count = 8;
                if (has_offline_count()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::Int32Size(
                        this->offline_count());
                }

                // optional int32 enter_timestamp = 9;
                if (has_enter_timestamp()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::Int32Size(
                        this->enter_timestamp());
                }

            }
            int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = cached_size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
            return total_size;
        }

        void User::MergeFrom(const ::google::protobuf::Message& from) {
            // @@protoc_insertion_point(generalized_merge_from_start:game.base.User)
            GOOGLE_DCHECK_NE(&from, this);
            const User* source =
                ::google::protobuf::internal::DynamicCastToGenerated<const User>(
                &from);
            if (source == NULL) {
                // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.base.User)
                ::google::protobuf::internal::ReflectionOps::Merge(from, this);
            } else {
                // @@protoc_insertion_point(generalized_merge_from_cast_success:game.base.User)
                MergeFrom(*source);
            }
        }

        void User::MergeFrom(const User& from) {
            // @@protoc_insertion_point(class_specific_merge_from_start:game.base.User)
            GOOGLE_DCHECK_NE(&from, this);
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = from._has_bits_[0];
            if (cached_has_bits & 255u) {
                if (cached_has_bits & 0x00000001u) {
                    set_has_head_url();
                    head_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.head_url_);
                }
                if (cached_has_bits & 0x00000002u) {
                    set_has_hardid();
                    hardid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hardid_);
                }
                if (cached_has_bits & 0x00000004u) {
                    set_has_nick_name();
                    nick_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nick_name_);
                }
                if (cached_has_bits & 0x00000008u) {
                    userid_ = from.userid_;
                }
                if (cached_has_bits & 0x00000010u) {
                    roomid_ = from.roomid_;
                }
                if (cached_has_bits & 0x00000020u) {
                    tableno_ = from.tableno_;
                }
                if (cached_has_bits & 0x00000040u) {
                    chairno_ = from.chairno_;
                }
                if (cached_has_bits & 0x00000080u) {
                    deposit_ = from.deposit_;
                }
                _has_bits_[0] |= cached_has_bits;
            }
            if (cached_has_bits & 3840u) {
                if (cached_has_bits & 0x00000100u) {
                    user_type_ = from.user_type_;
                }
                if (cached_has_bits & 0x00000200u) {
                    total_bout_ = from.total_bout_;
                }
                if (cached_has_bits & 0x00000400u) {
                    offline_count_ = from.offline_count_;
                }
                if (cached_has_bits & 0x00000800u) {
                    enter_timestamp_ = from.enter_timestamp_;
                }
                _has_bits_[0] |= cached_has_bits;
            }
        }

        void User::CopyFrom(const ::google::protobuf::Message& from) {
            // @@protoc_insertion_point(generalized_copy_from_start:game.base.User)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        void User::CopyFrom(const User& from) {
            // @@protoc_insertion_point(class_specific_copy_from_start:game.base.User)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        bool User::IsInitialized() const {
            return true;
        }

        void User::Swap(User* other) {
            if (other == this) return;
            InternalSwap(other);
        }
        void User::InternalSwap(User* other) {
            using std::swap;
            head_url_.Swap(&other->head_url_);
            hardid_.Swap(&other->hardid_);
            nick_name_.Swap(&other->nick_name_);
            swap(userid_, other->userid_);
            swap(roomid_, other->roomid_);
            swap(tableno_, other->tableno_);
            swap(chairno_, other->chairno_);
            swap(deposit_, other->deposit_);
            swap(user_type_, other->user_type_);
            swap(total_bout_, other->total_bout_);
            swap(offline_count_, other->offline_count_);
            swap(enter_timestamp_, other->enter_timestamp_);
            swap(_has_bits_[0], other->_has_bits_[0]);
            _internal_metadata_.Swap(&other->_internal_metadata_);
            swap(_cached_size_, other->_cached_size_);
        }

        ::google::protobuf::Metadata User::GetMetadata() const {
            protobuf_game_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
            return ::protobuf_game_5fbase_2eproto::file_level_metadata[kIndexInFileMessages];
        }


        // ===================================================================

        void TableUserInfo::InitAsDefaultInstance() {}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
        const int TableUserInfo::kUseridFieldNumber;
        const int TableUserInfo::kOfflineCountFieldNumber;
        const int TableUserInfo::kBoutCountFieldNumber;
        const int TableUserInfo::kBindTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

        TableUserInfo::TableUserInfo()
            : ::google::protobuf::Message(), _internal_metadata_(NULL) {
            if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
                ::protobuf_game_5fbase_2eproto::InitDefaultsTableUserInfo();
            }
            SharedCtor();
            // @@protoc_insertion_point(constructor:game.base.TableUserInfo)
        }
        TableUserInfo::TableUserInfo(const TableUserInfo& from)
            : ::google::protobuf::Message(),
            _internal_metadata_(NULL),
            _has_bits_(from._has_bits_),
            _cached_size_(0) {
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            ::memcpy(&userid_, &from.userid_,
                     static_cast<size_t>(reinterpret_cast<char*>(&bind_timestamp_) -
                     reinterpret_cast<char*>(&userid_)) + sizeof(bind_timestamp_));
            // @@protoc_insertion_point(copy_constructor:game.base.TableUserInfo)
        }

        void TableUserInfo::SharedCtor() {
            _cached_size_ = 0;
            ::memset(&userid_, 0, static_cast<size_t>(
                reinterpret_cast<char*>(&bind_timestamp_) -
                reinterpret_cast<char*>(&userid_)) + sizeof(bind_timestamp_));
        }

        TableUserInfo::~TableUserInfo() {
            // @@protoc_insertion_point(destructor:game.base.TableUserInfo)
            SharedDtor();
        }

        void TableUserInfo::SharedDtor() {}

        void TableUserInfo::SetCachedSize(int size) const {
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
        }
        const ::google::protobuf::Descriptor* TableUserInfo::descriptor() {
            ::protobuf_game_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
            return ::protobuf_game_5fbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
        }

        const TableUserInfo& TableUserInfo::default_instance() {
            ::protobuf_game_5fbase_2eproto::InitDefaultsTableUserInfo();
            return *internal_default_instance();
        }

        TableUserInfo* TableUserInfo::New(::google::protobuf::Arena* arena) const {
            TableUserInfo* n = new TableUserInfo;
            if (arena != NULL) {
                arena->Own(n);
            }
            return n;
        }

        void TableUserInfo::Clear() {
            // @@protoc_insertion_point(message_clear_start:game.base.TableUserInfo)
            ::google::protobuf::uint32 cached_has_bits = 0;
            // Prevent compiler warnings about cached_has_bits being unused
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            if (cached_has_bits & 15u) {
                ::memset(&userid_, 0, static_cast<size_t>(
                    reinterpret_cast<char*>(&bind_timestamp_) -
                    reinterpret_cast<char*>(&userid_)) + sizeof(bind_timestamp_));
            }
            _has_bits_.Clear();
            _internal_metadata_.Clear();
        }

        bool TableUserInfo::MergePartialFromCodedStream(
            ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
            ::google::protobuf::uint32 tag;
            // @@protoc_insertion_point(parse_start:game.base.TableUserInfo)
            for (;;) {
                ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
                tag = p.first;
                if (!p.second) goto handle_unusual;
                switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
                    // optional int32 userid = 1;
                    case 1: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
                            set_has_userid();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &userid_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // optional int32 offline_count = 2;
                    case 2: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
                            set_has_offline_count();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &offline_count_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // optional int32 bout_count = 3;
                    case 3: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
                            set_has_bout_count();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &bout_count_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // optional int32 bind_timestamp = 4;
                    case 4: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
                            set_has_bind_timestamp();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &bind_timestamp_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                    default: {
handle_unusual:
                        if (tag == 0) {
                            goto success;
                        }
                        DO_(::google::protobuf::internal::WireFormat::SkipField(
                            input, tag, _internal_metadata_.mutable_unknown_fields()));
                        break;
                    }
                }
            }
success:
            // @@protoc_insertion_point(parse_success:game.base.TableUserInfo)
            return true;
failure:
            // @@protoc_insertion_point(parse_failure:game.base.TableUserInfo)
            return false;
#undef DO_
        }

        void TableUserInfo::SerializeWithCachedSizes(
            ::google::protobuf::io::CodedOutputStream* output) const {
            // @@protoc_insertion_point(serialize_start:game.base.TableUserInfo)
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            // optional int32 userid = 1;
            if (cached_has_bits & 0x00000001u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
            }

            // optional int32 offline_count = 2;
            if (cached_has_bits & 0x00000002u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->offline_count(), output);
            }

            // optional int32 bout_count = 3;
            if (cached_has_bits & 0x00000004u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->bout_count(), output);
            }

            // optional int32 bind_timestamp = 4;
            if (cached_has_bits & 0x00000008u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->bind_timestamp(), output);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
                    _internal_metadata_.unknown_fields(), output);
            }
            // @@protoc_insertion_point(serialize_end:game.base.TableUserInfo)
        }

        ::google::protobuf::uint8* TableUserInfo::InternalSerializeWithCachedSizesToArray(
            bool deterministic, ::google::protobuf::uint8* target) const {
            (void) deterministic; // Unused
            // @@protoc_insertion_point(serialize_to_array_start:game.base.TableUserInfo)
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            // optional int32 userid = 1;
            if (cached_has_bits & 0x00000001u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
            }

            // optional int32 offline_count = 2;
            if (cached_has_bits & 0x00000002u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->offline_count(), target);
            }

            // optional int32 bout_count = 3;
            if (cached_has_bits & 0x00000004u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->bout_count(), target);
            }

            // optional int32 bind_timestamp = 4;
            if (cached_has_bits & 0x00000008u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->bind_timestamp(), target);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                    _internal_metadata_.unknown_fields(), target);
            }
            // @@protoc_insertion_point(serialize_to_array_end:game.base.TableUserInfo)
            return target;
        }

        size_t TableUserInfo::ByteSizeLong() const {
            // @@protoc_insertion_point(message_byte_size_start:game.base.TableUserInfo)
            size_t total_size = 0;

            if (_internal_metadata_.have_unknown_fields()) {
                total_size +=
                    ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
                    _internal_metadata_.unknown_fields());
            }
            if (_has_bits_[0 / 32] & 15u) {
                // optional int32 userid = 1;
                if (has_userid()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::Int32Size(
                        this->userid());
                }

                // optional int32 offline_count = 2;
                if (has_offline_count()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::Int32Size(
                        this->offline_count());
                }

                // optional int32 bout_count = 3;
                if (has_bout_count()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::Int32Size(
                        this->bout_count());
                }

                // optional int32 bind_timestamp = 4;
                if (has_bind_timestamp()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::Int32Size(
                        this->bind_timestamp());
                }

            }
            int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = cached_size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
            return total_size;
        }

        void TableUserInfo::MergeFrom(const ::google::protobuf::Message& from) {
            // @@protoc_insertion_point(generalized_merge_from_start:game.base.TableUserInfo)
            GOOGLE_DCHECK_NE(&from, this);
            const TableUserInfo* source =
                ::google::protobuf::internal::DynamicCastToGenerated<const TableUserInfo>(
                &from);
            if (source == NULL) {
                // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.base.TableUserInfo)
                ::google::protobuf::internal::ReflectionOps::Merge(from, this);
            } else {
                // @@protoc_insertion_point(generalized_merge_from_cast_success:game.base.TableUserInfo)
                MergeFrom(*source);
            }
        }

        void TableUserInfo::MergeFrom(const TableUserInfo& from) {
            // @@protoc_insertion_point(class_specific_merge_from_start:game.base.TableUserInfo)
            GOOGLE_DCHECK_NE(&from, this);
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = from._has_bits_[0];
            if (cached_has_bits & 15u) {
                if (cached_has_bits & 0x00000001u) {
                    userid_ = from.userid_;
                }
                if (cached_has_bits & 0x00000002u) {
                    offline_count_ = from.offline_count_;
                }
                if (cached_has_bits & 0x00000004u) {
                    bout_count_ = from.bout_count_;
                }
                if (cached_has_bits & 0x00000008u) {
                    bind_timestamp_ = from.bind_timestamp_;
                }
                _has_bits_[0] |= cached_has_bits;
            }
        }

        void TableUserInfo::CopyFrom(const ::google::protobuf::Message& from) {
            // @@protoc_insertion_point(generalized_copy_from_start:game.base.TableUserInfo)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        void TableUserInfo::CopyFrom(const TableUserInfo& from) {
            // @@protoc_insertion_point(class_specific_copy_from_start:game.base.TableUserInfo)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        bool TableUserInfo::IsInitialized() const {
            return true;
        }

        void TableUserInfo::Swap(TableUserInfo* other) {
            if (other == this) return;
            InternalSwap(other);
        }
        void TableUserInfo::InternalSwap(TableUserInfo* other) {
            using std::swap;
            swap(userid_, other->userid_);
            swap(offline_count_, other->offline_count_);
            swap(bout_count_, other->bout_count_);
            swap(bind_timestamp_, other->bind_timestamp_);
            swap(_has_bits_[0], other->_has_bits_[0]);
            _internal_metadata_.Swap(&other->_internal_metadata_);
            swap(_cached_size_, other->_cached_size_);
        }

        ::google::protobuf::Metadata TableUserInfo::GetMetadata() const {
            protobuf_game_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
            return ::protobuf_game_5fbase_2eproto::file_level_metadata[kIndexInFileMessages];
        }


        // ===================================================================

        void ChairInfo::InitAsDefaultInstance() {}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
        const int ChairInfo::kChairnoFieldNumber;
        const int ChairInfo::kUseridFieldNumber;
        const int ChairInfo::kChairStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

        ChairInfo::ChairInfo()
            : ::google::protobuf::Message(), _internal_metadata_(NULL) {
            if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
                ::protobuf_game_5fbase_2eproto::InitDefaultsChairInfo();
            }
            SharedCtor();
            // @@protoc_insertion_point(constructor:game.base.ChairInfo)
        }
        ChairInfo::ChairInfo(const ChairInfo& from)
            : ::google::protobuf::Message(),
            _internal_metadata_(NULL),
            _has_bits_(from._has_bits_),
            _cached_size_(0) {
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            ::memcpy(&chairno_, &from.chairno_,
                     static_cast<size_t>(reinterpret_cast<char*>(&chair_status_) -
                     reinterpret_cast<char*>(&chairno_)) + sizeof(chair_status_));
            // @@protoc_insertion_point(copy_constructor:game.base.ChairInfo)
        }

        void ChairInfo::SharedCtor() {
            _cached_size_ = 0;
            ::memset(&chairno_, 0, static_cast<size_t>(
                reinterpret_cast<char*>(&chair_status_) -
                reinterpret_cast<char*>(&chairno_)) + sizeof(chair_status_));
        }

        ChairInfo::~ChairInfo() {
            // @@protoc_insertion_point(destructor:game.base.ChairInfo)
            SharedDtor();
        }

        void ChairInfo::SharedDtor() {}

        void ChairInfo::SetCachedSize(int size) const {
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
        }
        const ::google::protobuf::Descriptor* ChairInfo::descriptor() {
            ::protobuf_game_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
            return ::protobuf_game_5fbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
        }

        const ChairInfo& ChairInfo::default_instance() {
            ::protobuf_game_5fbase_2eproto::InitDefaultsChairInfo();
            return *internal_default_instance();
        }

        ChairInfo* ChairInfo::New(::google::protobuf::Arena* arena) const {
            ChairInfo* n = new ChairInfo;
            if (arena != NULL) {
                arena->Own(n);
            }
            return n;
        }

        void ChairInfo::Clear() {
            // @@protoc_insertion_point(message_clear_start:game.base.ChairInfo)
            ::google::protobuf::uint32 cached_has_bits = 0;
            // Prevent compiler warnings about cached_has_bits being unused
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            if (cached_has_bits & 7u) {
                ::memset(&chairno_, 0, static_cast<size_t>(
                    reinterpret_cast<char*>(&chair_status_) -
                    reinterpret_cast<char*>(&chairno_)) + sizeof(chair_status_));
            }
            _has_bits_.Clear();
            _internal_metadata_.Clear();
        }

        bool ChairInfo::MergePartialFromCodedStream(
            ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
            ::google::protobuf::uint32 tag;
            // @@protoc_insertion_point(parse_start:game.base.ChairInfo)
            for (;;) {
                ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
                tag = p.first;
                if (!p.second) goto handle_unusual;
                switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
                    // optional int32 chairno = 1;
                    case 1: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
                            set_has_chairno();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &chairno_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // optional int32 userid = 2;
                    case 2: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
                            set_has_userid();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &userid_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // optional int32 chair_status = 3;
                    case 3: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
                            set_has_chair_status();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &chair_status_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                    default: {
handle_unusual:
                        if (tag == 0) {
                            goto success;
                        }
                        DO_(::google::protobuf::internal::WireFormat::SkipField(
                            input, tag, _internal_metadata_.mutable_unknown_fields()));
                        break;
                    }
                }
            }
success:
            // @@protoc_insertion_point(parse_success:game.base.ChairInfo)
            return true;
failure:
            // @@protoc_insertion_point(parse_failure:game.base.ChairInfo)
            return false;
#undef DO_
        }

        void ChairInfo::SerializeWithCachedSizes(
            ::google::protobuf::io::CodedOutputStream* output) const {
            // @@protoc_insertion_point(serialize_start:game.base.ChairInfo)
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            // optional int32 chairno = 1;
            if (cached_has_bits & 0x00000001u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chairno(), output);
            }

            // optional int32 userid = 2;
            if (cached_has_bits & 0x00000002u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->userid(), output);
            }

            // optional int32 chair_status = 3;
            if (cached_has_bits & 0x00000004u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->chair_status(), output);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
                    _internal_metadata_.unknown_fields(), output);
            }
            // @@protoc_insertion_point(serialize_end:game.base.ChairInfo)
        }

        ::google::protobuf::uint8* ChairInfo::InternalSerializeWithCachedSizesToArray(
            bool deterministic, ::google::protobuf::uint8* target) const {
            (void) deterministic; // Unused
            // @@protoc_insertion_point(serialize_to_array_start:game.base.ChairInfo)
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            // optional int32 chairno = 1;
            if (cached_has_bits & 0x00000001u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chairno(), target);
            }

            // optional int32 userid = 2;
            if (cached_has_bits & 0x00000002u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->userid(), target);
            }

            // optional int32 chair_status = 3;
            if (cached_has_bits & 0x00000004u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->chair_status(), target);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                    _internal_metadata_.unknown_fields(), target);
            }
            // @@protoc_insertion_point(serialize_to_array_end:game.base.ChairInfo)
            return target;
        }

        size_t ChairInfo::ByteSizeLong() const {
            // @@protoc_insertion_point(message_byte_size_start:game.base.ChairInfo)
            size_t total_size = 0;

            if (_internal_metadata_.have_unknown_fields()) {
                total_size +=
                    ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
                    _internal_metadata_.unknown_fields());
            }
            if (_has_bits_[0 / 32] & 7u) {
                // optional int32 chairno = 1;
                if (has_chairno()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::Int32Size(
                        this->chairno());
                }

                // optional int32 userid = 2;
                if (has_userid()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::Int32Size(
                        this->userid());
                }

                // optional int32 chair_status = 3;
                if (has_chair_status()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::Int32Size(
                        this->chair_status());
                }

            }
            int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = cached_size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
            return total_size;
        }

        void ChairInfo::MergeFrom(const ::google::protobuf::Message& from) {
            // @@protoc_insertion_point(generalized_merge_from_start:game.base.ChairInfo)
            GOOGLE_DCHECK_NE(&from, this);
            const ChairInfo* source =
                ::google::protobuf::internal::DynamicCastToGenerated<const ChairInfo>(
                &from);
            if (source == NULL) {
                // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.base.ChairInfo)
                ::google::protobuf::internal::ReflectionOps::Merge(from, this);
            } else {
                // @@protoc_insertion_point(generalized_merge_from_cast_success:game.base.ChairInfo)
                MergeFrom(*source);
            }
        }

        void ChairInfo::MergeFrom(const ChairInfo& from) {
            // @@protoc_insertion_point(class_specific_merge_from_start:game.base.ChairInfo)
            GOOGLE_DCHECK_NE(&from, this);
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = from._has_bits_[0];
            if (cached_has_bits & 7u) {
                if (cached_has_bits & 0x00000001u) {
                    chairno_ = from.chairno_;
                }
                if (cached_has_bits & 0x00000002u) {
                    userid_ = from.userid_;
                }
                if (cached_has_bits & 0x00000004u) {
                    chair_status_ = from.chair_status_;
                }
                _has_bits_[0] |= cached_has_bits;
            }
        }

        void ChairInfo::CopyFrom(const ::google::protobuf::Message& from) {
            // @@protoc_insertion_point(generalized_copy_from_start:game.base.ChairInfo)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        void ChairInfo::CopyFrom(const ChairInfo& from) {
            // @@protoc_insertion_point(class_specific_copy_from_start:game.base.ChairInfo)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        bool ChairInfo::IsInitialized() const {
            return true;
        }

        void ChairInfo::Swap(ChairInfo* other) {
            if (other == this) return;
            InternalSwap(other);
        }
        void ChairInfo::InternalSwap(ChairInfo* other) {
            using std::swap;
            swap(chairno_, other->chairno_);
            swap(userid_, other->userid_);
            swap(chair_status_, other->chair_status_);
            swap(_has_bits_[0], other->_has_bits_[0]);
            _internal_metadata_.Swap(&other->_internal_metadata_);
            swap(_cached_size_, other->_cached_size_);
        }

        ::google::protobuf::Metadata ChairInfo::GetMetadata() const {
            protobuf_game_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
            return ::protobuf_game_5fbase_2eproto::file_level_metadata[kIndexInFileMessages];
        }


        // ===================================================================

        void Table::InitAsDefaultInstance() {}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
        const int Table::kTablenoFieldNumber;
        const int Table::kRoomidFieldNumber;
        const int Table::kChairCountFieldNumber;
        const int Table::kBankerChairFieldNumber;
        const int Table::kMinDepositFieldNumber;
        const int Table::kMaxDepositFieldNumber;
        const int Table::kBaseDepositFieldNumber;
        const int Table::kTableStatusFieldNumber;
        const int Table::kChairsFieldNumber;
        const int Table::kTableUsersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

        Table::Table()
            : ::google::protobuf::Message(), _internal_metadata_(NULL) {
            if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
                ::protobuf_game_5fbase_2eproto::InitDefaultsTable();
            }
            SharedCtor();
            // @@protoc_insertion_point(constructor:game.base.Table)
        }
        Table::Table(const Table& from)
            : ::google::protobuf::Message(),
            _internal_metadata_(NULL),
            _has_bits_(from._has_bits_),
            _cached_size_(0),
            chairs_(from.chairs_),
            table_users_(from.table_users_) {
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            ::memcpy(&tableno_, &from.tableno_,
                     static_cast<size_t>(reinterpret_cast<char*>(&table_status_) -
                     reinterpret_cast<char*>(&tableno_)) + sizeof(table_status_));
            // @@protoc_insertion_point(copy_constructor:game.base.Table)
        }

        void Table::SharedCtor() {
            _cached_size_ = 0;
            ::memset(&tableno_, 0, static_cast<size_t>(
                reinterpret_cast<char*>(&table_status_) -
                reinterpret_cast<char*>(&tableno_)) + sizeof(table_status_));
        }

        Table::~Table() {
            // @@protoc_insertion_point(destructor:game.base.Table)
            SharedDtor();
        }

        void Table::SharedDtor() {}

        void Table::SetCachedSize(int size) const {
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
        }
        const ::google::protobuf::Descriptor* Table::descriptor() {
            ::protobuf_game_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
            return ::protobuf_game_5fbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
        }

        const Table& Table::default_instance() {
            ::protobuf_game_5fbase_2eproto::InitDefaultsTable();
            return *internal_default_instance();
        }

        Table* Table::New(::google::protobuf::Arena* arena) const {
            Table* n = new Table;
            if (arena != NULL) {
                arena->Own(n);
            }
            return n;
        }

        void Table::Clear() {
            // @@protoc_insertion_point(message_clear_start:game.base.Table)
            ::google::protobuf::uint32 cached_has_bits = 0;
            // Prevent compiler warnings about cached_has_bits being unused
            (void) cached_has_bits;

            chairs_.Clear();
            table_users_.Clear();
            cached_has_bits = _has_bits_[0];
            if (cached_has_bits & 255u) {
                ::memset(&tableno_, 0, static_cast<size_t>(
                    reinterpret_cast<char*>(&table_status_) -
                    reinterpret_cast<char*>(&tableno_)) + sizeof(table_status_));
            }
            _has_bits_.Clear();
            _internal_metadata_.Clear();
        }

        bool Table::MergePartialFromCodedStream(
            ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
            ::google::protobuf::uint32 tag;
            // @@protoc_insertion_point(parse_start:game.base.Table)
            for (;;) {
                ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
                tag = p.first;
                if (!p.second) goto handle_unusual;
                switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
                    // optional int32 tableno = 1;
                    case 1: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
                            set_has_tableno();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &tableno_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // optional int32 roomid = 2;
                    case 2: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
                            set_has_roomid();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &roomid_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // optional int32 chair_count = 3;
                    case 3: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
                            set_has_chair_count();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &chair_count_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // optional int32 banker_chair = 4;
                    case 4: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
                            set_has_banker_chair();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &banker_chair_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // optional int64 min_deposit = 5;
                    case 5: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
                            set_has_min_deposit();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                                input, &min_deposit_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // optional int64 max_deposit = 6;
                    case 6: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
                            set_has_max_deposit();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                                input, &max_deposit_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // optional int64 base_deposit = 7;
                    case 7: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
                            set_has_base_deposit();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                                input, &base_deposit_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // optional int32 table_status = 8;
                    case 8: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
                            set_has_table_status();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &table_status_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // repeated .game.base.ChairInfo chairs = 9;
                    case 9: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
                            DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_chairs()));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // repeated .game.base.TableUserInfo table_users = 10;
                    case 10: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
                            DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_table_users()));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                    default: {
handle_unusual:
                        if (tag == 0) {
                            goto success;
                        }
                        DO_(::google::protobuf::internal::WireFormat::SkipField(
                            input, tag, _internal_metadata_.mutable_unknown_fields()));
                        break;
                    }
                }
            }
success:
            // @@protoc_insertion_point(parse_success:game.base.Table)
            return true;
failure:
            // @@protoc_insertion_point(parse_failure:game.base.Table)
            return false;
#undef DO_
        }

        void Table::SerializeWithCachedSizes(
            ::google::protobuf::io::CodedOutputStream* output) const {
            // @@protoc_insertion_point(serialize_start:game.base.Table)
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            // optional int32 tableno = 1;
            if (cached_has_bits & 0x00000001u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tableno(), output);
            }

            // optional int32 roomid = 2;
            if (cached_has_bits & 0x00000002u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roomid(), output);
            }

            // optional int32 chair_count = 3;
            if (cached_has_bits & 0x00000004u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->chair_count(), output);
            }

            // optional int32 banker_chair = 4;
            if (cached_has_bits & 0x00000008u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->banker_chair(), output);
            }

            // optional int64 min_deposit = 5;
            if (cached_has_bits & 0x00000010u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->min_deposit(), output);
            }

            // optional int64 max_deposit = 6;
            if (cached_has_bits & 0x00000020u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->max_deposit(), output);
            }

            // optional int64 base_deposit = 7;
            if (cached_has_bits & 0x00000040u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->base_deposit(), output);
            }

            // optional int32 table_status = 8;
            if (cached_has_bits & 0x00000080u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->table_status(), output);
            }

            // repeated .game.base.ChairInfo chairs = 9;
            for (unsigned int i = 0,
                 n = static_cast<unsigned int>(this->chairs_size()); i < n; i++) {
                ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
                    9, this->chairs(static_cast<int>(i)), output);
            }

            // repeated .game.base.TableUserInfo table_users = 10;
            for (unsigned int i = 0,
                 n = static_cast<unsigned int>(this->table_users_size()); i < n; i++) {
                ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
                    10, this->table_users(static_cast<int>(i)), output);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
                    _internal_metadata_.unknown_fields(), output);
            }
            // @@protoc_insertion_point(serialize_end:game.base.Table)
        }

        ::google::protobuf::uint8* Table::InternalSerializeWithCachedSizesToArray(
            bool deterministic, ::google::protobuf::uint8* target) const {
            (void) deterministic; // Unused
            // @@protoc_insertion_point(serialize_to_array_start:game.base.Table)
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            // optional int32 tableno = 1;
            if (cached_has_bits & 0x00000001u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tableno(), target);
            }

            // optional int32 roomid = 2;
            if (cached_has_bits & 0x00000002u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roomid(), target);
            }

            // optional int32 chair_count = 3;
            if (cached_has_bits & 0x00000004u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->chair_count(), target);
            }

            // optional int32 banker_chair = 4;
            if (cached_has_bits & 0x00000008u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->banker_chair(), target);
            }

            // optional int64 min_deposit = 5;
            if (cached_has_bits & 0x00000010u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->min_deposit(), target);
            }

            // optional int64 max_deposit = 6;
            if (cached_has_bits & 0x00000020u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->max_deposit(), target);
            }

            // optional int64 base_deposit = 7;
            if (cached_has_bits & 0x00000040u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->base_deposit(), target);
            }

            // optional int32 table_status = 8;
            if (cached_has_bits & 0x00000080u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->table_status(), target);
            }

            // repeated .game.base.ChairInfo chairs = 9;
            for (unsigned int i = 0,
                 n = static_cast<unsigned int>(this->chairs_size()); i < n; i++) {
                target = ::google::protobuf::internal::WireFormatLite::
                    InternalWriteMessageToArray(
                    9, this->chairs(static_cast<int>(i)), deterministic, target);
            }

            // repeated .game.base.TableUserInfo table_users = 10;
            for (unsigned int i = 0,
                 n = static_cast<unsigned int>(this->table_users_size()); i < n; i++) {
                target = ::google::protobuf::internal::WireFormatLite::
                    InternalWriteMessageToArray(
                    10, this->table_users(static_cast<int>(i)), deterministic, target);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                    _internal_metadata_.unknown_fields(), target);
            }
            // @@protoc_insertion_point(serialize_to_array_end:game.base.Table)
            return target;
        }

        size_t Table::ByteSizeLong() const {
            // @@protoc_insertion_point(message_byte_size_start:game.base.Table)
            size_t total_size = 0;

            if (_internal_metadata_.have_unknown_fields()) {
                total_size +=
                    ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
                    _internal_metadata_.unknown_fields());
            }
            // repeated .game.base.ChairInfo chairs = 9;
  {
      unsigned int count = static_cast<unsigned int>(this->chairs_size());
      total_size += 1UL * count;
      for (unsigned int i = 0; i < count; i++) {
          total_size +=
              ::google::protobuf::internal::WireFormatLite::MessageSize(
              this->chairs(static_cast<int>(i)));
      }
  }

  // repeated .game.base.TableUserInfo table_users = 10;
  {
      unsigned int count = static_cast<unsigned int>(this->table_users_size());
      total_size += 1UL * count;
      for (unsigned int i = 0; i < count; i++) {
          total_size +=
              ::google::protobuf::internal::WireFormatLite::MessageSize(
              this->table_users(static_cast<int>(i)));
      }
  }

  if (_has_bits_[0 / 32] & 255u) {
      // optional int32 tableno = 1;
      if (has_tableno()) {
          total_size += 1 +
              ::google::protobuf::internal::WireFormatLite::Int32Size(
              this->tableno());
      }

      // optional int32 roomid = 2;
      if (has_roomid()) {
          total_size += 1 +
              ::google::protobuf::internal::WireFormatLite::Int32Size(
              this->roomid());
      }

      // optional int32 chair_count = 3;
      if (has_chair_count()) {
          total_size += 1 +
              ::google::protobuf::internal::WireFormatLite::Int32Size(
              this->chair_count());
      }

      // optional int32 banker_chair = 4;
      if (has_banker_chair()) {
          total_size += 1 +
              ::google::protobuf::internal::WireFormatLite::Int32Size(
              this->banker_chair());
      }

      // optional int64 min_deposit = 5;
      if (has_min_deposit()) {
          total_size += 1 +
              ::google::protobuf::internal::WireFormatLite::Int64Size(
              this->min_deposit());
      }

      // optional int64 max_deposit = 6;
      if (has_max_deposit()) {
          total_size += 1 +
              ::google::protobuf::internal::WireFormatLite::Int64Size(
              this->max_deposit());
      }

      // optional int64 base_deposit = 7;
      if (has_base_deposit()) {
          total_size += 1 +
              ::google::protobuf::internal::WireFormatLite::Int64Size(
              this->base_deposit());
      }

      // optional int32 table_status = 8;
      if (has_table_status()) {
          total_size += 1 +
              ::google::protobuf::internal::WireFormatLite::Int32Size(
              this->table_status());
      }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
        }

        void Table::MergeFrom(const ::google::protobuf::Message& from) {
            // @@protoc_insertion_point(generalized_merge_from_start:game.base.Table)
            GOOGLE_DCHECK_NE(&from, this);
            const Table* source =
                ::google::protobuf::internal::DynamicCastToGenerated<const Table>(
                &from);
            if (source == NULL) {
                // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.base.Table)
                ::google::protobuf::internal::ReflectionOps::Merge(from, this);
            } else {
                // @@protoc_insertion_point(generalized_merge_from_cast_success:game.base.Table)
                MergeFrom(*source);
            }
        }

        void Table::MergeFrom(const Table& from) {
            // @@protoc_insertion_point(class_specific_merge_from_start:game.base.Table)
            GOOGLE_DCHECK_NE(&from, this);
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            chairs_.MergeFrom(from.chairs_);
            table_users_.MergeFrom(from.table_users_);
            cached_has_bits = from._has_bits_[0];
            if (cached_has_bits & 255u) {
                if (cached_has_bits & 0x00000001u) {
                    tableno_ = from.tableno_;
                }
                if (cached_has_bits & 0x00000002u) {
                    roomid_ = from.roomid_;
                }
                if (cached_has_bits & 0x00000004u) {
                    chair_count_ = from.chair_count_;
                }
                if (cached_has_bits & 0x00000008u) {
                    banker_chair_ = from.banker_chair_;
                }
                if (cached_has_bits & 0x00000010u) {
                    min_deposit_ = from.min_deposit_;
                }
                if (cached_has_bits & 0x00000020u) {
                    max_deposit_ = from.max_deposit_;
                }
                if (cached_has_bits & 0x00000040u) {
                    base_deposit_ = from.base_deposit_;
                }
                if (cached_has_bits & 0x00000080u) {
                    table_status_ = from.table_status_;
                }
                _has_bits_[0] |= cached_has_bits;
            }
        }

        void Table::CopyFrom(const ::google::protobuf::Message& from) {
            // @@protoc_insertion_point(generalized_copy_from_start:game.base.Table)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        void Table::CopyFrom(const Table& from) {
            // @@protoc_insertion_point(class_specific_copy_from_start:game.base.Table)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        bool Table::IsInitialized() const {
            return true;
        }

        void Table::Swap(Table* other) {
            if (other == this) return;
            InternalSwap(other);
        }
        void Table::InternalSwap(Table* other) {
            using std::swap;
            chairs_.InternalSwap(&other->chairs_);
            table_users_.InternalSwap(&other->table_users_);
            swap(tableno_, other->tableno_);
            swap(roomid_, other->roomid_);
            swap(chair_count_, other->chair_count_);
            swap(banker_chair_, other->banker_chair_);
            swap(min_deposit_, other->min_deposit_);
            swap(max_deposit_, other->max_deposit_);
            swap(base_deposit_, other->base_deposit_);
            swap(table_status_, other->table_status_);
            swap(_has_bits_[0], other->_has_bits_[0]);
            _internal_metadata_.Swap(&other->_internal_metadata_);
            swap(_cached_size_, other->_cached_size_);
        }

        ::google::protobuf::Metadata Table::GetMetadata() const {
            protobuf_game_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
            return ::protobuf_game_5fbase_2eproto::file_level_metadata[kIndexInFileMessages];
        }


        // ===================================================================

        void Room::InitAsDefaultInstance() {
            ::game::base::_Room_default_instance_._instance.get_mutable()->room_data_ = const_cast<::game::base::RoomData*>(
                ::game::base::RoomData::internal_default_instance());
        }
#if !defined(_MSC_VER) || _MSC_VER >= 1900
        const int Room::kRoomDataFieldNumber;
        const int Room::kTablesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

        Room::Room()
            : ::google::protobuf::Message(), _internal_metadata_(NULL) {
            if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
                ::protobuf_game_5fbase_2eproto::InitDefaultsRoom();
            }
            SharedCtor();
            // @@protoc_insertion_point(constructor:game.base.Room)
        }
        Room::Room(const Room& from)
            : ::google::protobuf::Message(),
            _internal_metadata_(NULL),
            _has_bits_(from._has_bits_),
            _cached_size_(0),
            tables_(from.tables_) {
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            if (from.has_room_data()) {
                room_data_ = new ::game::base::RoomData(*from.room_data_);
            } else {
                room_data_ = NULL;
            }
            // @@protoc_insertion_point(copy_constructor:game.base.Room)
        }

        void Room::SharedCtor() {
            _cached_size_ = 0;
            room_data_ = NULL;
        }

        Room::~Room() {
            // @@protoc_insertion_point(destructor:game.base.Room)
            SharedDtor();
        }

        void Room::SharedDtor() {
            if (this != internal_default_instance()) delete room_data_;
        }

        void Room::SetCachedSize(int size) const {
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
        }
        const ::google::protobuf::Descriptor* Room::descriptor() {
            ::protobuf_game_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
            return ::protobuf_game_5fbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
        }

        const Room& Room::default_instance() {
            ::protobuf_game_5fbase_2eproto::InitDefaultsRoom();
            return *internal_default_instance();
        }

        Room* Room::New(::google::protobuf::Arena* arena) const {
            Room* n = new Room;
            if (arena != NULL) {
                arena->Own(n);
            }
            return n;
        }

        void Room::Clear() {
            // @@protoc_insertion_point(message_clear_start:game.base.Room)
            ::google::protobuf::uint32 cached_has_bits = 0;
            // Prevent compiler warnings about cached_has_bits being unused
            (void) cached_has_bits;

            tables_.Clear();
            cached_has_bits = _has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
                GOOGLE_DCHECK(room_data_ != NULL);
                room_data_->Clear();
            }
            _has_bits_.Clear();
            _internal_metadata_.Clear();
        }

        bool Room::MergePartialFromCodedStream(
            ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
            ::google::protobuf::uint32 tag;
            // @@protoc_insertion_point(parse_start:game.base.Room)
            for (;;) {
                ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
                tag = p.first;
                if (!p.second) goto handle_unusual;
                switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
                    // optional .game.base.RoomData room_data = 1;
                    case 1: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
                            DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                                input, mutable_room_data()));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // repeated .game.base.Table tables = 2;
                    case 2: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
                            DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_tables()));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                    default: {
handle_unusual:
                        if (tag == 0) {
                            goto success;
                        }
                        DO_(::google::protobuf::internal::WireFormat::SkipField(
                            input, tag, _internal_metadata_.mutable_unknown_fields()));
                        break;
                    }
                }
            }
success:
            // @@protoc_insertion_point(parse_success:game.base.Room)
            return true;
failure:
            // @@protoc_insertion_point(parse_failure:game.base.Room)
            return false;
#undef DO_
        }

        void Room::SerializeWithCachedSizes(
            ::google::protobuf::io::CodedOutputStream* output) const {
            // @@protoc_insertion_point(serialize_start:game.base.Room)
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            // optional .game.base.RoomData room_data = 1;
            if (cached_has_bits & 0x00000001u) {
                ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
                    1, *this->room_data_, output);
            }

            // repeated .game.base.Table tables = 2;
            for (unsigned int i = 0,
                 n = static_cast<unsigned int>(this->tables_size()); i < n; i++) {
                ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
                    2, this->tables(static_cast<int>(i)), output);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
                    _internal_metadata_.unknown_fields(), output);
            }
            // @@protoc_insertion_point(serialize_end:game.base.Room)
        }

        ::google::protobuf::uint8* Room::InternalSerializeWithCachedSizesToArray(
            bool deterministic, ::google::protobuf::uint8* target) const {
            (void) deterministic; // Unused
            // @@protoc_insertion_point(serialize_to_array_start:game.base.Room)
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            // optional .game.base.RoomData room_data = 1;
            if (cached_has_bits & 0x00000001u) {
                target = ::google::protobuf::internal::WireFormatLite::
                    InternalWriteMessageToArray(
                    1, *this->room_data_, deterministic, target);
            }

            // repeated .game.base.Table tables = 2;
            for (unsigned int i = 0,
                 n = static_cast<unsigned int>(this->tables_size()); i < n; i++) {
                target = ::google::protobuf::internal::WireFormatLite::
                    InternalWriteMessageToArray(
                    2, this->tables(static_cast<int>(i)), deterministic, target);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                    _internal_metadata_.unknown_fields(), target);
            }
            // @@protoc_insertion_point(serialize_to_array_end:game.base.Room)
            return target;
        }

        size_t Room::ByteSizeLong() const {
            // @@protoc_insertion_point(message_byte_size_start:game.base.Room)
            size_t total_size = 0;

            if (_internal_metadata_.have_unknown_fields()) {
                total_size +=
                    ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
                    _internal_metadata_.unknown_fields());
            }
            // repeated .game.base.Table tables = 2;
  {
      unsigned int count = static_cast<unsigned int>(this->tables_size());
      total_size += 1UL * count;
      for (unsigned int i = 0; i < count; i++) {
          total_size +=
              ::google::protobuf::internal::WireFormatLite::MessageSize(
              this->tables(static_cast<int>(i)));
      }
  }

  // optional .game.base.RoomData room_data = 1;
  if (has_room_data()) {
      total_size += 1 +
          ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->room_data_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
        }

        void Room::MergeFrom(const ::google::protobuf::Message& from) {
            // @@protoc_insertion_point(generalized_merge_from_start:game.base.Room)
            GOOGLE_DCHECK_NE(&from, this);
            const Room* source =
                ::google::protobuf::internal::DynamicCastToGenerated<const Room>(
                &from);
            if (source == NULL) {
                // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.base.Room)
                ::google::protobuf::internal::ReflectionOps::Merge(from, this);
            } else {
                // @@protoc_insertion_point(generalized_merge_from_cast_success:game.base.Room)
                MergeFrom(*source);
            }
        }

        void Room::MergeFrom(const Room& from) {
            // @@protoc_insertion_point(class_specific_merge_from_start:game.base.Room)
            GOOGLE_DCHECK_NE(&from, this);
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            tables_.MergeFrom(from.tables_);
            if (from.has_room_data()) {
                mutable_room_data()->::game::base::RoomData::MergeFrom(from.room_data());
            }
        }

        void Room::CopyFrom(const ::google::protobuf::Message& from) {
            // @@protoc_insertion_point(generalized_copy_from_start:game.base.Room)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        void Room::CopyFrom(const Room& from) {
            // @@protoc_insertion_point(class_specific_copy_from_start:game.base.Room)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        bool Room::IsInitialized() const {
            return true;
        }

        void Room::Swap(Room* other) {
            if (other == this) return;
            InternalSwap(other);
        }
        void Room::InternalSwap(Room* other) {
            using std::swap;
            tables_.InternalSwap(&other->tables_);
            swap(room_data_, other->room_data_);
            swap(_has_bits_[0], other->_has_bits_[0]);
            _internal_metadata_.Swap(&other->_internal_metadata_);
            swap(_cached_size_, other->_cached_size_);
        }

        ::google::protobuf::Metadata Room::GetMetadata() const {
            protobuf_game_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
            return ::protobuf_game_5fbase_2eproto::file_level_metadata[kIndexInFileMessages];
        }


        // ===================================================================

        void UserResult::InitAsDefaultInstance() {}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
        const int UserResult::kUseridFieldNumber;
        const int UserResult::kChainoFieldNumber;
        const int UserResult::kOldDepositFieldNumber;
        const int UserResult::kDiffDepositFieldNumber;
        const int UserResult::kFeeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

        UserResult::UserResult()
            : ::google::protobuf::Message(), _internal_metadata_(NULL) {
            if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
                ::protobuf_game_5fbase_2eproto::InitDefaultsUserResult();
            }
            SharedCtor();
            // @@protoc_insertion_point(constructor:game.base.UserResult)
        }
        UserResult::UserResult(const UserResult& from)
            : ::google::protobuf::Message(),
            _internal_metadata_(NULL),
            _has_bits_(from._has_bits_),
            _cached_size_(0) {
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            ::memcpy(&userid_, &from.userid_,
                     static_cast<size_t>(reinterpret_cast<char*>(&fee_) -
                     reinterpret_cast<char*>(&userid_)) + sizeof(fee_));
            // @@protoc_insertion_point(copy_constructor:game.base.UserResult)
        }

        void UserResult::SharedCtor() {
            _cached_size_ = 0;
            ::memset(&userid_, 0, static_cast<size_t>(
                reinterpret_cast<char*>(&fee_) -
                reinterpret_cast<char*>(&userid_)) + sizeof(fee_));
        }

        UserResult::~UserResult() {
            // @@protoc_insertion_point(destructor:game.base.UserResult)
            SharedDtor();
        }

        void UserResult::SharedDtor() {}

        void UserResult::SetCachedSize(int size) const {
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
        }
        const ::google::protobuf::Descriptor* UserResult::descriptor() {
            ::protobuf_game_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
            return ::protobuf_game_5fbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
        }

        const UserResult& UserResult::default_instance() {
            ::protobuf_game_5fbase_2eproto::InitDefaultsUserResult();
            return *internal_default_instance();
        }

        UserResult* UserResult::New(::google::protobuf::Arena* arena) const {
            UserResult* n = new UserResult;
            if (arena != NULL) {
                arena->Own(n);
            }
            return n;
        }

        void UserResult::Clear() {
            // @@protoc_insertion_point(message_clear_start:game.base.UserResult)
            ::google::protobuf::uint32 cached_has_bits = 0;
            // Prevent compiler warnings about cached_has_bits being unused
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            if (cached_has_bits & 31u) {
                ::memset(&userid_, 0, static_cast<size_t>(
                    reinterpret_cast<char*>(&fee_) -
                    reinterpret_cast<char*>(&userid_)) + sizeof(fee_));
            }
            _has_bits_.Clear();
            _internal_metadata_.Clear();
        }

        bool UserResult::MergePartialFromCodedStream(
            ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
            ::google::protobuf::uint32 tag;
            // @@protoc_insertion_point(parse_start:game.base.UserResult)
            for (;;) {
                ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
                tag = p.first;
                if (!p.second) goto handle_unusual;
                switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
                    // optional int32 userid = 1;
                    case 1: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
                            set_has_userid();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &userid_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // optional int32 chaino = 2;
                    case 2: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
                            set_has_chaino();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &chaino_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // optional int64 old_deposit = 3;
                    case 3: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
                            set_has_old_deposit();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                                input, &old_deposit_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // optional int64 diff_deposit = 4;
                    case 4: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
                            set_has_diff_deposit();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                                input, &diff_deposit_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // optional int32 fee = 5;
                    case 5: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
                            set_has_fee();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &fee_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                    default: {
handle_unusual:
                        if (tag == 0) {
                            goto success;
                        }
                        DO_(::google::protobuf::internal::WireFormat::SkipField(
                            input, tag, _internal_metadata_.mutable_unknown_fields()));
                        break;
                    }
                }
            }
success:
            // @@protoc_insertion_point(parse_success:game.base.UserResult)
            return true;
failure:
            // @@protoc_insertion_point(parse_failure:game.base.UserResult)
            return false;
#undef DO_
        }

        void UserResult::SerializeWithCachedSizes(
            ::google::protobuf::io::CodedOutputStream* output) const {
            // @@protoc_insertion_point(serialize_start:game.base.UserResult)
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            // optional int32 userid = 1;
            if (cached_has_bits & 0x00000001u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
            }

            // optional int32 chaino = 2;
            if (cached_has_bits & 0x00000002u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->chaino(), output);
            }

            // optional int64 old_deposit = 3;
            if (cached_has_bits & 0x00000004u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->old_deposit(), output);
            }

            // optional int64 diff_deposit = 4;
            if (cached_has_bits & 0x00000008u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->diff_deposit(), output);
            }

            // optional int32 fee = 5;
            if (cached_has_bits & 0x00000010u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->fee(), output);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
                    _internal_metadata_.unknown_fields(), output);
            }
            // @@protoc_insertion_point(serialize_end:game.base.UserResult)
        }

        ::google::protobuf::uint8* UserResult::InternalSerializeWithCachedSizesToArray(
            bool deterministic, ::google::protobuf::uint8* target) const {
            (void) deterministic; // Unused
            // @@protoc_insertion_point(serialize_to_array_start:game.base.UserResult)
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            // optional int32 userid = 1;
            if (cached_has_bits & 0x00000001u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
            }

            // optional int32 chaino = 2;
            if (cached_has_bits & 0x00000002u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->chaino(), target);
            }

            // optional int64 old_deposit = 3;
            if (cached_has_bits & 0x00000004u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->old_deposit(), target);
            }

            // optional int64 diff_deposit = 4;
            if (cached_has_bits & 0x00000008u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->diff_deposit(), target);
            }

            // optional int32 fee = 5;
            if (cached_has_bits & 0x00000010u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->fee(), target);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                    _internal_metadata_.unknown_fields(), target);
            }
            // @@protoc_insertion_point(serialize_to_array_end:game.base.UserResult)
            return target;
        }

        size_t UserResult::ByteSizeLong() const {
            // @@protoc_insertion_point(message_byte_size_start:game.base.UserResult)
            size_t total_size = 0;

            if (_internal_metadata_.have_unknown_fields()) {
                total_size +=
                    ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
                    _internal_metadata_.unknown_fields());
            }
            if (_has_bits_[0 / 32] & 31u) {
                // optional int32 userid = 1;
                if (has_userid()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::Int32Size(
                        this->userid());
                }

                // optional int32 chaino = 2;
                if (has_chaino()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::Int32Size(
                        this->chaino());
                }

                // optional int64 old_deposit = 3;
                if (has_old_deposit()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::Int64Size(
                        this->old_deposit());
                }

                // optional int64 diff_deposit = 4;
                if (has_diff_deposit()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::Int64Size(
                        this->diff_deposit());
                }

                // optional int32 fee = 5;
                if (has_fee()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::Int32Size(
                        this->fee());
                }

            }
            int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = cached_size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
            return total_size;
        }

        void UserResult::MergeFrom(const ::google::protobuf::Message& from) {
            // @@protoc_insertion_point(generalized_merge_from_start:game.base.UserResult)
            GOOGLE_DCHECK_NE(&from, this);
            const UserResult* source =
                ::google::protobuf::internal::DynamicCastToGenerated<const UserResult>(
                &from);
            if (source == NULL) {
                // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.base.UserResult)
                ::google::protobuf::internal::ReflectionOps::Merge(from, this);
            } else {
                // @@protoc_insertion_point(generalized_merge_from_cast_success:game.base.UserResult)
                MergeFrom(*source);
            }
        }

        void UserResult::MergeFrom(const UserResult& from) {
            // @@protoc_insertion_point(class_specific_merge_from_start:game.base.UserResult)
            GOOGLE_DCHECK_NE(&from, this);
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = from._has_bits_[0];
            if (cached_has_bits & 31u) {
                if (cached_has_bits & 0x00000001u) {
                    userid_ = from.userid_;
                }
                if (cached_has_bits & 0x00000002u) {
                    chaino_ = from.chaino_;
                }
                if (cached_has_bits & 0x00000004u) {
                    old_deposit_ = from.old_deposit_;
                }
                if (cached_has_bits & 0x00000008u) {
                    diff_deposit_ = from.diff_deposit_;
                }
                if (cached_has_bits & 0x00000010u) {
                    fee_ = from.fee_;
                }
                _has_bits_[0] |= cached_has_bits;
            }
        }

        void UserResult::CopyFrom(const ::google::protobuf::Message& from) {
            // @@protoc_insertion_point(generalized_copy_from_start:game.base.UserResult)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        void UserResult::CopyFrom(const UserResult& from) {
            // @@protoc_insertion_point(class_specific_copy_from_start:game.base.UserResult)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        bool UserResult::IsInitialized() const {
            return true;
        }

        void UserResult::Swap(UserResult* other) {
            if (other == this) return;
            InternalSwap(other);
        }
        void UserResult::InternalSwap(UserResult* other) {
            using std::swap;
            swap(userid_, other->userid_);
            swap(chaino_, other->chaino_);
            swap(old_deposit_, other->old_deposit_);
            swap(diff_deposit_, other->diff_deposit_);
            swap(fee_, other->fee_);
            swap(_has_bits_[0], other->_has_bits_[0]);
            _internal_metadata_.Swap(&other->_internal_metadata_);
            swap(_cached_size_, other->_cached_size_);
        }

        ::google::protobuf::Metadata UserResult::GetMetadata() const {
            protobuf_game_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
            return ::protobuf_game_5fbase_2eproto::file_level_metadata[kIndexInFileMessages];
        }


        // ===================================================================

        void PulseReq::InitAsDefaultInstance() {}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
        const int PulseReq::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

        PulseReq::PulseReq()
            : ::google::protobuf::Message(), _internal_metadata_(NULL) {
            if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
                ::protobuf_game_5fbase_2eproto::InitDefaultsPulseReq();
            }
            SharedCtor();
            // @@protoc_insertion_point(constructor:game.base.PulseReq)
        }
        PulseReq::PulseReq(const PulseReq& from)
            : ::google::protobuf::Message(),
            _internal_metadata_(NULL),
            _has_bits_(from._has_bits_),
            _cached_size_(0) {
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            id_ = from.id_;
            // @@protoc_insertion_point(copy_constructor:game.base.PulseReq)
        }

        void PulseReq::SharedCtor() {
            _cached_size_ = 0;
            id_ = 0;
        }

        PulseReq::~PulseReq() {
            // @@protoc_insertion_point(destructor:game.base.PulseReq)
            SharedDtor();
        }

        void PulseReq::SharedDtor() {}

        void PulseReq::SetCachedSize(int size) const {
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
        }
        const ::google::protobuf::Descriptor* PulseReq::descriptor() {
            ::protobuf_game_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
            return ::protobuf_game_5fbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
        }

        const PulseReq& PulseReq::default_instance() {
            ::protobuf_game_5fbase_2eproto::InitDefaultsPulseReq();
            return *internal_default_instance();
        }

        PulseReq* PulseReq::New(::google::protobuf::Arena* arena) const {
            PulseReq* n = new PulseReq;
            if (arena != NULL) {
                arena->Own(n);
            }
            return n;
        }

        void PulseReq::Clear() {
            // @@protoc_insertion_point(message_clear_start:game.base.PulseReq)
            ::google::protobuf::uint32 cached_has_bits = 0;
            // Prevent compiler warnings about cached_has_bits being unused
            (void) cached_has_bits;

            id_ = 0;
            _has_bits_.Clear();
            _internal_metadata_.Clear();
        }

        bool PulseReq::MergePartialFromCodedStream(
            ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
            ::google::protobuf::uint32 tag;
            // @@protoc_insertion_point(parse_start:game.base.PulseReq)
            for (;;) {
                ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
                tag = p.first;
                if (!p.second) goto handle_unusual;
                switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
                    // optional int32 id = 1;
                    case 1: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
                            set_has_id();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &id_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                    default: {
handle_unusual:
                        if (tag == 0) {
                            goto success;
                        }
                        DO_(::google::protobuf::internal::WireFormat::SkipField(
                            input, tag, _internal_metadata_.mutable_unknown_fields()));
                        break;
                    }
                }
            }
success:
            // @@protoc_insertion_point(parse_success:game.base.PulseReq)
            return true;
failure:
            // @@protoc_insertion_point(parse_failure:game.base.PulseReq)
            return false;
#undef DO_
        }

        void PulseReq::SerializeWithCachedSizes(
            ::google::protobuf::io::CodedOutputStream* output) const {
            // @@protoc_insertion_point(serialize_start:game.base.PulseReq)
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            // optional int32 id = 1;
            if (cached_has_bits & 0x00000001u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
                    _internal_metadata_.unknown_fields(), output);
            }
            // @@protoc_insertion_point(serialize_end:game.base.PulseReq)
        }

        ::google::protobuf::uint8* PulseReq::InternalSerializeWithCachedSizesToArray(
            bool deterministic, ::google::protobuf::uint8* target) const {
            (void) deterministic; // Unused
            // @@protoc_insertion_point(serialize_to_array_start:game.base.PulseReq)
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            // optional int32 id = 1;
            if (cached_has_bits & 0x00000001u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                    _internal_metadata_.unknown_fields(), target);
            }
            // @@protoc_insertion_point(serialize_to_array_end:game.base.PulseReq)
            return target;
        }

        size_t PulseReq::ByteSizeLong() const {
            // @@protoc_insertion_point(message_byte_size_start:game.base.PulseReq)
            size_t total_size = 0;

            if (_internal_metadata_.have_unknown_fields()) {
                total_size +=
                    ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
                    _internal_metadata_.unknown_fields());
            }
            // optional int32 id = 1;
            if (has_id()) {
                total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::Int32Size(
                    this->id());
            }

            int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = cached_size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
            return total_size;
        }

        void PulseReq::MergeFrom(const ::google::protobuf::Message& from) {
            // @@protoc_insertion_point(generalized_merge_from_start:game.base.PulseReq)
            GOOGLE_DCHECK_NE(&from, this);
            const PulseReq* source =
                ::google::protobuf::internal::DynamicCastToGenerated<const PulseReq>(
                &from);
            if (source == NULL) {
                // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.base.PulseReq)
                ::google::protobuf::internal::ReflectionOps::Merge(from, this);
            } else {
                // @@protoc_insertion_point(generalized_merge_from_cast_success:game.base.PulseReq)
                MergeFrom(*source);
            }
        }

        void PulseReq::MergeFrom(const PulseReq& from) {
            // @@protoc_insertion_point(class_specific_merge_from_start:game.base.PulseReq)
            GOOGLE_DCHECK_NE(&from, this);
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            if (from.has_id()) {
                set_id(from.id());
            }
        }

        void PulseReq::CopyFrom(const ::google::protobuf::Message& from) {
            // @@protoc_insertion_point(generalized_copy_from_start:game.base.PulseReq)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        void PulseReq::CopyFrom(const PulseReq& from) {
            // @@protoc_insertion_point(class_specific_copy_from_start:game.base.PulseReq)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        bool PulseReq::IsInitialized() const {
            return true;
        }

        void PulseReq::Swap(PulseReq* other) {
            if (other == this) return;
            InternalSwap(other);
        }
        void PulseReq::InternalSwap(PulseReq* other) {
            using std::swap;
            swap(id_, other->id_);
            swap(_has_bits_[0], other->_has_bits_[0]);
            _internal_metadata_.Swap(&other->_internal_metadata_);
            swap(_cached_size_, other->_cached_size_);
        }

        ::google::protobuf::Metadata PulseReq::GetMetadata() const {
            protobuf_game_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
            return ::protobuf_game_5fbase_2eproto::file_level_metadata[kIndexInFileMessages];
        }


        // ===================================================================

        void PulseResp::InitAsDefaultInstance() {}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
        const int PulseResp::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

        PulseResp::PulseResp()
            : ::google::protobuf::Message(), _internal_metadata_(NULL) {
            if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
                ::protobuf_game_5fbase_2eproto::InitDefaultsPulseResp();
            }
            SharedCtor();
            // @@protoc_insertion_point(constructor:game.base.PulseResp)
        }
        PulseResp::PulseResp(const PulseResp& from)
            : ::google::protobuf::Message(),
            _internal_metadata_(NULL),
            _has_bits_(from._has_bits_),
            _cached_size_(0) {
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            timestamp_ = from.timestamp_;
            // @@protoc_insertion_point(copy_constructor:game.base.PulseResp)
        }

        void PulseResp::SharedCtor() {
            _cached_size_ = 0;
            timestamp_ = 0;
        }

        PulseResp::~PulseResp() {
            // @@protoc_insertion_point(destructor:game.base.PulseResp)
            SharedDtor();
        }

        void PulseResp::SharedDtor() {}

        void PulseResp::SetCachedSize(int size) const {
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
        }
        const ::google::protobuf::Descriptor* PulseResp::descriptor() {
            ::protobuf_game_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
            return ::protobuf_game_5fbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
        }

        const PulseResp& PulseResp::default_instance() {
            ::protobuf_game_5fbase_2eproto::InitDefaultsPulseResp();
            return *internal_default_instance();
        }

        PulseResp* PulseResp::New(::google::protobuf::Arena* arena) const {
            PulseResp* n = new PulseResp;
            if (arena != NULL) {
                arena->Own(n);
            }
            return n;
        }

        void PulseResp::Clear() {
            // @@protoc_insertion_point(message_clear_start:game.base.PulseResp)
            ::google::protobuf::uint32 cached_has_bits = 0;
            // Prevent compiler warnings about cached_has_bits being unused
            (void) cached_has_bits;

            timestamp_ = 0;
            _has_bits_.Clear();
            _internal_metadata_.Clear();
        }

        bool PulseResp::MergePartialFromCodedStream(
            ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
            ::google::protobuf::uint32 tag;
            // @@protoc_insertion_point(parse_start:game.base.PulseResp)
            for (;;) {
                ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
                tag = p.first;
                if (!p.second) goto handle_unusual;
                switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
                    // optional int32 timestamp = 1;
                    case 1: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
                            set_has_timestamp();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &timestamp_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                    default: {
handle_unusual:
                        if (tag == 0) {
                            goto success;
                        }
                        DO_(::google::protobuf::internal::WireFormat::SkipField(
                            input, tag, _internal_metadata_.mutable_unknown_fields()));
                        break;
                    }
                }
            }
success:
            // @@protoc_insertion_point(parse_success:game.base.PulseResp)
            return true;
failure:
            // @@protoc_insertion_point(parse_failure:game.base.PulseResp)
            return false;
#undef DO_
        }

        void PulseResp::SerializeWithCachedSizes(
            ::google::protobuf::io::CodedOutputStream* output) const {
            // @@protoc_insertion_point(serialize_start:game.base.PulseResp)
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            // optional int32 timestamp = 1;
            if (cached_has_bits & 0x00000001u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->timestamp(), output);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
                    _internal_metadata_.unknown_fields(), output);
            }
            // @@protoc_insertion_point(serialize_end:game.base.PulseResp)
        }

        ::google::protobuf::uint8* PulseResp::InternalSerializeWithCachedSizesToArray(
            bool deterministic, ::google::protobuf::uint8* target) const {
            (void) deterministic; // Unused
            // @@protoc_insertion_point(serialize_to_array_start:game.base.PulseResp)
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            // optional int32 timestamp = 1;
            if (cached_has_bits & 0x00000001u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->timestamp(), target);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                    _internal_metadata_.unknown_fields(), target);
            }
            // @@protoc_insertion_point(serialize_to_array_end:game.base.PulseResp)
            return target;
        }

        size_t PulseResp::ByteSizeLong() const {
            // @@protoc_insertion_point(message_byte_size_start:game.base.PulseResp)
            size_t total_size = 0;

            if (_internal_metadata_.have_unknown_fields()) {
                total_size +=
                    ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
                    _internal_metadata_.unknown_fields());
            }
            // optional int32 timestamp = 1;
            if (has_timestamp()) {
                total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::Int32Size(
                    this->timestamp());
            }

            int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = cached_size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
            return total_size;
        }

        void PulseResp::MergeFrom(const ::google::protobuf::Message& from) {
            // @@protoc_insertion_point(generalized_merge_from_start:game.base.PulseResp)
            GOOGLE_DCHECK_NE(&from, this);
            const PulseResp* source =
                ::google::protobuf::internal::DynamicCastToGenerated<const PulseResp>(
                &from);
            if (source == NULL) {
                // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.base.PulseResp)
                ::google::protobuf::internal::ReflectionOps::Merge(from, this);
            } else {
                // @@protoc_insertion_point(generalized_merge_from_cast_success:game.base.PulseResp)
                MergeFrom(*source);
            }
        }

        void PulseResp::MergeFrom(const PulseResp& from) {
            // @@protoc_insertion_point(class_specific_merge_from_start:game.base.PulseResp)
            GOOGLE_DCHECK_NE(&from, this);
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            if (from.has_timestamp()) {
                set_timestamp(from.timestamp());
            }
        }

        void PulseResp::CopyFrom(const ::google::protobuf::Message& from) {
            // @@protoc_insertion_point(generalized_copy_from_start:game.base.PulseResp)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        void PulseResp::CopyFrom(const PulseResp& from) {
            // @@protoc_insertion_point(class_specific_copy_from_start:game.base.PulseResp)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        bool PulseResp::IsInitialized() const {
            return true;
        }

        void PulseResp::Swap(PulseResp* other) {
            if (other == this) return;
            InternalSwap(other);
        }
        void PulseResp::InternalSwap(PulseResp* other) {
            using std::swap;
            swap(timestamp_, other->timestamp_);
            swap(_has_bits_[0], other->_has_bits_[0]);
            _internal_metadata_.Swap(&other->_internal_metadata_);
            swap(_cached_size_, other->_cached_size_);
        }

        ::google::protobuf::Metadata PulseResp::GetMetadata() const {
            protobuf_game_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
            return ::protobuf_game_5fbase_2eproto::file_level_metadata[kIndexInFileMessages];
        }


        // ===================================================================

        void EnterNormalGameReq::InitAsDefaultInstance() {}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
        const int EnterNormalGameReq::kUseridFieldNumber;
        const int EnterNormalGameReq::kRoomidFieldNumber;
        const int EnterNormalGameReq::kFlagFieldNumber;
        const int EnterNormalGameReq::kTargetFieldNumber;
        const int EnterNormalGameReq::kHardidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

        EnterNormalGameReq::EnterNormalGameReq()
            : ::google::protobuf::Message(), _internal_metadata_(NULL) {
            if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
                ::protobuf_game_5fbase_2eproto::InitDefaultsEnterNormalGameReq();
            }
            SharedCtor();
            // @@protoc_insertion_point(constructor:game.base.EnterNormalGameReq)
        }
        EnterNormalGameReq::EnterNormalGameReq(const EnterNormalGameReq& from)
            : ::google::protobuf::Message(),
            _internal_metadata_(NULL),
            _has_bits_(from._has_bits_),
            _cached_size_(0) {
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            hardid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
            if (from.has_hardid()) {
                hardid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hardid_);
            }
            ::memcpy(&userid_, &from.userid_,
                     static_cast<size_t>(reinterpret_cast<char*>(&target_) -
                     reinterpret_cast<char*>(&userid_)) + sizeof(target_));
            // @@protoc_insertion_point(copy_constructor:game.base.EnterNormalGameReq)
        }

        void EnterNormalGameReq::SharedCtor() {
            _cached_size_ = 0;
            hardid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
            ::memset(&userid_, 0, static_cast<size_t>(
                reinterpret_cast<char*>(&target_) -
                reinterpret_cast<char*>(&userid_)) + sizeof(target_));
        }

        EnterNormalGameReq::~EnterNormalGameReq() {
            // @@protoc_insertion_point(destructor:game.base.EnterNormalGameReq)
            SharedDtor();
        }

        void EnterNormalGameReq::SharedDtor() {
            hardid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }

        void EnterNormalGameReq::SetCachedSize(int size) const {
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
        }
        const ::google::protobuf::Descriptor* EnterNormalGameReq::descriptor() {
            ::protobuf_game_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
            return ::protobuf_game_5fbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
        }

        const EnterNormalGameReq& EnterNormalGameReq::default_instance() {
            ::protobuf_game_5fbase_2eproto::InitDefaultsEnterNormalGameReq();
            return *internal_default_instance();
        }

        EnterNormalGameReq* EnterNormalGameReq::New(::google::protobuf::Arena* arena) const {
            EnterNormalGameReq* n = new EnterNormalGameReq;
            if (arena != NULL) {
                arena->Own(n);
            }
            return n;
        }

        void EnterNormalGameReq::Clear() {
            // @@protoc_insertion_point(message_clear_start:game.base.EnterNormalGameReq)
            ::google::protobuf::uint32 cached_has_bits = 0;
            // Prevent compiler warnings about cached_has_bits being unused
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
                GOOGLE_DCHECK(!hardid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
                (*hardid_.UnsafeRawStringPointer())->clear();
            }
            if (cached_has_bits & 30u) {
                ::memset(&userid_, 0, static_cast<size_t>(
                    reinterpret_cast<char*>(&target_) -
                    reinterpret_cast<char*>(&userid_)) + sizeof(target_));
            }
            _has_bits_.Clear();
            _internal_metadata_.Clear();
        }

        bool EnterNormalGameReq::MergePartialFromCodedStream(
            ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
            ::google::protobuf::uint32 tag;
            // @@protoc_insertion_point(parse_start:game.base.EnterNormalGameReq)
            for (;;) {
                ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
                tag = p.first;
                if (!p.second) goto handle_unusual;
                switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
                    // optional int32 userid = 1;
                    case 1: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
                            set_has_userid();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &userid_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // optional int32 roomid = 2;
                    case 2: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
                            set_has_roomid();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &roomid_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // optional int32 flag = 3;
                    case 3: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
                            set_has_flag();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &flag_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // optional int32 target = 4;
                    case 4: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
                            set_has_target();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &target_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // optional string hardid = 5;
                    case 5: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
                            DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                                input, this->mutable_hardid()));
                            ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
                                this->hardid().data(), static_cast<int>(this->hardid().length()),
                                ::google::protobuf::internal::WireFormat::PARSE,
                                "game.base.EnterNormalGameReq.hardid");
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                    default: {
handle_unusual:
                        if (tag == 0) {
                            goto success;
                        }
                        DO_(::google::protobuf::internal::WireFormat::SkipField(
                            input, tag, _internal_metadata_.mutable_unknown_fields()));
                        break;
                    }
                }
            }
success:
            // @@protoc_insertion_point(parse_success:game.base.EnterNormalGameReq)
            return true;
failure:
            // @@protoc_insertion_point(parse_failure:game.base.EnterNormalGameReq)
            return false;
#undef DO_
        }

        void EnterNormalGameReq::SerializeWithCachedSizes(
            ::google::protobuf::io::CodedOutputStream* output) const {
            // @@protoc_insertion_point(serialize_start:game.base.EnterNormalGameReq)
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            // optional int32 userid = 1;
            if (cached_has_bits & 0x00000002u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
            }

            // optional int32 roomid = 2;
            if (cached_has_bits & 0x00000004u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roomid(), output);
            }

            // optional int32 flag = 3;
            if (cached_has_bits & 0x00000008u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->flag(), output);
            }

            // optional int32 target = 4;
            if (cached_has_bits & 0x00000010u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->target(), output);
            }

            // optional string hardid = 5;
            if (cached_has_bits & 0x00000001u) {
                ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
                    this->hardid().data(), static_cast<int>(this->hardid().length()),
                    ::google::protobuf::internal::WireFormat::SERIALIZE,
                    "game.base.EnterNormalGameReq.hardid");
                ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
                    5, this->hardid(), output);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
                    _internal_metadata_.unknown_fields(), output);
            }
            // @@protoc_insertion_point(serialize_end:game.base.EnterNormalGameReq)
        }

        ::google::protobuf::uint8* EnterNormalGameReq::InternalSerializeWithCachedSizesToArray(
            bool deterministic, ::google::protobuf::uint8* target) const {
            (void) deterministic; // Unused
            // @@protoc_insertion_point(serialize_to_array_start:game.base.EnterNormalGameReq)
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            // optional int32 userid = 1;
            if (cached_has_bits & 0x00000002u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
            }

            // optional int32 roomid = 2;
            if (cached_has_bits & 0x00000004u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roomid(), target);
            }

            // optional int32 flag = 3;
            if (cached_has_bits & 0x00000008u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->flag(), target);
            }

            // optional int32 target = 4;
            if (cached_has_bits & 0x00000010u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->target(), target);
            }

            // optional string hardid = 5;
            if (cached_has_bits & 0x00000001u) {
                ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
                    this->hardid().data(), static_cast<int>(this->hardid().length()),
                    ::google::protobuf::internal::WireFormat::SERIALIZE,
                    "game.base.EnterNormalGameReq.hardid");
                target =
                    ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
                    5, this->hardid(), target);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                    _internal_metadata_.unknown_fields(), target);
            }
            // @@protoc_insertion_point(serialize_to_array_end:game.base.EnterNormalGameReq)
            return target;
        }

        size_t EnterNormalGameReq::ByteSizeLong() const {
            // @@protoc_insertion_point(message_byte_size_start:game.base.EnterNormalGameReq)
            size_t total_size = 0;

            if (_internal_metadata_.have_unknown_fields()) {
                total_size +=
                    ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
                    _internal_metadata_.unknown_fields());
            }
            if (_has_bits_[0 / 32] & 31u) {
                // optional string hardid = 5;
                if (has_hardid()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::StringSize(
                        this->hardid());
                }

                // optional int32 userid = 1;
                if (has_userid()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::Int32Size(
                        this->userid());
                }

                // optional int32 roomid = 2;
                if (has_roomid()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::Int32Size(
                        this->roomid());
                }

                // optional int32 flag = 3;
                if (has_flag()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::Int32Size(
                        this->flag());
                }

                // optional int32 target = 4;
                if (has_target()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::Int32Size(
                        this->target());
                }

            }
            int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = cached_size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
            return total_size;
        }

        void EnterNormalGameReq::MergeFrom(const ::google::protobuf::Message& from) {
            // @@protoc_insertion_point(generalized_merge_from_start:game.base.EnterNormalGameReq)
            GOOGLE_DCHECK_NE(&from, this);
            const EnterNormalGameReq* source =
                ::google::protobuf::internal::DynamicCastToGenerated<const EnterNormalGameReq>(
                &from);
            if (source == NULL) {
                // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.base.EnterNormalGameReq)
                ::google::protobuf::internal::ReflectionOps::Merge(from, this);
            } else {
                // @@protoc_insertion_point(generalized_merge_from_cast_success:game.base.EnterNormalGameReq)
                MergeFrom(*source);
            }
        }

        void EnterNormalGameReq::MergeFrom(const EnterNormalGameReq& from) {
            // @@protoc_insertion_point(class_specific_merge_from_start:game.base.EnterNormalGameReq)
            GOOGLE_DCHECK_NE(&from, this);
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = from._has_bits_[0];
            if (cached_has_bits & 31u) {
                if (cached_has_bits & 0x00000001u) {
                    set_has_hardid();
                    hardid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hardid_);
                }
                if (cached_has_bits & 0x00000002u) {
                    userid_ = from.userid_;
                }
                if (cached_has_bits & 0x00000004u) {
                    roomid_ = from.roomid_;
                }
                if (cached_has_bits & 0x00000008u) {
                    flag_ = from.flag_;
                }
                if (cached_has_bits & 0x00000010u) {
                    target_ = from.target_;
                }
                _has_bits_[0] |= cached_has_bits;
            }
        }

        void EnterNormalGameReq::CopyFrom(const ::google::protobuf::Message& from) {
            // @@protoc_insertion_point(generalized_copy_from_start:game.base.EnterNormalGameReq)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        void EnterNormalGameReq::CopyFrom(const EnterNormalGameReq& from) {
            // @@protoc_insertion_point(class_specific_copy_from_start:game.base.EnterNormalGameReq)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        bool EnterNormalGameReq::IsInitialized() const {
            return true;
        }

        void EnterNormalGameReq::Swap(EnterNormalGameReq* other) {
            if (other == this) return;
            InternalSwap(other);
        }
        void EnterNormalGameReq::InternalSwap(EnterNormalGameReq* other) {
            using std::swap;
            hardid_.Swap(&other->hardid_);
            swap(userid_, other->userid_);
            swap(roomid_, other->roomid_);
            swap(flag_, other->flag_);
            swap(target_, other->target_);
            swap(_has_bits_[0], other->_has_bits_[0]);
            _internal_metadata_.Swap(&other->_internal_metadata_);
            swap(_cached_size_, other->_cached_size_);
        }

        ::google::protobuf::Metadata EnterNormalGameReq::GetMetadata() const {
            protobuf_game_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
            return ::protobuf_game_5fbase_2eproto::file_level_metadata[kIndexInFileMessages];
        }


        // ===================================================================

        void EnterNormalGameResp::InitAsDefaultInstance() {
            ::game::base::_EnterNormalGameResp_default_instance_._instance.get_mutable()->hand_ = const_cast<::game::base::BytesData*>(
                ::game::base::BytesData::internal_default_instance());
            ::game::base::_EnterNormalGameResp_default_instance_._instance.get_mutable()->custom_data_ = const_cast<::game::base::BytesData*>(
                ::game::base::BytesData::internal_default_instance());
        }
#if !defined(_MSC_VER) || _MSC_VER >= 1900
        const int EnterNormalGameResp::kCodeFieldNumber;
        const int EnterNormalGameResp::kRoomidFieldNumber;
        const int EnterNormalGameResp::kTablenoFieldNumber;
        const int EnterNormalGameResp::kChairnoFieldNumber;
        const int EnterNormalGameResp::kDepositFieldNumber;
        const int EnterNormalGameResp::kTableStatusFieldNumber;
        const int EnterNormalGameResp::kFlagFieldNumber;
        const int EnterNormalGameResp::kOthersFieldNumber;
        const int EnterNormalGameResp::kHandFieldNumber;
        const int EnterNormalGameResp::kCustomFlagFieldNumber;
        const int EnterNormalGameResp::kCustomDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

        EnterNormalGameResp::EnterNormalGameResp()
            : ::google::protobuf::Message(), _internal_metadata_(NULL) {
            if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
                ::protobuf_game_5fbase_2eproto::InitDefaultsEnterNormalGameResp();
            }
            SharedCtor();
            // @@protoc_insertion_point(constructor:game.base.EnterNormalGameResp)
        }
        EnterNormalGameResp::EnterNormalGameResp(const EnterNormalGameResp& from)
            : ::google::protobuf::Message(),
            _internal_metadata_(NULL),
            _has_bits_(from._has_bits_),
            _cached_size_(0),
            others_(from.others_) {
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            if (from.has_hand()) {
                hand_ = new ::game::base::BytesData(*from.hand_);
            } else {
                hand_ = NULL;
            }
            if (from.has_custom_data()) {
                custom_data_ = new ::game::base::BytesData(*from.custom_data_);
            } else {
                custom_data_ = NULL;
            }
            ::memcpy(&code_, &from.code_,
                     static_cast<size_t>(reinterpret_cast<char*>(&custom_flag_) -
                     reinterpret_cast<char*>(&code_)) + sizeof(custom_flag_));
            // @@protoc_insertion_point(copy_constructor:game.base.EnterNormalGameResp)
        }

        void EnterNormalGameResp::SharedCtor() {
            _cached_size_ = 0;
            ::memset(&hand_, 0, static_cast<size_t>(
                reinterpret_cast<char*>(&custom_flag_) -
                reinterpret_cast<char*>(&hand_)) + sizeof(custom_flag_));
        }

        EnterNormalGameResp::~EnterNormalGameResp() {
            // @@protoc_insertion_point(destructor:game.base.EnterNormalGameResp)
            SharedDtor();
        }

        void EnterNormalGameResp::SharedDtor() {
            if (this != internal_default_instance()) delete hand_;
            if (this != internal_default_instance()) delete custom_data_;
        }

        void EnterNormalGameResp::SetCachedSize(int size) const {
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
        }
        const ::google::protobuf::Descriptor* EnterNormalGameResp::descriptor() {
            ::protobuf_game_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
            return ::protobuf_game_5fbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
        }

        const EnterNormalGameResp& EnterNormalGameResp::default_instance() {
            ::protobuf_game_5fbase_2eproto::InitDefaultsEnterNormalGameResp();
            return *internal_default_instance();
        }

        EnterNormalGameResp* EnterNormalGameResp::New(::google::protobuf::Arena* arena) const {
            EnterNormalGameResp* n = new EnterNormalGameResp;
            if (arena != NULL) {
                arena->Own(n);
            }
            return n;
        }

        void EnterNormalGameResp::Clear() {
            // @@protoc_insertion_point(message_clear_start:game.base.EnterNormalGameResp)
            ::google::protobuf::uint32 cached_has_bits = 0;
            // Prevent compiler warnings about cached_has_bits being unused
            (void) cached_has_bits;

            others_.Clear();
            cached_has_bits = _has_bits_[0];
            if (cached_has_bits & 3u) {
                if (cached_has_bits & 0x00000001u) {
                    GOOGLE_DCHECK(hand_ != NULL);
                    hand_->Clear();
                }
                if (cached_has_bits & 0x00000002u) {
                    GOOGLE_DCHECK(custom_data_ != NULL);
                    custom_data_->Clear();
                }
            }
            if (cached_has_bits & 252u) {
                ::memset(&code_, 0, static_cast<size_t>(
                    reinterpret_cast<char*>(&table_status_) -
                    reinterpret_cast<char*>(&code_)) + sizeof(table_status_));
            }
            if (cached_has_bits & 768u) {
                ::memset(&flag_, 0, static_cast<size_t>(
                    reinterpret_cast<char*>(&custom_flag_) -
                    reinterpret_cast<char*>(&flag_)) + sizeof(custom_flag_));
            }
            _has_bits_.Clear();
            _internal_metadata_.Clear();
        }

        bool EnterNormalGameResp::MergePartialFromCodedStream(
            ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
            ::google::protobuf::uint32 tag;
            // @@protoc_insertion_point(parse_start:game.base.EnterNormalGameResp)
            for (;;) {
                ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
                tag = p.first;
                if (!p.second) goto handle_unusual;
                switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
                    // optional int32 code = 1;
                    case 1: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
                            set_has_code();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &code_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // optional int32 roomid = 2;
                    case 2: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
                            set_has_roomid();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &roomid_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // optional int32 tableno = 3;
                    case 3: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
                            set_has_tableno();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &tableno_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // optional int32 chairno = 4;
                    case 4: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
                            set_has_chairno();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &chairno_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // optional int64 deposit = 5;
                    case 5: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
                            set_has_deposit();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                                input, &deposit_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // optional int32 table_status = 6;
                    case 6: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
                            set_has_table_status();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &table_status_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // optional int32 flag = 7;
                    case 7: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
                            set_has_flag();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &flag_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // repeated .game.base.User others = 8;
                    case 8: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
                            DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_others()));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // optional .game.base.BytesData hand = 9;
                    case 9: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
                            DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                                input, mutable_hand()));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // optional int32 custom_flag = 10;
                    case 10: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
                            set_has_custom_flag();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &custom_flag_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                             // optional .game.base.BytesData custom_data = 11;
                    case 11: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
                            DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                                input, mutable_custom_data()));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                    default: {
handle_unusual:
                        if (tag == 0) {
                            goto success;
                        }
                        DO_(::google::protobuf::internal::WireFormat::SkipField(
                            input, tag, _internal_metadata_.mutable_unknown_fields()));
                        break;
                    }
                }
            }
success:
            // @@protoc_insertion_point(parse_success:game.base.EnterNormalGameResp)
            return true;
failure:
            // @@protoc_insertion_point(parse_failure:game.base.EnterNormalGameResp)
            return false;
#undef DO_
        }

        void EnterNormalGameResp::SerializeWithCachedSizes(
            ::google::protobuf::io::CodedOutputStream* output) const {
            // @@protoc_insertion_point(serialize_start:game.base.EnterNormalGameResp)
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            // optional int32 code = 1;
            if (cached_has_bits & 0x00000004u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
            }

            // optional int32 roomid = 2;
            if (cached_has_bits & 0x00000008u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roomid(), output);
            }

            // optional int32 tableno = 3;
            if (cached_has_bits & 0x00000010u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->tableno(), output);
            }

            // optional int32 chairno = 4;
            if (cached_has_bits & 0x00000020u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->chairno(), output);
            }

            // optional int64 deposit = 5;
            if (cached_has_bits & 0x00000040u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->deposit(), output);
            }

            // optional int32 table_status = 6;
            if (cached_has_bits & 0x00000080u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->table_status(), output);
            }

            // optional int32 flag = 7;
            if (cached_has_bits & 0x00000100u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->flag(), output);
            }

            // repeated .game.base.User others = 8;
            for (unsigned int i = 0,
                 n = static_cast<unsigned int>(this->others_size()); i < n; i++) {
                ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
                    8, this->others(static_cast<int>(i)), output);
            }

            // optional .game.base.BytesData hand = 9;
            if (cached_has_bits & 0x00000001u) {
                ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
                    9, *this->hand_, output);
            }

            // optional int32 custom_flag = 10;
            if (cached_has_bits & 0x00000200u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->custom_flag(), output);
            }

            // optional .game.base.BytesData custom_data = 11;
            if (cached_has_bits & 0x00000002u) {
                ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
                    11, *this->custom_data_, output);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
                    _internal_metadata_.unknown_fields(), output);
            }
            // @@protoc_insertion_point(serialize_end:game.base.EnterNormalGameResp)
        }

        ::google::protobuf::uint8* EnterNormalGameResp::InternalSerializeWithCachedSizesToArray(
            bool deterministic, ::google::protobuf::uint8* target) const {
            (void) deterministic; // Unused
            // @@protoc_insertion_point(serialize_to_array_start:game.base.EnterNormalGameResp)
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            // optional int32 code = 1;
            if (cached_has_bits & 0x00000004u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
            }

            // optional int32 roomid = 2;
            if (cached_has_bits & 0x00000008u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roomid(), target);
            }

            // optional int32 tableno = 3;
            if (cached_has_bits & 0x00000010u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->tableno(), target);
            }

            // optional int32 chairno = 4;
            if (cached_has_bits & 0x00000020u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->chairno(), target);
            }

            // optional int64 deposit = 5;
            if (cached_has_bits & 0x00000040u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->deposit(), target);
            }

            // optional int32 table_status = 6;
            if (cached_has_bits & 0x00000080u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->table_status(), target);
            }

            // optional int32 flag = 7;
            if (cached_has_bits & 0x00000100u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->flag(), target);
            }

            // repeated .game.base.User others = 8;
            for (unsigned int i = 0,
                 n = static_cast<unsigned int>(this->others_size()); i < n; i++) {
                target = ::google::protobuf::internal::WireFormatLite::
                    InternalWriteMessageToArray(
                    8, this->others(static_cast<int>(i)), deterministic, target);
            }

            // optional .game.base.BytesData hand = 9;
            if (cached_has_bits & 0x00000001u) {
                target = ::google::protobuf::internal::WireFormatLite::
                    InternalWriteMessageToArray(
                    9, *this->hand_, deterministic, target);
            }

            // optional int32 custom_flag = 10;
            if (cached_has_bits & 0x00000200u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->custom_flag(), target);
            }

            // optional .game.base.BytesData custom_data = 11;
            if (cached_has_bits & 0x00000002u) {
                target = ::google::protobuf::internal::WireFormatLite::
                    InternalWriteMessageToArray(
                    11, *this->custom_data_, deterministic, target);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                    _internal_metadata_.unknown_fields(), target);
            }
            // @@protoc_insertion_point(serialize_to_array_end:game.base.EnterNormalGameResp)
            return target;
        }

        size_t EnterNormalGameResp::ByteSizeLong() const {
            // @@protoc_insertion_point(message_byte_size_start:game.base.EnterNormalGameResp)
            size_t total_size = 0;

            if (_internal_metadata_.have_unknown_fields()) {
                total_size +=
                    ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
                    _internal_metadata_.unknown_fields());
            }
            // repeated .game.base.User others = 8;
  {
      unsigned int count = static_cast<unsigned int>(this->others_size());
      total_size += 1UL * count;
      for (unsigned int i = 0; i < count; i++) {
          total_size +=
              ::google::protobuf::internal::WireFormatLite::MessageSize(
              this->others(static_cast<int>(i)));
      }
  }

  if (_has_bits_[0 / 32] & 255u) {
      // optional .game.base.BytesData hand = 9;
      if (has_hand()) {
          total_size += 1 +
              ::google::protobuf::internal::WireFormatLite::MessageSize(
              *this->hand_);
      }

      // optional .game.base.BytesData custom_data = 11;
      if (has_custom_data()) {
          total_size += 1 +
              ::google::protobuf::internal::WireFormatLite::MessageSize(
              *this->custom_data_);
      }

      // optional int32 code = 1;
      if (has_code()) {
          total_size += 1 +
              ::google::protobuf::internal::WireFormatLite::Int32Size(
              this->code());
      }

      // optional int32 roomid = 2;
      if (has_roomid()) {
          total_size += 1 +
              ::google::protobuf::internal::WireFormatLite::Int32Size(
              this->roomid());
      }

      // optional int32 tableno = 3;
      if (has_tableno()) {
          total_size += 1 +
              ::google::protobuf::internal::WireFormatLite::Int32Size(
              this->tableno());
      }

      // optional int32 chairno = 4;
      if (has_chairno()) {
          total_size += 1 +
              ::google::protobuf::internal::WireFormatLite::Int32Size(
              this->chairno());
      }

      // optional int64 deposit = 5;
      if (has_deposit()) {
          total_size += 1 +
              ::google::protobuf::internal::WireFormatLite::Int64Size(
              this->deposit());
      }

      // optional int32 table_status = 6;
      if (has_table_status()) {
          total_size += 1 +
              ::google::protobuf::internal::WireFormatLite::Int32Size(
              this->table_status());
      }

  }
  if (_has_bits_[8 / 32] & 768u) {
      // optional int32 flag = 7;
      if (has_flag()) {
          total_size += 1 +
              ::google::protobuf::internal::WireFormatLite::Int32Size(
              this->flag());
      }

      // optional int32 custom_flag = 10;
      if (has_custom_flag()) {
          total_size += 1 +
              ::google::protobuf::internal::WireFormatLite::Int32Size(
              this->custom_flag());
      }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
        }

        void EnterNormalGameResp::MergeFrom(const ::google::protobuf::Message& from) {
            // @@protoc_insertion_point(generalized_merge_from_start:game.base.EnterNormalGameResp)
            GOOGLE_DCHECK_NE(&from, this);
            const EnterNormalGameResp* source =
                ::google::protobuf::internal::DynamicCastToGenerated<const EnterNormalGameResp>(
                &from);
            if (source == NULL) {
                // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.base.EnterNormalGameResp)
                ::google::protobuf::internal::ReflectionOps::Merge(from, this);
            } else {
                // @@protoc_insertion_point(generalized_merge_from_cast_success:game.base.EnterNormalGameResp)
                MergeFrom(*source);
            }
        }

        void EnterNormalGameResp::MergeFrom(const EnterNormalGameResp& from) {
            // @@protoc_insertion_point(class_specific_merge_from_start:game.base.EnterNormalGameResp)
            GOOGLE_DCHECK_NE(&from, this);
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            others_.MergeFrom(from.others_);
            cached_has_bits = from._has_bits_[0];
            if (cached_has_bits & 255u) {
                if (cached_has_bits & 0x00000001u) {
                    mutable_hand()->::game::base::BytesData::MergeFrom(from.hand());
                }
                if (cached_has_bits & 0x00000002u) {
                    mutable_custom_data()->::game::base::BytesData::MergeFrom(from.custom_data());
                }
                if (cached_has_bits & 0x00000004u) {
                    code_ = from.code_;
                }
                if (cached_has_bits & 0x00000008u) {
                    roomid_ = from.roomid_;
                }
                if (cached_has_bits & 0x00000010u) {
                    tableno_ = from.tableno_;
                }
                if (cached_has_bits & 0x00000020u) {
                    chairno_ = from.chairno_;
                }
                if (cached_has_bits & 0x00000040u) {
                    deposit_ = from.deposit_;
                }
                if (cached_has_bits & 0x00000080u) {
                    table_status_ = from.table_status_;
                }
                _has_bits_[0] |= cached_has_bits;
            }
            if (cached_has_bits & 768u) {
                if (cached_has_bits & 0x00000100u) {
                    flag_ = from.flag_;
                }
                if (cached_has_bits & 0x00000200u) {
                    custom_flag_ = from.custom_flag_;
                }
                _has_bits_[0] |= cached_has_bits;
            }
        }

        void EnterNormalGameResp::CopyFrom(const ::google::protobuf::Message& from) {
            // @@protoc_insertion_point(generalized_copy_from_start:game.base.EnterNormalGameResp)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        void EnterNormalGameResp::CopyFrom(const EnterNormalGameResp& from) {
            // @@protoc_insertion_point(class_specific_copy_from_start:game.base.EnterNormalGameResp)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        bool EnterNormalGameResp::IsInitialized() const {
            return true;
        }

        void EnterNormalGameResp::Swap(EnterNormalGameResp* other) {
            if (other == this) return;
            InternalSwap(other);
        }
        void EnterNormalGameResp::InternalSwap(EnterNormalGameResp* other) {
            using std::swap;
            others_.InternalSwap(&other->others_);
            swap(hand_, other->hand_);
            swap(custom_data_, other->custom_data_);
            swap(code_, other->code_);
            swap(roomid_, other->roomid_);
            swap(tableno_, other->tableno_);
            swap(chairno_, other->chairno_);
            swap(deposit_, other->deposit_);
            swap(table_status_, other->table_status_);
            swap(flag_, other->flag_);
            swap(custom_flag_, other->custom_flag_);
            swap(_has_bits_[0], other->_has_bits_[0]);
            _internal_metadata_.Swap(&other->_internal_metadata_);
            swap(_cached_size_, other->_cached_size_);
        }

        ::google::protobuf::Metadata EnterNormalGameResp::GetMetadata() const {
            protobuf_game_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
            return ::protobuf_game_5fbase_2eproto::file_level_metadata[kIndexInFileMessages];
        }


        // ===================================================================

        void PlayerEnterGameNotify::InitAsDefaultInstance() {
            ::game::base::_PlayerEnterGameNotify_default_instance_._instance.get_mutable()->player_info_ = const_cast<::game::base::User*>(
                ::game::base::User::internal_default_instance());
        }
#if !defined(_MSC_VER) || _MSC_VER >= 1900
        const int PlayerEnterGameNotify::kPlayerInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

        PlayerEnterGameNotify::PlayerEnterGameNotify()
            : ::google::protobuf::Message(), _internal_metadata_(NULL) {
            if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
                ::protobuf_game_5fbase_2eproto::InitDefaultsPlayerEnterGameNotify();
            }
            SharedCtor();
            // @@protoc_insertion_point(constructor:game.base.PlayerEnterGameNotify)
        }
        PlayerEnterGameNotify::PlayerEnterGameNotify(const PlayerEnterGameNotify& from)
            : ::google::protobuf::Message(),
            _internal_metadata_(NULL),
            _has_bits_(from._has_bits_),
            _cached_size_(0) {
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            if (from.has_player_info()) {
                player_info_ = new ::game::base::User(*from.player_info_);
            } else {
                player_info_ = NULL;
            }
            // @@protoc_insertion_point(copy_constructor:game.base.PlayerEnterGameNotify)
        }

        void PlayerEnterGameNotify::SharedCtor() {
            _cached_size_ = 0;
            player_info_ = NULL;
        }

        PlayerEnterGameNotify::~PlayerEnterGameNotify() {
            // @@protoc_insertion_point(destructor:game.base.PlayerEnterGameNotify)
            SharedDtor();
        }

        void PlayerEnterGameNotify::SharedDtor() {
            if (this != internal_default_instance()) delete player_info_;
        }

        void PlayerEnterGameNotify::SetCachedSize(int size) const {
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
        }
        const ::google::protobuf::Descriptor* PlayerEnterGameNotify::descriptor() {
            ::protobuf_game_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
            return ::protobuf_game_5fbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
        }

        const PlayerEnterGameNotify& PlayerEnterGameNotify::default_instance() {
            ::protobuf_game_5fbase_2eproto::InitDefaultsPlayerEnterGameNotify();
            return *internal_default_instance();
        }

        PlayerEnterGameNotify* PlayerEnterGameNotify::New(::google::protobuf::Arena* arena) const {
            PlayerEnterGameNotify* n = new PlayerEnterGameNotify;
            if (arena != NULL) {
                arena->Own(n);
            }
            return n;
        }

        void PlayerEnterGameNotify::Clear() {
            // @@protoc_insertion_point(message_clear_start:game.base.PlayerEnterGameNotify)
            ::google::protobuf::uint32 cached_has_bits = 0;
            // Prevent compiler warnings about cached_has_bits being unused
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
                GOOGLE_DCHECK(player_info_ != NULL);
                player_info_->Clear();
            }
            _has_bits_.Clear();
            _internal_metadata_.Clear();
        }

        bool PlayerEnterGameNotify::MergePartialFromCodedStream(
            ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
            ::google::protobuf::uint32 tag;
            // @@protoc_insertion_point(parse_start:game.base.PlayerEnterGameNotify)
            for (;;) {
                ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
                tag = p.first;
                if (!p.second) goto handle_unusual;
                switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
                    // optional .game.base.User player_info = 1;
                    case 1: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
                            DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                                input, mutable_player_info()));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                    default: {
handle_unusual:
                        if (tag == 0) {
                            goto success;
                        }
                        DO_(::google::protobuf::internal::WireFormat::SkipField(
                            input, tag, _internal_metadata_.mutable_unknown_fields()));
                        break;
                    }
                }
            }
success:
            // @@protoc_insertion_point(parse_success:game.base.PlayerEnterGameNotify)
            return true;
failure:
            // @@protoc_insertion_point(parse_failure:game.base.PlayerEnterGameNotify)
            return false;
#undef DO_
        }

        void PlayerEnterGameNotify::SerializeWithCachedSizes(
            ::google::protobuf::io::CodedOutputStream* output) const {
            // @@protoc_insertion_point(serialize_start:game.base.PlayerEnterGameNotify)
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            // optional .game.base.User player_info = 1;
            if (cached_has_bits & 0x00000001u) {
                ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
                    1, *this->player_info_, output);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
                    _internal_metadata_.unknown_fields(), output);
            }
            // @@protoc_insertion_point(serialize_end:game.base.PlayerEnterGameNotify)
        }

        ::google::protobuf::uint8* PlayerEnterGameNotify::InternalSerializeWithCachedSizesToArray(
            bool deterministic, ::google::protobuf::uint8* target) const {
            (void) deterministic; // Unused
            // @@protoc_insertion_point(serialize_to_array_start:game.base.PlayerEnterGameNotify)
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            // optional .game.base.User player_info = 1;
            if (cached_has_bits & 0x00000001u) {
                target = ::google::protobuf::internal::WireFormatLite::
                    InternalWriteMessageToArray(
                    1, *this->player_info_, deterministic, target);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                    _internal_metadata_.unknown_fields(), target);
            }
            // @@protoc_insertion_point(serialize_to_array_end:game.base.PlayerEnterGameNotify)
            return target;
        }

        size_t PlayerEnterGameNotify::ByteSizeLong() const {
            // @@protoc_insertion_point(message_byte_size_start:game.base.PlayerEnterGameNotify)
            size_t total_size = 0;

            if (_internal_metadata_.have_unknown_fields()) {
                total_size +=
                    ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
                    _internal_metadata_.unknown_fields());
            }
            // optional .game.base.User player_info = 1;
            if (has_player_info()) {
                total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(
                    *this->player_info_);
            }

            int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = cached_size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
            return total_size;
        }

        void PlayerEnterGameNotify::MergeFrom(const ::google::protobuf::Message& from) {
            // @@protoc_insertion_point(generalized_merge_from_start:game.base.PlayerEnterGameNotify)
            GOOGLE_DCHECK_NE(&from, this);
            const PlayerEnterGameNotify* source =
                ::google::protobuf::internal::DynamicCastToGenerated<const PlayerEnterGameNotify>(
                &from);
            if (source == NULL) {
                // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.base.PlayerEnterGameNotify)
                ::google::protobuf::internal::ReflectionOps::Merge(from, this);
            } else {
                // @@protoc_insertion_point(generalized_merge_from_cast_success:game.base.PlayerEnterGameNotify)
                MergeFrom(*source);
            }
        }

        void PlayerEnterGameNotify::MergeFrom(const PlayerEnterGameNotify& from) {
            // @@protoc_insertion_point(class_specific_merge_from_start:game.base.PlayerEnterGameNotify)
            GOOGLE_DCHECK_NE(&from, this);
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            if (from.has_player_info()) {
                mutable_player_info()->::game::base::User::MergeFrom(from.player_info());
            }
        }

        void PlayerEnterGameNotify::CopyFrom(const ::google::protobuf::Message& from) {
            // @@protoc_insertion_point(generalized_copy_from_start:game.base.PlayerEnterGameNotify)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        void PlayerEnterGameNotify::CopyFrom(const PlayerEnterGameNotify& from) {
            // @@protoc_insertion_point(class_specific_copy_from_start:game.base.PlayerEnterGameNotify)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        bool PlayerEnterGameNotify::IsInitialized() const {
            return true;
        }

        void PlayerEnterGameNotify::Swap(PlayerEnterGameNotify* other) {
            if (other == this) return;
            InternalSwap(other);
        }
        void PlayerEnterGameNotify::InternalSwap(PlayerEnterGameNotify* other) {
            using std::swap;
            swap(player_info_, other->player_info_);
            swap(_has_bits_[0], other->_has_bits_[0]);
            _internal_metadata_.Swap(&other->_internal_metadata_);
            swap(_cached_size_, other->_cached_size_);
        }

        ::google::protobuf::Metadata PlayerEnterGameNotify::GetMetadata() const {
            protobuf_game_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
            return ::protobuf_game_5fbase_2eproto::file_level_metadata[kIndexInFileMessages];
        }


        // ===================================================================

        void EnterPrivateGameReq::InitAsDefaultInstance() {
            ::game::base::_EnterPrivateGameReq_default_instance_._instance.get_mutable()->base_enter_ = const_cast<::game::base::EnterNormalGameReq*>(
                ::game::base::EnterNormalGameReq::internal_default_instance());
        }
#if !defined(_MSC_VER) || _MSC_VER >= 1900
        const int EnterPrivateGameReq::kBaseEnterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

        EnterPrivateGameReq::EnterPrivateGameReq()
            : ::google::protobuf::Message(), _internal_metadata_(NULL) {
            if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
                ::protobuf_game_5fbase_2eproto::InitDefaultsEnterPrivateGameReq();
            }
            SharedCtor();
            // @@protoc_insertion_point(constructor:game.base.EnterPrivateGameReq)
        }
        EnterPrivateGameReq::EnterPrivateGameReq(const EnterPrivateGameReq& from)
            : ::google::protobuf::Message(),
            _internal_metadata_(NULL),
            _has_bits_(from._has_bits_),
            _cached_size_(0) {
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            if (from.has_base_enter()) {
                base_enter_ = new ::game::base::EnterNormalGameReq(*from.base_enter_);
            } else {
                base_enter_ = NULL;
            }
            // @@protoc_insertion_point(copy_constructor:game.base.EnterPrivateGameReq)
        }

        void EnterPrivateGameReq::SharedCtor() {
            _cached_size_ = 0;
            base_enter_ = NULL;
        }

        EnterPrivateGameReq::~EnterPrivateGameReq() {
            // @@protoc_insertion_point(destructor:game.base.EnterPrivateGameReq)
            SharedDtor();
        }

        void EnterPrivateGameReq::SharedDtor() {
            if (this != internal_default_instance()) delete base_enter_;
        }

        void EnterPrivateGameReq::SetCachedSize(int size) const {
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
        }
        const ::google::protobuf::Descriptor* EnterPrivateGameReq::descriptor() {
            ::protobuf_game_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
            return ::protobuf_game_5fbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
        }

        const EnterPrivateGameReq& EnterPrivateGameReq::default_instance() {
            ::protobuf_game_5fbase_2eproto::InitDefaultsEnterPrivateGameReq();
            return *internal_default_instance();
        }

        EnterPrivateGameReq* EnterPrivateGameReq::New(::google::protobuf::Arena* arena) const {
            EnterPrivateGameReq* n = new EnterPrivateGameReq;
            if (arena != NULL) {
                arena->Own(n);
            }
            return n;
        }

        void EnterPrivateGameReq::Clear() {
            // @@protoc_insertion_point(message_clear_start:game.base.EnterPrivateGameReq)
            ::google::protobuf::uint32 cached_has_bits = 0;
            // Prevent compiler warnings about cached_has_bits being unused
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
                GOOGLE_DCHECK(base_enter_ != NULL);
                base_enter_->Clear();
            }
            _has_bits_.Clear();
            _internal_metadata_.Clear();
        }

        bool EnterPrivateGameReq::MergePartialFromCodedStream(
            ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
            ::google::protobuf::uint32 tag;
            // @@protoc_insertion_point(parse_start:game.base.EnterPrivateGameReq)
            for (;;) {
                ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
                tag = p.first;
                if (!p.second) goto handle_unusual;
                switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
                    // optional .game.base.EnterNormalGameReq base_enter = 1;
                    case 1: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
                            DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                                input, mutable_base_enter()));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                    default: {
handle_unusual:
                        if (tag == 0) {
                            goto success;
                        }
                        DO_(::google::protobuf::internal::WireFormat::SkipField(
                            input, tag, _internal_metadata_.mutable_unknown_fields()));
                        break;
                    }
                }
            }
success:
            // @@protoc_insertion_point(parse_success:game.base.EnterPrivateGameReq)
            return true;
failure:
            // @@protoc_insertion_point(parse_failure:game.base.EnterPrivateGameReq)
            return false;
#undef DO_
        }

        void EnterPrivateGameReq::SerializeWithCachedSizes(
            ::google::protobuf::io::CodedOutputStream* output) const {
            // @@protoc_insertion_point(serialize_start:game.base.EnterPrivateGameReq)
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            // optional .game.base.EnterNormalGameReq base_enter = 1;
            if (cached_has_bits & 0x00000001u) {
                ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
                    1, *this->base_enter_, output);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
                    _internal_metadata_.unknown_fields(), output);
            }
            // @@protoc_insertion_point(serialize_end:game.base.EnterPrivateGameReq)
        }

        ::google::protobuf::uint8* EnterPrivateGameReq::InternalSerializeWithCachedSizesToArray(
            bool deterministic, ::google::protobuf::uint8* target) const {
            (void) deterministic; // Unused
            // @@protoc_insertion_point(serialize_to_array_start:game.base.EnterPrivateGameReq)
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            // optional .game.base.EnterNormalGameReq base_enter = 1;
            if (cached_has_bits & 0x00000001u) {
                target = ::google::protobuf::internal::WireFormatLite::
                    InternalWriteMessageToArray(
                    1, *this->base_enter_, deterministic, target);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                    _internal_metadata_.unknown_fields(), target);
            }
            // @@protoc_insertion_point(serialize_to_array_end:game.base.EnterPrivateGameReq)
            return target;
        }

        size_t EnterPrivateGameReq::ByteSizeLong() const {
            // @@protoc_insertion_point(message_byte_size_start:game.base.EnterPrivateGameReq)
            size_t total_size = 0;

            if (_internal_metadata_.have_unknown_fields()) {
                total_size +=
                    ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
                    _internal_metadata_.unknown_fields());
            }
            // optional .game.base.EnterNormalGameReq base_enter = 1;
            if (has_base_enter()) {
                total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(
                    *this->base_enter_);
            }

            int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = cached_size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
            return total_size;
        }

        void EnterPrivateGameReq::MergeFrom(const ::google::protobuf::Message& from) {
            // @@protoc_insertion_point(generalized_merge_from_start:game.base.EnterPrivateGameReq)
            GOOGLE_DCHECK_NE(&from, this);
            const EnterPrivateGameReq* source =
                ::google::protobuf::internal::DynamicCastToGenerated<const EnterPrivateGameReq>(
                &from);
            if (source == NULL) {
                // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.base.EnterPrivateGameReq)
                ::google::protobuf::internal::ReflectionOps::Merge(from, this);
            } else {
                // @@protoc_insertion_point(generalized_merge_from_cast_success:game.base.EnterPrivateGameReq)
                MergeFrom(*source);
            }
        }

        void EnterPrivateGameReq::MergeFrom(const EnterPrivateGameReq& from) {
            // @@protoc_insertion_point(class_specific_merge_from_start:game.base.EnterPrivateGameReq)
            GOOGLE_DCHECK_NE(&from, this);
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            if (from.has_base_enter()) {
                mutable_base_enter()->::game::base::EnterNormalGameReq::MergeFrom(from.base_enter());
            }
        }

        void EnterPrivateGameReq::CopyFrom(const ::google::protobuf::Message& from) {
            // @@protoc_insertion_point(generalized_copy_from_start:game.base.EnterPrivateGameReq)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        void EnterPrivateGameReq::CopyFrom(const EnterPrivateGameReq& from) {
            // @@protoc_insertion_point(class_specific_copy_from_start:game.base.EnterPrivateGameReq)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        bool EnterPrivateGameReq::IsInitialized() const {
            return true;
        }

        void EnterPrivateGameReq::Swap(EnterPrivateGameReq* other) {
            if (other == this) return;
            InternalSwap(other);
        }
        void EnterPrivateGameReq::InternalSwap(EnterPrivateGameReq* other) {
            using std::swap;
            swap(base_enter_, other->base_enter_);
            swap(_has_bits_[0], other->_has_bits_[0]);
            _internal_metadata_.Swap(&other->_internal_metadata_);
            swap(_cached_size_, other->_cached_size_);
        }

        ::google::protobuf::Metadata EnterPrivateGameReq::GetMetadata() const {
            protobuf_game_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
            return ::protobuf_game_5fbase_2eproto::file_level_metadata[kIndexInFileMessages];
        }


        // ===================================================================

        void EnterPrivateGameResp::InitAsDefaultInstance() {}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
        const int EnterPrivateGameResp::kCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

        EnterPrivateGameResp::EnterPrivateGameResp()
            : ::google::protobuf::Message(), _internal_metadata_(NULL) {
            if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
                ::protobuf_game_5fbase_2eproto::InitDefaultsEnterPrivateGameResp();
            }
            SharedCtor();
            // @@protoc_insertion_point(constructor:game.base.EnterPrivateGameResp)
        }
        EnterPrivateGameResp::EnterPrivateGameResp(const EnterPrivateGameResp& from)
            : ::google::protobuf::Message(),
            _internal_metadata_(NULL),
            _has_bits_(from._has_bits_),
            _cached_size_(0) {
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            code_ = from.code_;
            // @@protoc_insertion_point(copy_constructor:game.base.EnterPrivateGameResp)
        }

        void EnterPrivateGameResp::SharedCtor() {
            _cached_size_ = 0;
            code_ = 0;
        }

        EnterPrivateGameResp::~EnterPrivateGameResp() {
            // @@protoc_insertion_point(destructor:game.base.EnterPrivateGameResp)
            SharedDtor();
        }

        void EnterPrivateGameResp::SharedDtor() {}

        void EnterPrivateGameResp::SetCachedSize(int size) const {
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
        }
        const ::google::protobuf::Descriptor* EnterPrivateGameResp::descriptor() {
            ::protobuf_game_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
            return ::protobuf_game_5fbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
        }

        const EnterPrivateGameResp& EnterPrivateGameResp::default_instance() {
            ::protobuf_game_5fbase_2eproto::InitDefaultsEnterPrivateGameResp();
            return *internal_default_instance();
        }

        EnterPrivateGameResp* EnterPrivateGameResp::New(::google::protobuf::Arena* arena) const {
            EnterPrivateGameResp* n = new EnterPrivateGameResp;
            if (arena != NULL) {
                arena->Own(n);
            }
            return n;
        }

        void EnterPrivateGameResp::Clear() {
            // @@protoc_insertion_point(message_clear_start:game.base.EnterPrivateGameResp)
            ::google::protobuf::uint32 cached_has_bits = 0;
            // Prevent compiler warnings about cached_has_bits being unused
            (void) cached_has_bits;

            code_ = 0;
            _has_bits_.Clear();
            _internal_metadata_.Clear();
        }

        bool EnterPrivateGameResp::MergePartialFromCodedStream(
            ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
            ::google::protobuf::uint32 tag;
            // @@protoc_insertion_point(parse_start:game.base.EnterPrivateGameResp)
            for (;;) {
                ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
                tag = p.first;
                if (!p.second) goto handle_unusual;
                switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
                    // optional int32 code = 1;
                    case 1: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
                            set_has_code();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &code_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                    default: {
handle_unusual:
                        if (tag == 0) {
                            goto success;
                        }
                        DO_(::google::protobuf::internal::WireFormat::SkipField(
                            input, tag, _internal_metadata_.mutable_unknown_fields()));
                        break;
                    }
                }
            }
success:
            // @@protoc_insertion_point(parse_success:game.base.EnterPrivateGameResp)
            return true;
failure:
            // @@protoc_insertion_point(parse_failure:game.base.EnterPrivateGameResp)
            return false;
#undef DO_
        }

        void EnterPrivateGameResp::SerializeWithCachedSizes(
            ::google::protobuf::io::CodedOutputStream* output) const {
            // @@protoc_insertion_point(serialize_start:game.base.EnterPrivateGameResp)
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            // optional int32 code = 1;
            if (cached_has_bits & 0x00000001u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
                    _internal_metadata_.unknown_fields(), output);
            }
            // @@protoc_insertion_point(serialize_end:game.base.EnterPrivateGameResp)
        }

        ::google::protobuf::uint8* EnterPrivateGameResp::InternalSerializeWithCachedSizesToArray(
            bool deterministic, ::google::protobuf::uint8* target) const {
            (void) deterministic; // Unused
            // @@protoc_insertion_point(serialize_to_array_start:game.base.EnterPrivateGameResp)
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            // optional int32 code = 1;
            if (cached_has_bits & 0x00000001u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                    _internal_metadata_.unknown_fields(), target);
            }
            // @@protoc_insertion_point(serialize_to_array_end:game.base.EnterPrivateGameResp)
            return target;
        }

        size_t EnterPrivateGameResp::ByteSizeLong() const {
            // @@protoc_insertion_point(message_byte_size_start:game.base.EnterPrivateGameResp)
            size_t total_size = 0;

            if (_internal_metadata_.have_unknown_fields()) {
                total_size +=
                    ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
                    _internal_metadata_.unknown_fields());
            }
            // optional int32 code = 1;
            if (has_code()) {
                total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::Int32Size(
                    this->code());
            }

            int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = cached_size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
            return total_size;
        }

        void EnterPrivateGameResp::MergeFrom(const ::google::protobuf::Message& from) {
            // @@protoc_insertion_point(generalized_merge_from_start:game.base.EnterPrivateGameResp)
            GOOGLE_DCHECK_NE(&from, this);
            const EnterPrivateGameResp* source =
                ::google::protobuf::internal::DynamicCastToGenerated<const EnterPrivateGameResp>(
                &from);
            if (source == NULL) {
                // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.base.EnterPrivateGameResp)
                ::google::protobuf::internal::ReflectionOps::Merge(from, this);
            } else {
                // @@protoc_insertion_point(generalized_merge_from_cast_success:game.base.EnterPrivateGameResp)
                MergeFrom(*source);
            }
        }

        void EnterPrivateGameResp::MergeFrom(const EnterPrivateGameResp& from) {
            // @@protoc_insertion_point(class_specific_merge_from_start:game.base.EnterPrivateGameResp)
            GOOGLE_DCHECK_NE(&from, this);
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            if (from.has_code()) {
                set_code(from.code());
            }
        }

        void EnterPrivateGameResp::CopyFrom(const ::google::protobuf::Message& from) {
            // @@protoc_insertion_point(generalized_copy_from_start:game.base.EnterPrivateGameResp)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        void EnterPrivateGameResp::CopyFrom(const EnterPrivateGameResp& from) {
            // @@protoc_insertion_point(class_specific_copy_from_start:game.base.EnterPrivateGameResp)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        bool EnterPrivateGameResp::IsInitialized() const {
            return true;
        }

        void EnterPrivateGameResp::Swap(EnterPrivateGameResp* other) {
            if (other == this) return;
            InternalSwap(other);
        }
        void EnterPrivateGameResp::InternalSwap(EnterPrivateGameResp* other) {
            using std::swap;
            swap(code_, other->code_);
            swap(_has_bits_[0], other->_has_bits_[0]);
            _internal_metadata_.Swap(&other->_internal_metadata_);
            swap(_cached_size_, other->_cached_size_);
        }

        ::google::protobuf::Metadata EnterPrivateGameResp::GetMetadata() const {
            protobuf_game_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
            return ::protobuf_game_5fbase_2eproto::file_level_metadata[kIndexInFileMessages];
        }


        // ===================================================================

        void EnterMatchGameReq::InitAsDefaultInstance() {
            ::game::base::_EnterMatchGameReq_default_instance_._instance.get_mutable()->base_enter_ = const_cast<::game::base::EnterNormalGameReq*>(
                ::game::base::EnterNormalGameReq::internal_default_instance());
        }
#if !defined(_MSC_VER) || _MSC_VER >= 1900
        const int EnterMatchGameReq::kBaseEnterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

        EnterMatchGameReq::EnterMatchGameReq()
            : ::google::protobuf::Message(), _internal_metadata_(NULL) {
            if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
                ::protobuf_game_5fbase_2eproto::InitDefaultsEnterMatchGameReq();
            }
            SharedCtor();
            // @@protoc_insertion_point(constructor:game.base.EnterMatchGameReq)
        }
        EnterMatchGameReq::EnterMatchGameReq(const EnterMatchGameReq& from)
            : ::google::protobuf::Message(),
            _internal_metadata_(NULL),
            _has_bits_(from._has_bits_),
            _cached_size_(0) {
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            if (from.has_base_enter()) {
                base_enter_ = new ::game::base::EnterNormalGameReq(*from.base_enter_);
            } else {
                base_enter_ = NULL;
            }
            // @@protoc_insertion_point(copy_constructor:game.base.EnterMatchGameReq)
        }

        void EnterMatchGameReq::SharedCtor() {
            _cached_size_ = 0;
            base_enter_ = NULL;
        }

        EnterMatchGameReq::~EnterMatchGameReq() {
            // @@protoc_insertion_point(destructor:game.base.EnterMatchGameReq)
            SharedDtor();
        }

        void EnterMatchGameReq::SharedDtor() {
            if (this != internal_default_instance()) delete base_enter_;
        }

        void EnterMatchGameReq::SetCachedSize(int size) const {
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
        }
        const ::google::protobuf::Descriptor* EnterMatchGameReq::descriptor() {
            ::protobuf_game_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
            return ::protobuf_game_5fbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
        }

        const EnterMatchGameReq& EnterMatchGameReq::default_instance() {
            ::protobuf_game_5fbase_2eproto::InitDefaultsEnterMatchGameReq();
            return *internal_default_instance();
        }

        EnterMatchGameReq* EnterMatchGameReq::New(::google::protobuf::Arena* arena) const {
            EnterMatchGameReq* n = new EnterMatchGameReq;
            if (arena != NULL) {
                arena->Own(n);
            }
            return n;
        }

        void EnterMatchGameReq::Clear() {
            // @@protoc_insertion_point(message_clear_start:game.base.EnterMatchGameReq)
            ::google::protobuf::uint32 cached_has_bits = 0;
            // Prevent compiler warnings about cached_has_bits being unused
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
                GOOGLE_DCHECK(base_enter_ != NULL);
                base_enter_->Clear();
            }
            _has_bits_.Clear();
            _internal_metadata_.Clear();
        }

        bool EnterMatchGameReq::MergePartialFromCodedStream(
            ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
            ::google::protobuf::uint32 tag;
            // @@protoc_insertion_point(parse_start:game.base.EnterMatchGameReq)
            for (;;) {
                ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
                tag = p.first;
                if (!p.second) goto handle_unusual;
                switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
                    // optional .game.base.EnterNormalGameReq base_enter = 1;
                    case 1: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
                            DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                                input, mutable_base_enter()));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                    default: {
handle_unusual:
                        if (tag == 0) {
                            goto success;
                        }
                        DO_(::google::protobuf::internal::WireFormat::SkipField(
                            input, tag, _internal_metadata_.mutable_unknown_fields()));
                        break;
                    }
                }
            }
success:
            // @@protoc_insertion_point(parse_success:game.base.EnterMatchGameReq)
            return true;
failure:
            // @@protoc_insertion_point(parse_failure:game.base.EnterMatchGameReq)
            return false;
#undef DO_
        }

        void EnterMatchGameReq::SerializeWithCachedSizes(
            ::google::protobuf::io::CodedOutputStream* output) const {
            // @@protoc_insertion_point(serialize_start:game.base.EnterMatchGameReq)
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            // optional .game.base.EnterNormalGameReq base_enter = 1;
            if (cached_has_bits & 0x00000001u) {
                ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
                    1, *this->base_enter_, output);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
                    _internal_metadata_.unknown_fields(), output);
            }
            // @@protoc_insertion_point(serialize_end:game.base.EnterMatchGameReq)
        }

        ::google::protobuf::uint8* EnterMatchGameReq::InternalSerializeWithCachedSizesToArray(
            bool deterministic, ::google::protobuf::uint8* target) const {
            (void) deterministic; // Unused
            // @@protoc_insertion_point(serialize_to_array_start:game.base.EnterMatchGameReq)
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            // optional .game.base.EnterNormalGameReq base_enter = 1;
            if (cached_has_bits & 0x00000001u) {
                target = ::google::protobuf::internal::WireFormatLite::
                    InternalWriteMessageToArray(
                    1, *this->base_enter_, deterministic, target);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                    _internal_metadata_.unknown_fields(), target);
            }
            // @@protoc_insertion_point(serialize_to_array_end:game.base.EnterMatchGameReq)
            return target;
        }

        size_t EnterMatchGameReq::ByteSizeLong() const {
            // @@protoc_insertion_point(message_byte_size_start:game.base.EnterMatchGameReq)
            size_t total_size = 0;

            if (_internal_metadata_.have_unknown_fields()) {
                total_size +=
                    ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
                    _internal_metadata_.unknown_fields());
            }
            // optional .game.base.EnterNormalGameReq base_enter = 1;
            if (has_base_enter()) {
                total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(
                    *this->base_enter_);
            }

            int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = cached_size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
            return total_size;
        }

        void EnterMatchGameReq::MergeFrom(const ::google::protobuf::Message& from) {
            // @@protoc_insertion_point(generalized_merge_from_start:game.base.EnterMatchGameReq)
            GOOGLE_DCHECK_NE(&from, this);
            const EnterMatchGameReq* source =
                ::google::protobuf::internal::DynamicCastToGenerated<const EnterMatchGameReq>(
                &from);
            if (source == NULL) {
                // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.base.EnterMatchGameReq)
                ::google::protobuf::internal::ReflectionOps::Merge(from, this);
            } else {
                // @@protoc_insertion_point(generalized_merge_from_cast_success:game.base.EnterMatchGameReq)
                MergeFrom(*source);
            }
        }

        void EnterMatchGameReq::MergeFrom(const EnterMatchGameReq& from) {
            // @@protoc_insertion_point(class_specific_merge_from_start:game.base.EnterMatchGameReq)
            GOOGLE_DCHECK_NE(&from, this);
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            if (from.has_base_enter()) {
                mutable_base_enter()->::game::base::EnterNormalGameReq::MergeFrom(from.base_enter());
            }
        }

        void EnterMatchGameReq::CopyFrom(const ::google::protobuf::Message& from) {
            // @@protoc_insertion_point(generalized_copy_from_start:game.base.EnterMatchGameReq)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        void EnterMatchGameReq::CopyFrom(const EnterMatchGameReq& from) {
            // @@protoc_insertion_point(class_specific_copy_from_start:game.base.EnterMatchGameReq)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        bool EnterMatchGameReq::IsInitialized() const {
            return true;
        }

        void EnterMatchGameReq::Swap(EnterMatchGameReq* other) {
            if (other == this) return;
            InternalSwap(other);
        }
        void EnterMatchGameReq::InternalSwap(EnterMatchGameReq* other) {
            using std::swap;
            swap(base_enter_, other->base_enter_);
            swap(_has_bits_[0], other->_has_bits_[0]);
            _internal_metadata_.Swap(&other->_internal_metadata_);
            swap(_cached_size_, other->_cached_size_);
        }

        ::google::protobuf::Metadata EnterMatchGameReq::GetMetadata() const {
            protobuf_game_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
            return ::protobuf_game_5fbase_2eproto::file_level_metadata[kIndexInFileMessages];
        }


        // ===================================================================

        void EnterMatchGameResp::InitAsDefaultInstance() {}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
        const int EnterMatchGameResp::kCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

        EnterMatchGameResp::EnterMatchGameResp()
            : ::google::protobuf::Message(), _internal_metadata_(NULL) {
            if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
                ::protobuf_game_5fbase_2eproto::InitDefaultsEnterMatchGameResp();
            }
            SharedCtor();
            // @@protoc_insertion_point(constructor:game.base.EnterMatchGameResp)
        }
        EnterMatchGameResp::EnterMatchGameResp(const EnterMatchGameResp& from)
            : ::google::protobuf::Message(),
            _internal_metadata_(NULL),
            _has_bits_(from._has_bits_),
            _cached_size_(0) {
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            code_ = from.code_;
            // @@protoc_insertion_point(copy_constructor:game.base.EnterMatchGameResp)
        }

        void EnterMatchGameResp::SharedCtor() {
            _cached_size_ = 0;
            code_ = 0;
        }

        EnterMatchGameResp::~EnterMatchGameResp() {
            // @@protoc_insertion_point(destructor:game.base.EnterMatchGameResp)
            SharedDtor();
        }

        void EnterMatchGameResp::SharedDtor() {}

        void EnterMatchGameResp::SetCachedSize(int size) const {
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
        }
        const ::google::protobuf::Descriptor* EnterMatchGameResp::descriptor() {
            ::protobuf_game_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
            return ::protobuf_game_5fbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
        }

        const EnterMatchGameResp& EnterMatchGameResp::default_instance() {
            ::protobuf_game_5fbase_2eproto::InitDefaultsEnterMatchGameResp();
            return *internal_default_instance();
        }

        EnterMatchGameResp* EnterMatchGameResp::New(::google::protobuf::Arena* arena) const {
            EnterMatchGameResp* n = new EnterMatchGameResp;
            if (arena != NULL) {
                arena->Own(n);
            }
            return n;
        }

        void EnterMatchGameResp::Clear() {
            // @@protoc_insertion_point(message_clear_start:game.base.EnterMatchGameResp)
            ::google::protobuf::uint32 cached_has_bits = 0;
            // Prevent compiler warnings about cached_has_bits being unused
            (void) cached_has_bits;

            code_ = 0;
            _has_bits_.Clear();
            _internal_metadata_.Clear();
        }

        bool EnterMatchGameResp::MergePartialFromCodedStream(
            ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
            ::google::protobuf::uint32 tag;
            // @@protoc_insertion_point(parse_start:game.base.EnterMatchGameResp)
            for (;;) {
                ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
                tag = p.first;
                if (!p.second) goto handle_unusual;
                switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
                    // optional int32 code = 1;
                    case 1: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
                            set_has_code();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &code_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                    default: {
handle_unusual:
                        if (tag == 0) {
                            goto success;
                        }
                        DO_(::google::protobuf::internal::WireFormat::SkipField(
                            input, tag, _internal_metadata_.mutable_unknown_fields()));
                        break;
                    }
                }
            }
success:
            // @@protoc_insertion_point(parse_success:game.base.EnterMatchGameResp)
            return true;
failure:
            // @@protoc_insertion_point(parse_failure:game.base.EnterMatchGameResp)
            return false;
#undef DO_
        }

        void EnterMatchGameResp::SerializeWithCachedSizes(
            ::google::protobuf::io::CodedOutputStream* output) const {
            // @@protoc_insertion_point(serialize_start:game.base.EnterMatchGameResp)
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            // optional int32 code = 1;
            if (cached_has_bits & 0x00000001u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
                    _internal_metadata_.unknown_fields(), output);
            }
            // @@protoc_insertion_point(serialize_end:game.base.EnterMatchGameResp)
        }

        ::google::protobuf::uint8* EnterMatchGameResp::InternalSerializeWithCachedSizesToArray(
            bool deterministic, ::google::protobuf::uint8* target) const {
            (void) deterministic; // Unused
            // @@protoc_insertion_point(serialize_to_array_start:game.base.EnterMatchGameResp)
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            // optional int32 code = 1;
            if (cached_has_bits & 0x00000001u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                    _internal_metadata_.unknown_fields(), target);
            }
            // @@protoc_insertion_point(serialize_to_array_end:game.base.EnterMatchGameResp)
            return target;
        }

        size_t EnterMatchGameResp::ByteSizeLong() const {
            // @@protoc_insertion_point(message_byte_size_start:game.base.EnterMatchGameResp)
            size_t total_size = 0;

            if (_internal_metadata_.have_unknown_fields()) {
                total_size +=
                    ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
                    _internal_metadata_.unknown_fields());
            }
            // optional int32 code = 1;
            if (has_code()) {
                total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::Int32Size(
                    this->code());
            }

            int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = cached_size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
            return total_size;
        }

        void EnterMatchGameResp::MergeFrom(const ::google::protobuf::Message& from) {
            // @@protoc_insertion_point(generalized_merge_from_start:game.base.EnterMatchGameResp)
            GOOGLE_DCHECK_NE(&from, this);
            const EnterMatchGameResp* source =
                ::google::protobuf::internal::DynamicCastToGenerated<const EnterMatchGameResp>(
                &from);
            if (source == NULL) {
                // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.base.EnterMatchGameResp)
                ::google::protobuf::internal::ReflectionOps::Merge(from, this);
            } else {
                // @@protoc_insertion_point(generalized_merge_from_cast_success:game.base.EnterMatchGameResp)
                MergeFrom(*source);
            }
        }

        void EnterMatchGameResp::MergeFrom(const EnterMatchGameResp& from) {
            // @@protoc_insertion_point(class_specific_merge_from_start:game.base.EnterMatchGameResp)
            GOOGLE_DCHECK_NE(&from, this);
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            if (from.has_code()) {
                set_code(from.code());
            }
        }

        void EnterMatchGameResp::CopyFrom(const ::google::protobuf::Message& from) {
            // @@protoc_insertion_point(generalized_copy_from_start:game.base.EnterMatchGameResp)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        void EnterMatchGameResp::CopyFrom(const EnterMatchGameResp& from) {
            // @@protoc_insertion_point(class_specific_copy_from_start:game.base.EnterMatchGameResp)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        bool EnterMatchGameResp::IsInitialized() const {
            return true;
        }

        void EnterMatchGameResp::Swap(EnterMatchGameResp* other) {
            if (other == this) return;
            InternalSwap(other);
        }
        void EnterMatchGameResp::InternalSwap(EnterMatchGameResp* other) {
            using std::swap;
            swap(code_, other->code_);
            swap(_has_bits_[0], other->_has_bits_[0]);
            _internal_metadata_.Swap(&other->_internal_metadata_);
            swap(_cached_size_, other->_cached_size_);
        }

        ::google::protobuf::Metadata EnterMatchGameResp::GetMetadata() const {
            protobuf_game_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
            return ::protobuf_game_5fbase_2eproto::file_level_metadata[kIndexInFileMessages];
        }


        // ===================================================================

        void LeaveGameReq::InitAsDefaultInstance() {}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
        const int LeaveGameReq::kUseridFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

        LeaveGameReq::LeaveGameReq()
            : ::google::protobuf::Message(), _internal_metadata_(NULL) {
            if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
                ::protobuf_game_5fbase_2eproto::InitDefaultsLeaveGameReq();
            }
            SharedCtor();
            // @@protoc_insertion_point(constructor:game.base.LeaveGameReq)
        }
        LeaveGameReq::LeaveGameReq(const LeaveGameReq& from)
            : ::google::protobuf::Message(),
            _internal_metadata_(NULL),
            _has_bits_(from._has_bits_),
            _cached_size_(0) {
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            userid_ = from.userid_;
            // @@protoc_insertion_point(copy_constructor:game.base.LeaveGameReq)
        }

        void LeaveGameReq::SharedCtor() {
            _cached_size_ = 0;
            userid_ = 0;
        }

        LeaveGameReq::~LeaveGameReq() {
            // @@protoc_insertion_point(destructor:game.base.LeaveGameReq)
            SharedDtor();
        }

        void LeaveGameReq::SharedDtor() {}

        void LeaveGameReq::SetCachedSize(int size) const {
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
        }
        const ::google::protobuf::Descriptor* LeaveGameReq::descriptor() {
            ::protobuf_game_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
            return ::protobuf_game_5fbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
        }

        const LeaveGameReq& LeaveGameReq::default_instance() {
            ::protobuf_game_5fbase_2eproto::InitDefaultsLeaveGameReq();
            return *internal_default_instance();
        }

        LeaveGameReq* LeaveGameReq::New(::google::protobuf::Arena* arena) const {
            LeaveGameReq* n = new LeaveGameReq;
            if (arena != NULL) {
                arena->Own(n);
            }
            return n;
        }

        void LeaveGameReq::Clear() {
            // @@protoc_insertion_point(message_clear_start:game.base.LeaveGameReq)
            ::google::protobuf::uint32 cached_has_bits = 0;
            // Prevent compiler warnings about cached_has_bits being unused
            (void) cached_has_bits;

            userid_ = 0;
            _has_bits_.Clear();
            _internal_metadata_.Clear();
        }

        bool LeaveGameReq::MergePartialFromCodedStream(
            ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
            ::google::protobuf::uint32 tag;
            // @@protoc_insertion_point(parse_start:game.base.LeaveGameReq)
            for (;;) {
                ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
                tag = p.first;
                if (!p.second) goto handle_unusual;
                switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
                    // optional int32 userid = 1;
                    case 1: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
                            set_has_userid();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &userid_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                    default: {
handle_unusual:
                        if (tag == 0) {
                            goto success;
                        }
                        DO_(::google::protobuf::internal::WireFormat::SkipField(
                            input, tag, _internal_metadata_.mutable_unknown_fields()));
                        break;
                    }
                }
            }
success:
            // @@protoc_insertion_point(parse_success:game.base.LeaveGameReq)
            return true;
failure:
            // @@protoc_insertion_point(parse_failure:game.base.LeaveGameReq)
            return false;
#undef DO_
        }

        void LeaveGameReq::SerializeWithCachedSizes(
            ::google::protobuf::io::CodedOutputStream* output) const {
            // @@protoc_insertion_point(serialize_start:game.base.LeaveGameReq)
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            // optional int32 userid = 1;
            if (cached_has_bits & 0x00000001u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
                    _internal_metadata_.unknown_fields(), output);
            }
            // @@protoc_insertion_point(serialize_end:game.base.LeaveGameReq)
        }

        ::google::protobuf::uint8* LeaveGameReq::InternalSerializeWithCachedSizesToArray(
            bool deterministic, ::google::protobuf::uint8* target) const {
            (void) deterministic; // Unused
            // @@protoc_insertion_point(serialize_to_array_start:game.base.LeaveGameReq)
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            // optional int32 userid = 1;
            if (cached_has_bits & 0x00000001u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                    _internal_metadata_.unknown_fields(), target);
            }
            // @@protoc_insertion_point(serialize_to_array_end:game.base.LeaveGameReq)
            return target;
        }

        size_t LeaveGameReq::ByteSizeLong() const {
            // @@protoc_insertion_point(message_byte_size_start:game.base.LeaveGameReq)
            size_t total_size = 0;

            if (_internal_metadata_.have_unknown_fields()) {
                total_size +=
                    ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
                    _internal_metadata_.unknown_fields());
            }
            // optional int32 userid = 1;
            if (has_userid()) {
                total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::Int32Size(
                    this->userid());
            }

            int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = cached_size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
            return total_size;
        }

        void LeaveGameReq::MergeFrom(const ::google::protobuf::Message& from) {
            // @@protoc_insertion_point(generalized_merge_from_start:game.base.LeaveGameReq)
            GOOGLE_DCHECK_NE(&from, this);
            const LeaveGameReq* source =
                ::google::protobuf::internal::DynamicCastToGenerated<const LeaveGameReq>(
                &from);
            if (source == NULL) {
                // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.base.LeaveGameReq)
                ::google::protobuf::internal::ReflectionOps::Merge(from, this);
            } else {
                // @@protoc_insertion_point(generalized_merge_from_cast_success:game.base.LeaveGameReq)
                MergeFrom(*source);
            }
        }

        void LeaveGameReq::MergeFrom(const LeaveGameReq& from) {
            // @@protoc_insertion_point(class_specific_merge_from_start:game.base.LeaveGameReq)
            GOOGLE_DCHECK_NE(&from, this);
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            if (from.has_userid()) {
                set_userid(from.userid());
            }
        }

        void LeaveGameReq::CopyFrom(const ::google::protobuf::Message& from) {
            // @@protoc_insertion_point(generalized_copy_from_start:game.base.LeaveGameReq)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        void LeaveGameReq::CopyFrom(const LeaveGameReq& from) {
            // @@protoc_insertion_point(class_specific_copy_from_start:game.base.LeaveGameReq)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        bool LeaveGameReq::IsInitialized() const {
            return true;
        }

        void LeaveGameReq::Swap(LeaveGameReq* other) {
            if (other == this) return;
            InternalSwap(other);
        }
        void LeaveGameReq::InternalSwap(LeaveGameReq* other) {
            using std::swap;
            swap(userid_, other->userid_);
            swap(_has_bits_[0], other->_has_bits_[0]);
            _internal_metadata_.Swap(&other->_internal_metadata_);
            swap(_cached_size_, other->_cached_size_);
        }

        ::google::protobuf::Metadata LeaveGameReq::GetMetadata() const {
            protobuf_game_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
            return ::protobuf_game_5fbase_2eproto::file_level_metadata[kIndexInFileMessages];
        }


        // ===================================================================

        void LeaveGameResp::InitAsDefaultInstance() {}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
        const int LeaveGameResp::kCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

        LeaveGameResp::LeaveGameResp()
            : ::google::protobuf::Message(), _internal_metadata_(NULL) {
            if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
                ::protobuf_game_5fbase_2eproto::InitDefaultsLeaveGameResp();
            }
            SharedCtor();
            // @@protoc_insertion_point(constructor:game.base.LeaveGameResp)
        }
        LeaveGameResp::LeaveGameResp(const LeaveGameResp& from)
            : ::google::protobuf::Message(),
            _internal_metadata_(NULL),
            _has_bits_(from._has_bits_),
            _cached_size_(0) {
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            code_ = from.code_;
            // @@protoc_insertion_point(copy_constructor:game.base.LeaveGameResp)
        }

        void LeaveGameResp::SharedCtor() {
            _cached_size_ = 0;
            code_ = 0;
        }

        LeaveGameResp::~LeaveGameResp() {
            // @@protoc_insertion_point(destructor:game.base.LeaveGameResp)
            SharedDtor();
        }

        void LeaveGameResp::SharedDtor() {}

        void LeaveGameResp::SetCachedSize(int size) const {
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
        }
        const ::google::protobuf::Descriptor* LeaveGameResp::descriptor() {
            ::protobuf_game_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
            return ::protobuf_game_5fbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
        }

        const LeaveGameResp& LeaveGameResp::default_instance() {
            ::protobuf_game_5fbase_2eproto::InitDefaultsLeaveGameResp();
            return *internal_default_instance();
        }

        LeaveGameResp* LeaveGameResp::New(::google::protobuf::Arena* arena) const {
            LeaveGameResp* n = new LeaveGameResp;
            if (arena != NULL) {
                arena->Own(n);
            }
            return n;
        }

        void LeaveGameResp::Clear() {
            // @@protoc_insertion_point(message_clear_start:game.base.LeaveGameResp)
            ::google::protobuf::uint32 cached_has_bits = 0;
            // Prevent compiler warnings about cached_has_bits being unused
            (void) cached_has_bits;

            code_ = 0;
            _has_bits_.Clear();
            _internal_metadata_.Clear();
        }

        bool LeaveGameResp::MergePartialFromCodedStream(
            ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
            ::google::protobuf::uint32 tag;
            // @@protoc_insertion_point(parse_start:game.base.LeaveGameResp)
            for (;;) {
                ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
                tag = p.first;
                if (!p.second) goto handle_unusual;
                switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
                    // optional int32 code = 1;
                    case 1: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
                            set_has_code();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &code_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                    default: {
handle_unusual:
                        if (tag == 0) {
                            goto success;
                        }
                        DO_(::google::protobuf::internal::WireFormat::SkipField(
                            input, tag, _internal_metadata_.mutable_unknown_fields()));
                        break;
                    }
                }
            }
success:
            // @@protoc_insertion_point(parse_success:game.base.LeaveGameResp)
            return true;
failure:
            // @@protoc_insertion_point(parse_failure:game.base.LeaveGameResp)
            return false;
#undef DO_
        }

        void LeaveGameResp::SerializeWithCachedSizes(
            ::google::protobuf::io::CodedOutputStream* output) const {
            // @@protoc_insertion_point(serialize_start:game.base.LeaveGameResp)
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            // optional int32 code = 1;
            if (cached_has_bits & 0x00000001u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
                    _internal_metadata_.unknown_fields(), output);
            }
            // @@protoc_insertion_point(serialize_end:game.base.LeaveGameResp)
        }

        ::google::protobuf::uint8* LeaveGameResp::InternalSerializeWithCachedSizesToArray(
            bool deterministic, ::google::protobuf::uint8* target) const {
            (void) deterministic; // Unused
            // @@protoc_insertion_point(serialize_to_array_start:game.base.LeaveGameResp)
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            // optional int32 code = 1;
            if (cached_has_bits & 0x00000001u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                    _internal_metadata_.unknown_fields(), target);
            }
            // @@protoc_insertion_point(serialize_to_array_end:game.base.LeaveGameResp)
            return target;
        }

        size_t LeaveGameResp::ByteSizeLong() const {
            // @@protoc_insertion_point(message_byte_size_start:game.base.LeaveGameResp)
            size_t total_size = 0;

            if (_internal_metadata_.have_unknown_fields()) {
                total_size +=
                    ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
                    _internal_metadata_.unknown_fields());
            }
            // optional int32 code = 1;
            if (has_code()) {
                total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::Int32Size(
                    this->code());
            }

            int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = cached_size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
            return total_size;
        }

        void LeaveGameResp::MergeFrom(const ::google::protobuf::Message& from) {
            // @@protoc_insertion_point(generalized_merge_from_start:game.base.LeaveGameResp)
            GOOGLE_DCHECK_NE(&from, this);
            const LeaveGameResp* source =
                ::google::protobuf::internal::DynamicCastToGenerated<const LeaveGameResp>(
                &from);
            if (source == NULL) {
                // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.base.LeaveGameResp)
                ::google::protobuf::internal::ReflectionOps::Merge(from, this);
            } else {
                // @@protoc_insertion_point(generalized_merge_from_cast_success:game.base.LeaveGameResp)
                MergeFrom(*source);
            }
        }

        void LeaveGameResp::MergeFrom(const LeaveGameResp& from) {
            // @@protoc_insertion_point(class_specific_merge_from_start:game.base.LeaveGameResp)
            GOOGLE_DCHECK_NE(&from, this);
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            if (from.has_code()) {
                set_code(from.code());
            }
        }

        void LeaveGameResp::CopyFrom(const ::google::protobuf::Message& from) {
            // @@protoc_insertion_point(generalized_copy_from_start:game.base.LeaveGameResp)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        void LeaveGameResp::CopyFrom(const LeaveGameResp& from) {
            // @@protoc_insertion_point(class_specific_copy_from_start:game.base.LeaveGameResp)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        bool LeaveGameResp::IsInitialized() const {
            return true;
        }

        void LeaveGameResp::Swap(LeaveGameResp* other) {
            if (other == this) return;
            InternalSwap(other);
        }
        void LeaveGameResp::InternalSwap(LeaveGameResp* other) {
            using std::swap;
            swap(code_, other->code_);
            swap(_has_bits_[0], other->_has_bits_[0]);
            _internal_metadata_.Swap(&other->_internal_metadata_);
            swap(_cached_size_, other->_cached_size_);
        }

        ::google::protobuf::Metadata LeaveGameResp::GetMetadata() const {
            protobuf_game_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
            return ::protobuf_game_5fbase_2eproto::file_level_metadata[kIndexInFileMessages];
        }


        // ===================================================================

        void GiveUpReq::InitAsDefaultInstance() {}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
        const int GiveUpReq::kUseridFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

        GiveUpReq::GiveUpReq()
            : ::google::protobuf::Message(), _internal_metadata_(NULL) {
            if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
                ::protobuf_game_5fbase_2eproto::InitDefaultsGiveUpReq();
            }
            SharedCtor();
            // @@protoc_insertion_point(constructor:game.base.GiveUpReq)
        }
        GiveUpReq::GiveUpReq(const GiveUpReq& from)
            : ::google::protobuf::Message(),
            _internal_metadata_(NULL),
            _has_bits_(from._has_bits_),
            _cached_size_(0) {
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            userid_ = from.userid_;
            // @@protoc_insertion_point(copy_constructor:game.base.GiveUpReq)
        }

        void GiveUpReq::SharedCtor() {
            _cached_size_ = 0;
            userid_ = 0;
        }

        GiveUpReq::~GiveUpReq() {
            // @@protoc_insertion_point(destructor:game.base.GiveUpReq)
            SharedDtor();
        }

        void GiveUpReq::SharedDtor() {}

        void GiveUpReq::SetCachedSize(int size) const {
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
        }
        const ::google::protobuf::Descriptor* GiveUpReq::descriptor() {
            ::protobuf_game_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
            return ::protobuf_game_5fbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
        }

        const GiveUpReq& GiveUpReq::default_instance() {
            ::protobuf_game_5fbase_2eproto::InitDefaultsGiveUpReq();
            return *internal_default_instance();
        }

        GiveUpReq* GiveUpReq::New(::google::protobuf::Arena* arena) const {
            GiveUpReq* n = new GiveUpReq;
            if (arena != NULL) {
                arena->Own(n);
            }
            return n;
        }

        void GiveUpReq::Clear() {
            // @@protoc_insertion_point(message_clear_start:game.base.GiveUpReq)
            ::google::protobuf::uint32 cached_has_bits = 0;
            // Prevent compiler warnings about cached_has_bits being unused
            (void) cached_has_bits;

            userid_ = 0;
            _has_bits_.Clear();
            _internal_metadata_.Clear();
        }

        bool GiveUpReq::MergePartialFromCodedStream(
            ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
            ::google::protobuf::uint32 tag;
            // @@protoc_insertion_point(parse_start:game.base.GiveUpReq)
            for (;;) {
                ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
                tag = p.first;
                if (!p.second) goto handle_unusual;
                switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
                    // optional int32 userid = 1;
                    case 1: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
                            set_has_userid();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &userid_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                    default: {
handle_unusual:
                        if (tag == 0) {
                            goto success;
                        }
                        DO_(::google::protobuf::internal::WireFormat::SkipField(
                            input, tag, _internal_metadata_.mutable_unknown_fields()));
                        break;
                    }
                }
            }
success:
            // @@protoc_insertion_point(parse_success:game.base.GiveUpReq)
            return true;
failure:
            // @@protoc_insertion_point(parse_failure:game.base.GiveUpReq)
            return false;
#undef DO_
        }

        void GiveUpReq::SerializeWithCachedSizes(
            ::google::protobuf::io::CodedOutputStream* output) const {
            // @@protoc_insertion_point(serialize_start:game.base.GiveUpReq)
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            // optional int32 userid = 1;
            if (cached_has_bits & 0x00000001u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
                    _internal_metadata_.unknown_fields(), output);
            }
            // @@protoc_insertion_point(serialize_end:game.base.GiveUpReq)
        }

        ::google::protobuf::uint8* GiveUpReq::InternalSerializeWithCachedSizesToArray(
            bool deterministic, ::google::protobuf::uint8* target) const {
            (void) deterministic; // Unused
            // @@protoc_insertion_point(serialize_to_array_start:game.base.GiveUpReq)
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            // optional int32 userid = 1;
            if (cached_has_bits & 0x00000001u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                    _internal_metadata_.unknown_fields(), target);
            }
            // @@protoc_insertion_point(serialize_to_array_end:game.base.GiveUpReq)
            return target;
        }

        size_t GiveUpReq::ByteSizeLong() const {
            // @@protoc_insertion_point(message_byte_size_start:game.base.GiveUpReq)
            size_t total_size = 0;

            if (_internal_metadata_.have_unknown_fields()) {
                total_size +=
                    ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
                    _internal_metadata_.unknown_fields());
            }
            // optional int32 userid = 1;
            if (has_userid()) {
                total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::Int32Size(
                    this->userid());
            }

            int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = cached_size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
            return total_size;
        }

        void GiveUpReq::MergeFrom(const ::google::protobuf::Message& from) {
            // @@protoc_insertion_point(generalized_merge_from_start:game.base.GiveUpReq)
            GOOGLE_DCHECK_NE(&from, this);
            const GiveUpReq* source =
                ::google::protobuf::internal::DynamicCastToGenerated<const GiveUpReq>(
                &from);
            if (source == NULL) {
                // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.base.GiveUpReq)
                ::google::protobuf::internal::ReflectionOps::Merge(from, this);
            } else {
                // @@protoc_insertion_point(generalized_merge_from_cast_success:game.base.GiveUpReq)
                MergeFrom(*source);
            }
        }

        void GiveUpReq::MergeFrom(const GiveUpReq& from) {
            // @@protoc_insertion_point(class_specific_merge_from_start:game.base.GiveUpReq)
            GOOGLE_DCHECK_NE(&from, this);
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            if (from.has_userid()) {
                set_userid(from.userid());
            }
        }

        void GiveUpReq::CopyFrom(const ::google::protobuf::Message& from) {
            // @@protoc_insertion_point(generalized_copy_from_start:game.base.GiveUpReq)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        void GiveUpReq::CopyFrom(const GiveUpReq& from) {
            // @@protoc_insertion_point(class_specific_copy_from_start:game.base.GiveUpReq)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        bool GiveUpReq::IsInitialized() const {
            return true;
        }

        void GiveUpReq::Swap(GiveUpReq* other) {
            if (other == this) return;
            InternalSwap(other);
        }
        void GiveUpReq::InternalSwap(GiveUpReq* other) {
            using std::swap;
            swap(userid_, other->userid_);
            swap(_has_bits_[0], other->_has_bits_[0]);
            _internal_metadata_.Swap(&other->_internal_metadata_);
            swap(_cached_size_, other->_cached_size_);
        }

        ::google::protobuf::Metadata GiveUpReq::GetMetadata() const {
            protobuf_game_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
            return ::protobuf_game_5fbase_2eproto::file_level_metadata[kIndexInFileMessages];
        }


        // ===================================================================

        void GiveUpResp::InitAsDefaultInstance() {}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
        const int GiveUpResp::kCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

        GiveUpResp::GiveUpResp()
            : ::google::protobuf::Message(), _internal_metadata_(NULL) {
            if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
                ::protobuf_game_5fbase_2eproto::InitDefaultsGiveUpResp();
            }
            SharedCtor();
            // @@protoc_insertion_point(constructor:game.base.GiveUpResp)
        }
        GiveUpResp::GiveUpResp(const GiveUpResp& from)
            : ::google::protobuf::Message(),
            _internal_metadata_(NULL),
            _has_bits_(from._has_bits_),
            _cached_size_(0) {
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            code_ = from.code_;
            // @@protoc_insertion_point(copy_constructor:game.base.GiveUpResp)
        }

        void GiveUpResp::SharedCtor() {
            _cached_size_ = 0;
            code_ = 0;
        }

        GiveUpResp::~GiveUpResp() {
            // @@protoc_insertion_point(destructor:game.base.GiveUpResp)
            SharedDtor();
        }

        void GiveUpResp::SharedDtor() {}

        void GiveUpResp::SetCachedSize(int size) const {
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
        }
        const ::google::protobuf::Descriptor* GiveUpResp::descriptor() {
            ::protobuf_game_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
            return ::protobuf_game_5fbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
        }

        const GiveUpResp& GiveUpResp::default_instance() {
            ::protobuf_game_5fbase_2eproto::InitDefaultsGiveUpResp();
            return *internal_default_instance();
        }

        GiveUpResp* GiveUpResp::New(::google::protobuf::Arena* arena) const {
            GiveUpResp* n = new GiveUpResp;
            if (arena != NULL) {
                arena->Own(n);
            }
            return n;
        }

        void GiveUpResp::Clear() {
            // @@protoc_insertion_point(message_clear_start:game.base.GiveUpResp)
            ::google::protobuf::uint32 cached_has_bits = 0;
            // Prevent compiler warnings about cached_has_bits being unused
            (void) cached_has_bits;

            code_ = 0;
            _has_bits_.Clear();
            _internal_metadata_.Clear();
        }

        bool GiveUpResp::MergePartialFromCodedStream(
            ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
            ::google::protobuf::uint32 tag;
            // @@protoc_insertion_point(parse_start:game.base.GiveUpResp)
            for (;;) {
                ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
                tag = p.first;
                if (!p.second) goto handle_unusual;
                switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
                    // optional int32 code = 1;
                    case 1: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
                            set_has_code();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &code_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                    default: {
handle_unusual:
                        if (tag == 0) {
                            goto success;
                        }
                        DO_(::google::protobuf::internal::WireFormat::SkipField(
                            input, tag, _internal_metadata_.mutable_unknown_fields()));
                        break;
                    }
                }
            }
success:
            // @@protoc_insertion_point(parse_success:game.base.GiveUpResp)
            return true;
failure:
            // @@protoc_insertion_point(parse_failure:game.base.GiveUpResp)
            return false;
#undef DO_
        }

        void GiveUpResp::SerializeWithCachedSizes(
            ::google::protobuf::io::CodedOutputStream* output) const {
            // @@protoc_insertion_point(serialize_start:game.base.GiveUpResp)
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            // optional int32 code = 1;
            if (cached_has_bits & 0x00000001u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
                    _internal_metadata_.unknown_fields(), output);
            }
            // @@protoc_insertion_point(serialize_end:game.base.GiveUpResp)
        }

        ::google::protobuf::uint8* GiveUpResp::InternalSerializeWithCachedSizesToArray(
            bool deterministic, ::google::protobuf::uint8* target) const {
            (void) deterministic; // Unused
            // @@protoc_insertion_point(serialize_to_array_start:game.base.GiveUpResp)
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            // optional int32 code = 1;
            if (cached_has_bits & 0x00000001u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                    _internal_metadata_.unknown_fields(), target);
            }
            // @@protoc_insertion_point(serialize_to_array_end:game.base.GiveUpResp)
            return target;
        }

        size_t GiveUpResp::ByteSizeLong() const {
            // @@protoc_insertion_point(message_byte_size_start:game.base.GiveUpResp)
            size_t total_size = 0;

            if (_internal_metadata_.have_unknown_fields()) {
                total_size +=
                    ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
                    _internal_metadata_.unknown_fields());
            }
            // optional int32 code = 1;
            if (has_code()) {
                total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::Int32Size(
                    this->code());
            }

            int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = cached_size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
            return total_size;
        }

        void GiveUpResp::MergeFrom(const ::google::protobuf::Message& from) {
            // @@protoc_insertion_point(generalized_merge_from_start:game.base.GiveUpResp)
            GOOGLE_DCHECK_NE(&from, this);
            const GiveUpResp* source =
                ::google::protobuf::internal::DynamicCastToGenerated<const GiveUpResp>(
                &from);
            if (source == NULL) {
                // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.base.GiveUpResp)
                ::google::protobuf::internal::ReflectionOps::Merge(from, this);
            } else {
                // @@protoc_insertion_point(generalized_merge_from_cast_success:game.base.GiveUpResp)
                MergeFrom(*source);
            }
        }

        void GiveUpResp::MergeFrom(const GiveUpResp& from) {
            // @@protoc_insertion_point(class_specific_merge_from_start:game.base.GiveUpResp)
            GOOGLE_DCHECK_NE(&from, this);
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            if (from.has_code()) {
                set_code(from.code());
            }
        }

        void GiveUpResp::CopyFrom(const ::google::protobuf::Message& from) {
            // @@protoc_insertion_point(generalized_copy_from_start:game.base.GiveUpResp)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        void GiveUpResp::CopyFrom(const GiveUpResp& from) {
            // @@protoc_insertion_point(class_specific_copy_from_start:game.base.GiveUpResp)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        bool GiveUpResp::IsInitialized() const {
            return true;
        }

        void GiveUpResp::Swap(GiveUpResp* other) {
            if (other == this) return;
            InternalSwap(other);
        }
        void GiveUpResp::InternalSwap(GiveUpResp* other) {
            using std::swap;
            swap(code_, other->code_);
            swap(_has_bits_[0], other->_has_bits_[0]);
            _internal_metadata_.Swap(&other->_internal_metadata_);
            swap(_cached_size_, other->_cached_size_);
        }

        ::google::protobuf::Metadata GiveUpResp::GetMetadata() const {
            protobuf_game_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
            return ::protobuf_game_5fbase_2eproto::file_level_metadata[kIndexInFileMessages];
        }


        // ===================================================================

        void Looker2PlayerReq::InitAsDefaultInstance() {}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
        const int Looker2PlayerReq::kUseridFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

        Looker2PlayerReq::Looker2PlayerReq()
            : ::google::protobuf::Message(), _internal_metadata_(NULL) {
            if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
                ::protobuf_game_5fbase_2eproto::InitDefaultsLooker2PlayerReq();
            }
            SharedCtor();
            // @@protoc_insertion_point(constructor:game.base.Looker2PlayerReq)
        }
        Looker2PlayerReq::Looker2PlayerReq(const Looker2PlayerReq& from)
            : ::google::protobuf::Message(),
            _internal_metadata_(NULL),
            _has_bits_(from._has_bits_),
            _cached_size_(0) {
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            userid_ = from.userid_;
            // @@protoc_insertion_point(copy_constructor:game.base.Looker2PlayerReq)
        }

        void Looker2PlayerReq::SharedCtor() {
            _cached_size_ = 0;
            userid_ = 0;
        }

        Looker2PlayerReq::~Looker2PlayerReq() {
            // @@protoc_insertion_point(destructor:game.base.Looker2PlayerReq)
            SharedDtor();
        }

        void Looker2PlayerReq::SharedDtor() {}

        void Looker2PlayerReq::SetCachedSize(int size) const {
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
        }
        const ::google::protobuf::Descriptor* Looker2PlayerReq::descriptor() {
            ::protobuf_game_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
            return ::protobuf_game_5fbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
        }

        const Looker2PlayerReq& Looker2PlayerReq::default_instance() {
            ::protobuf_game_5fbase_2eproto::InitDefaultsLooker2PlayerReq();
            return *internal_default_instance();
        }

        Looker2PlayerReq* Looker2PlayerReq::New(::google::protobuf::Arena* arena) const {
            Looker2PlayerReq* n = new Looker2PlayerReq;
            if (arena != NULL) {
                arena->Own(n);
            }
            return n;
        }

        void Looker2PlayerReq::Clear() {
            // @@protoc_insertion_point(message_clear_start:game.base.Looker2PlayerReq)
            ::google::protobuf::uint32 cached_has_bits = 0;
            // Prevent compiler warnings about cached_has_bits being unused
            (void) cached_has_bits;

            userid_ = 0;
            _has_bits_.Clear();
            _internal_metadata_.Clear();
        }

        bool Looker2PlayerReq::MergePartialFromCodedStream(
            ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
            ::google::protobuf::uint32 tag;
            // @@protoc_insertion_point(parse_start:game.base.Looker2PlayerReq)
            for (;;) {
                ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
                tag = p.first;
                if (!p.second) goto handle_unusual;
                switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
                    // optional int32 userid = 1;
                    case 1: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
                            set_has_userid();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &userid_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                    default: {
handle_unusual:
                        if (tag == 0) {
                            goto success;
                        }
                        DO_(::google::protobuf::internal::WireFormat::SkipField(
                            input, tag, _internal_metadata_.mutable_unknown_fields()));
                        break;
                    }
                }
            }
success:
            // @@protoc_insertion_point(parse_success:game.base.Looker2PlayerReq)
            return true;
failure:
            // @@protoc_insertion_point(parse_failure:game.base.Looker2PlayerReq)
            return false;
#undef DO_
        }

        void Looker2PlayerReq::SerializeWithCachedSizes(
            ::google::protobuf::io::CodedOutputStream* output) const {
            // @@protoc_insertion_point(serialize_start:game.base.Looker2PlayerReq)
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            // optional int32 userid = 1;
            if (cached_has_bits & 0x00000001u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
                    _internal_metadata_.unknown_fields(), output);
            }
            // @@protoc_insertion_point(serialize_end:game.base.Looker2PlayerReq)
        }

        ::google::protobuf::uint8* Looker2PlayerReq::InternalSerializeWithCachedSizesToArray(
            bool deterministic, ::google::protobuf::uint8* target) const {
            (void) deterministic; // Unused
            // @@protoc_insertion_point(serialize_to_array_start:game.base.Looker2PlayerReq)
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            // optional int32 userid = 1;
            if (cached_has_bits & 0x00000001u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                    _internal_metadata_.unknown_fields(), target);
            }
            // @@protoc_insertion_point(serialize_to_array_end:game.base.Looker2PlayerReq)
            return target;
        }

        size_t Looker2PlayerReq::ByteSizeLong() const {
            // @@protoc_insertion_point(message_byte_size_start:game.base.Looker2PlayerReq)
            size_t total_size = 0;

            if (_internal_metadata_.have_unknown_fields()) {
                total_size +=
                    ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
                    _internal_metadata_.unknown_fields());
            }
            // optional int32 userid = 1;
            if (has_userid()) {
                total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::Int32Size(
                    this->userid());
            }

            int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = cached_size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
            return total_size;
        }

        void Looker2PlayerReq::MergeFrom(const ::google::protobuf::Message& from) {
            // @@protoc_insertion_point(generalized_merge_from_start:game.base.Looker2PlayerReq)
            GOOGLE_DCHECK_NE(&from, this);
            const Looker2PlayerReq* source =
                ::google::protobuf::internal::DynamicCastToGenerated<const Looker2PlayerReq>(
                &from);
            if (source == NULL) {
                // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.base.Looker2PlayerReq)
                ::google::protobuf::internal::ReflectionOps::Merge(from, this);
            } else {
                // @@protoc_insertion_point(generalized_merge_from_cast_success:game.base.Looker2PlayerReq)
                MergeFrom(*source);
            }
        }

        void Looker2PlayerReq::MergeFrom(const Looker2PlayerReq& from) {
            // @@protoc_insertion_point(class_specific_merge_from_start:game.base.Looker2PlayerReq)
            GOOGLE_DCHECK_NE(&from, this);
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            if (from.has_userid()) {
                set_userid(from.userid());
            }
        }

        void Looker2PlayerReq::CopyFrom(const ::google::protobuf::Message& from) {
            // @@protoc_insertion_point(generalized_copy_from_start:game.base.Looker2PlayerReq)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        void Looker2PlayerReq::CopyFrom(const Looker2PlayerReq& from) {
            // @@protoc_insertion_point(class_specific_copy_from_start:game.base.Looker2PlayerReq)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        bool Looker2PlayerReq::IsInitialized() const {
            return true;
        }

        void Looker2PlayerReq::Swap(Looker2PlayerReq* other) {
            if (other == this) return;
            InternalSwap(other);
        }
        void Looker2PlayerReq::InternalSwap(Looker2PlayerReq* other) {
            using std::swap;
            swap(userid_, other->userid_);
            swap(_has_bits_[0], other->_has_bits_[0]);
            _internal_metadata_.Swap(&other->_internal_metadata_);
            swap(_cached_size_, other->_cached_size_);
        }

        ::google::protobuf::Metadata Looker2PlayerReq::GetMetadata() const {
            protobuf_game_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
            return ::protobuf_game_5fbase_2eproto::file_level_metadata[kIndexInFileMessages];
        }


        // ===================================================================

        void Looker2PlayerResp::InitAsDefaultInstance() {}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
        const int Looker2PlayerResp::kCodeFieldNumber;
        const int Looker2PlayerResp::kChairnoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

        Looker2PlayerResp::Looker2PlayerResp()
            : ::google::protobuf::Message(), _internal_metadata_(NULL) {
            if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
                ::protobuf_game_5fbase_2eproto::InitDefaultsLooker2PlayerResp();
            }
            SharedCtor();
            // @@protoc_insertion_point(constructor:game.base.Looker2PlayerResp)
        }
        Looker2PlayerResp::Looker2PlayerResp(const Looker2PlayerResp& from)
            : ::google::protobuf::Message(),
            _internal_metadata_(NULL),
            _has_bits_(from._has_bits_),
            _cached_size_(0) {
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            ::memcpy(&code_, &from.code_,
                     static_cast<size_t>(reinterpret_cast<char*>(&chairno_) -
                     reinterpret_cast<char*>(&code_)) + sizeof(chairno_));
            // @@protoc_insertion_point(copy_constructor:game.base.Looker2PlayerResp)
        }

        void Looker2PlayerResp::SharedCtor() {
            _cached_size_ = 0;
            ::memset(&code_, 0, static_cast<size_t>(
                reinterpret_cast<char*>(&chairno_) -
                reinterpret_cast<char*>(&code_)) + sizeof(chairno_));
        }

        Looker2PlayerResp::~Looker2PlayerResp() {
            // @@protoc_insertion_point(destructor:game.base.Looker2PlayerResp)
            SharedDtor();
        }

        void Looker2PlayerResp::SharedDtor() {}

        void Looker2PlayerResp::SetCachedSize(int size) const {
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
        }
        const ::google::protobuf::Descriptor* Looker2PlayerResp::descriptor() {
            ::protobuf_game_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
            return ::protobuf_game_5fbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
        }

        const Looker2PlayerResp& Looker2PlayerResp::default_instance() {
            ::protobuf_game_5fbase_2eproto::InitDefaultsLooker2PlayerResp();
            return *internal_default_instance();
        }

        Looker2PlayerResp* Looker2PlayerResp::New(::google::protobuf::Arena* arena) const {
            Looker2PlayerResp* n = new Looker2PlayerResp;
            if (arena != NULL) {
                arena->Own(n);
            }
            return n;
        }

        void Looker2PlayerResp::Clear() {
            // @@protoc_insertion_point(message_clear_start:game.base.Looker2PlayerResp)
            ::google::protobuf::uint32 cached_has_bits = 0;
            // Prevent compiler warnings about cached_has_bits being unused
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            if (cached_has_bits & 3u) {
                ::memset(&code_, 0, static_cast<size_t>(
                    reinterpret_cast<char*>(&chairno_) -
                    reinterpret_cast<char*>(&code_)) + sizeof(chairno_));
            }
            _has_bits_.Clear();
            _internal_metadata_.Clear();
        }

        bool Looker2PlayerResp::MergePartialFromCodedStream(
            ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
            ::google::protobuf::uint32 tag;
            // @@protoc_insertion_point(parse_start:game.base.Looker2PlayerResp)
            for (;;) {
                ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
                tag = p.first;
                if (!p.second) goto handle_unusual;
                switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
                    // optional int32 code = 1;
                    case 1: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
                            set_has_code();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &code_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // optional int32 chairno = 2;
                    case 2: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
                            set_has_chairno();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &chairno_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                    default: {
handle_unusual:
                        if (tag == 0) {
                            goto success;
                        }
                        DO_(::google::protobuf::internal::WireFormat::SkipField(
                            input, tag, _internal_metadata_.mutable_unknown_fields()));
                        break;
                    }
                }
            }
success:
            // @@protoc_insertion_point(parse_success:game.base.Looker2PlayerResp)
            return true;
failure:
            // @@protoc_insertion_point(parse_failure:game.base.Looker2PlayerResp)
            return false;
#undef DO_
        }

        void Looker2PlayerResp::SerializeWithCachedSizes(
            ::google::protobuf::io::CodedOutputStream* output) const {
            // @@protoc_insertion_point(serialize_start:game.base.Looker2PlayerResp)
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            // optional int32 code = 1;
            if (cached_has_bits & 0x00000001u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
            }

            // optional int32 chairno = 2;
            if (cached_has_bits & 0x00000002u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->chairno(), output);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
                    _internal_metadata_.unknown_fields(), output);
            }
            // @@protoc_insertion_point(serialize_end:game.base.Looker2PlayerResp)
        }

        ::google::protobuf::uint8* Looker2PlayerResp::InternalSerializeWithCachedSizesToArray(
            bool deterministic, ::google::protobuf::uint8* target) const {
            (void) deterministic; // Unused
            // @@protoc_insertion_point(serialize_to_array_start:game.base.Looker2PlayerResp)
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            // optional int32 code = 1;
            if (cached_has_bits & 0x00000001u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
            }

            // optional int32 chairno = 2;
            if (cached_has_bits & 0x00000002u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->chairno(), target);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                    _internal_metadata_.unknown_fields(), target);
            }
            // @@protoc_insertion_point(serialize_to_array_end:game.base.Looker2PlayerResp)
            return target;
        }

        size_t Looker2PlayerResp::ByteSizeLong() const {
            // @@protoc_insertion_point(message_byte_size_start:game.base.Looker2PlayerResp)
            size_t total_size = 0;

            if (_internal_metadata_.have_unknown_fields()) {
                total_size +=
                    ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
                    _internal_metadata_.unknown_fields());
            }
            if (_has_bits_[0 / 32] & 3u) {
                // optional int32 code = 1;
                if (has_code()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::Int32Size(
                        this->code());
                }

                // optional int32 chairno = 2;
                if (has_chairno()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::Int32Size(
                        this->chairno());
                }

            }
            int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = cached_size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
            return total_size;
        }

        void Looker2PlayerResp::MergeFrom(const ::google::protobuf::Message& from) {
            // @@protoc_insertion_point(generalized_merge_from_start:game.base.Looker2PlayerResp)
            GOOGLE_DCHECK_NE(&from, this);
            const Looker2PlayerResp* source =
                ::google::protobuf::internal::DynamicCastToGenerated<const Looker2PlayerResp>(
                &from);
            if (source == NULL) {
                // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.base.Looker2PlayerResp)
                ::google::protobuf::internal::ReflectionOps::Merge(from, this);
            } else {
                // @@protoc_insertion_point(generalized_merge_from_cast_success:game.base.Looker2PlayerResp)
                MergeFrom(*source);
            }
        }

        void Looker2PlayerResp::MergeFrom(const Looker2PlayerResp& from) {
            // @@protoc_insertion_point(class_specific_merge_from_start:game.base.Looker2PlayerResp)
            GOOGLE_DCHECK_NE(&from, this);
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = from._has_bits_[0];
            if (cached_has_bits & 3u) {
                if (cached_has_bits & 0x00000001u) {
                    code_ = from.code_;
                }
                if (cached_has_bits & 0x00000002u) {
                    chairno_ = from.chairno_;
                }
                _has_bits_[0] |= cached_has_bits;
            }
        }

        void Looker2PlayerResp::CopyFrom(const ::google::protobuf::Message& from) {
            // @@protoc_insertion_point(generalized_copy_from_start:game.base.Looker2PlayerResp)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        void Looker2PlayerResp::CopyFrom(const Looker2PlayerResp& from) {
            // @@protoc_insertion_point(class_specific_copy_from_start:game.base.Looker2PlayerResp)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        bool Looker2PlayerResp::IsInitialized() const {
            return true;
        }

        void Looker2PlayerResp::Swap(Looker2PlayerResp* other) {
            if (other == this) return;
            InternalSwap(other);
        }
        void Looker2PlayerResp::InternalSwap(Looker2PlayerResp* other) {
            using std::swap;
            swap(code_, other->code_);
            swap(chairno_, other->chairno_);
            swap(_has_bits_[0], other->_has_bits_[0]);
            _internal_metadata_.Swap(&other->_internal_metadata_);
            swap(_cached_size_, other->_cached_size_);
        }

        ::google::protobuf::Metadata Looker2PlayerResp::GetMetadata() const {
            protobuf_game_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
            return ::protobuf_game_5fbase_2eproto::file_level_metadata[kIndexInFileMessages];
        }


        // ===================================================================

        void Player2LookerReq::InitAsDefaultInstance() {}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
        const int Player2LookerReq::kUseridFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

        Player2LookerReq::Player2LookerReq()
            : ::google::protobuf::Message(), _internal_metadata_(NULL) {
            if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
                ::protobuf_game_5fbase_2eproto::InitDefaultsPlayer2LookerReq();
            }
            SharedCtor();
            // @@protoc_insertion_point(constructor:game.base.Player2LookerReq)
        }
        Player2LookerReq::Player2LookerReq(const Player2LookerReq& from)
            : ::google::protobuf::Message(),
            _internal_metadata_(NULL),
            _has_bits_(from._has_bits_),
            _cached_size_(0) {
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            userid_ = from.userid_;
            // @@protoc_insertion_point(copy_constructor:game.base.Player2LookerReq)
        }

        void Player2LookerReq::SharedCtor() {
            _cached_size_ = 0;
            userid_ = 0;
        }

        Player2LookerReq::~Player2LookerReq() {
            // @@protoc_insertion_point(destructor:game.base.Player2LookerReq)
            SharedDtor();
        }

        void Player2LookerReq::SharedDtor() {}

        void Player2LookerReq::SetCachedSize(int size) const {
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
        }
        const ::google::protobuf::Descriptor* Player2LookerReq::descriptor() {
            ::protobuf_game_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
            return ::protobuf_game_5fbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
        }

        const Player2LookerReq& Player2LookerReq::default_instance() {
            ::protobuf_game_5fbase_2eproto::InitDefaultsPlayer2LookerReq();
            return *internal_default_instance();
        }

        Player2LookerReq* Player2LookerReq::New(::google::protobuf::Arena* arena) const {
            Player2LookerReq* n = new Player2LookerReq;
            if (arena != NULL) {
                arena->Own(n);
            }
            return n;
        }

        void Player2LookerReq::Clear() {
            // @@protoc_insertion_point(message_clear_start:game.base.Player2LookerReq)
            ::google::protobuf::uint32 cached_has_bits = 0;
            // Prevent compiler warnings about cached_has_bits being unused
            (void) cached_has_bits;

            userid_ = 0;
            _has_bits_.Clear();
            _internal_metadata_.Clear();
        }

        bool Player2LookerReq::MergePartialFromCodedStream(
            ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
            ::google::protobuf::uint32 tag;
            // @@protoc_insertion_point(parse_start:game.base.Player2LookerReq)
            for (;;) {
                ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
                tag = p.first;
                if (!p.second) goto handle_unusual;
                switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
                    // optional int32 userid = 1;
                    case 1: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
                            set_has_userid();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &userid_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                    default: {
handle_unusual:
                        if (tag == 0) {
                            goto success;
                        }
                        DO_(::google::protobuf::internal::WireFormat::SkipField(
                            input, tag, _internal_metadata_.mutable_unknown_fields()));
                        break;
                    }
                }
            }
success:
            // @@protoc_insertion_point(parse_success:game.base.Player2LookerReq)
            return true;
failure:
            // @@protoc_insertion_point(parse_failure:game.base.Player2LookerReq)
            return false;
#undef DO_
        }

        void Player2LookerReq::SerializeWithCachedSizes(
            ::google::protobuf::io::CodedOutputStream* output) const {
            // @@protoc_insertion_point(serialize_start:game.base.Player2LookerReq)
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            // optional int32 userid = 1;
            if (cached_has_bits & 0x00000001u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
                    _internal_metadata_.unknown_fields(), output);
            }
            // @@protoc_insertion_point(serialize_end:game.base.Player2LookerReq)
        }

        ::google::protobuf::uint8* Player2LookerReq::InternalSerializeWithCachedSizesToArray(
            bool deterministic, ::google::protobuf::uint8* target) const {
            (void) deterministic; // Unused
            // @@protoc_insertion_point(serialize_to_array_start:game.base.Player2LookerReq)
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            // optional int32 userid = 1;
            if (cached_has_bits & 0x00000001u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                    _internal_metadata_.unknown_fields(), target);
            }
            // @@protoc_insertion_point(serialize_to_array_end:game.base.Player2LookerReq)
            return target;
        }

        size_t Player2LookerReq::ByteSizeLong() const {
            // @@protoc_insertion_point(message_byte_size_start:game.base.Player2LookerReq)
            size_t total_size = 0;

            if (_internal_metadata_.have_unknown_fields()) {
                total_size +=
                    ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
                    _internal_metadata_.unknown_fields());
            }
            // optional int32 userid = 1;
            if (has_userid()) {
                total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::Int32Size(
                    this->userid());
            }

            int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = cached_size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
            return total_size;
        }

        void Player2LookerReq::MergeFrom(const ::google::protobuf::Message& from) {
            // @@protoc_insertion_point(generalized_merge_from_start:game.base.Player2LookerReq)
            GOOGLE_DCHECK_NE(&from, this);
            const Player2LookerReq* source =
                ::google::protobuf::internal::DynamicCastToGenerated<const Player2LookerReq>(
                &from);
            if (source == NULL) {
                // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.base.Player2LookerReq)
                ::google::protobuf::internal::ReflectionOps::Merge(from, this);
            } else {
                // @@protoc_insertion_point(generalized_merge_from_cast_success:game.base.Player2LookerReq)
                MergeFrom(*source);
            }
        }

        void Player2LookerReq::MergeFrom(const Player2LookerReq& from) {
            // @@protoc_insertion_point(class_specific_merge_from_start:game.base.Player2LookerReq)
            GOOGLE_DCHECK_NE(&from, this);
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            if (from.has_userid()) {
                set_userid(from.userid());
            }
        }

        void Player2LookerReq::CopyFrom(const ::google::protobuf::Message& from) {
            // @@protoc_insertion_point(generalized_copy_from_start:game.base.Player2LookerReq)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        void Player2LookerReq::CopyFrom(const Player2LookerReq& from) {
            // @@protoc_insertion_point(class_specific_copy_from_start:game.base.Player2LookerReq)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        bool Player2LookerReq::IsInitialized() const {
            return true;
        }

        void Player2LookerReq::Swap(Player2LookerReq* other) {
            if (other == this) return;
            InternalSwap(other);
        }
        void Player2LookerReq::InternalSwap(Player2LookerReq* other) {
            using std::swap;
            swap(userid_, other->userid_);
            swap(_has_bits_[0], other->_has_bits_[0]);
            _internal_metadata_.Swap(&other->_internal_metadata_);
            swap(_cached_size_, other->_cached_size_);
        }

        ::google::protobuf::Metadata Player2LookerReq::GetMetadata() const {
            protobuf_game_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
            return ::protobuf_game_5fbase_2eproto::file_level_metadata[kIndexInFileMessages];
        }


        // ===================================================================

        void Player2LookerResp::InitAsDefaultInstance() {}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
        const int Player2LookerResp::kCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

        Player2LookerResp::Player2LookerResp()
            : ::google::protobuf::Message(), _internal_metadata_(NULL) {
            if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
                ::protobuf_game_5fbase_2eproto::InitDefaultsPlayer2LookerResp();
            }
            SharedCtor();
            // @@protoc_insertion_point(constructor:game.base.Player2LookerResp)
        }
        Player2LookerResp::Player2LookerResp(const Player2LookerResp& from)
            : ::google::protobuf::Message(),
            _internal_metadata_(NULL),
            _has_bits_(from._has_bits_),
            _cached_size_(0) {
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            code_ = from.code_;
            // @@protoc_insertion_point(copy_constructor:game.base.Player2LookerResp)
        }

        void Player2LookerResp::SharedCtor() {
            _cached_size_ = 0;
            code_ = 0;
        }

        Player2LookerResp::~Player2LookerResp() {
            // @@protoc_insertion_point(destructor:game.base.Player2LookerResp)
            SharedDtor();
        }

        void Player2LookerResp::SharedDtor() {}

        void Player2LookerResp::SetCachedSize(int size) const {
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
        }
        const ::google::protobuf::Descriptor* Player2LookerResp::descriptor() {
            ::protobuf_game_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
            return ::protobuf_game_5fbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
        }

        const Player2LookerResp& Player2LookerResp::default_instance() {
            ::protobuf_game_5fbase_2eproto::InitDefaultsPlayer2LookerResp();
            return *internal_default_instance();
        }

        Player2LookerResp* Player2LookerResp::New(::google::protobuf::Arena* arena) const {
            Player2LookerResp* n = new Player2LookerResp;
            if (arena != NULL) {
                arena->Own(n);
            }
            return n;
        }

        void Player2LookerResp::Clear() {
            // @@protoc_insertion_point(message_clear_start:game.base.Player2LookerResp)
            ::google::protobuf::uint32 cached_has_bits = 0;
            // Prevent compiler warnings about cached_has_bits being unused
            (void) cached_has_bits;

            code_ = 0;
            _has_bits_.Clear();
            _internal_metadata_.Clear();
        }

        bool Player2LookerResp::MergePartialFromCodedStream(
            ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
            ::google::protobuf::uint32 tag;
            // @@protoc_insertion_point(parse_start:game.base.Player2LookerResp)
            for (;;) {
                ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
                tag = p.first;
                if (!p.second) goto handle_unusual;
                switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
                    // optional int32 code = 1;
                    case 1: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
                            set_has_code();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &code_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                    default: {
handle_unusual:
                        if (tag == 0) {
                            goto success;
                        }
                        DO_(::google::protobuf::internal::WireFormat::SkipField(
                            input, tag, _internal_metadata_.mutable_unknown_fields()));
                        break;
                    }
                }
            }
success:
            // @@protoc_insertion_point(parse_success:game.base.Player2LookerResp)
            return true;
failure:
            // @@protoc_insertion_point(parse_failure:game.base.Player2LookerResp)
            return false;
#undef DO_
        }

        void Player2LookerResp::SerializeWithCachedSizes(
            ::google::protobuf::io::CodedOutputStream* output) const {
            // @@protoc_insertion_point(serialize_start:game.base.Player2LookerResp)
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            // optional int32 code = 1;
            if (cached_has_bits & 0x00000001u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
                    _internal_metadata_.unknown_fields(), output);
            }
            // @@protoc_insertion_point(serialize_end:game.base.Player2LookerResp)
        }

        ::google::protobuf::uint8* Player2LookerResp::InternalSerializeWithCachedSizesToArray(
            bool deterministic, ::google::protobuf::uint8* target) const {
            (void) deterministic; // Unused
            // @@protoc_insertion_point(serialize_to_array_start:game.base.Player2LookerResp)
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            // optional int32 code = 1;
            if (cached_has_bits & 0x00000001u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                    _internal_metadata_.unknown_fields(), target);
            }
            // @@protoc_insertion_point(serialize_to_array_end:game.base.Player2LookerResp)
            return target;
        }

        size_t Player2LookerResp::ByteSizeLong() const {
            // @@protoc_insertion_point(message_byte_size_start:game.base.Player2LookerResp)
            size_t total_size = 0;

            if (_internal_metadata_.have_unknown_fields()) {
                total_size +=
                    ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
                    _internal_metadata_.unknown_fields());
            }
            // optional int32 code = 1;
            if (has_code()) {
                total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::Int32Size(
                    this->code());
            }

            int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = cached_size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
            return total_size;
        }

        void Player2LookerResp::MergeFrom(const ::google::protobuf::Message& from) {
            // @@protoc_insertion_point(generalized_merge_from_start:game.base.Player2LookerResp)
            GOOGLE_DCHECK_NE(&from, this);
            const Player2LookerResp* source =
                ::google::protobuf::internal::DynamicCastToGenerated<const Player2LookerResp>(
                &from);
            if (source == NULL) {
                // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.base.Player2LookerResp)
                ::google::protobuf::internal::ReflectionOps::Merge(from, this);
            } else {
                // @@protoc_insertion_point(generalized_merge_from_cast_success:game.base.Player2LookerResp)
                MergeFrom(*source);
            }
        }

        void Player2LookerResp::MergeFrom(const Player2LookerResp& from) {
            // @@protoc_insertion_point(class_specific_merge_from_start:game.base.Player2LookerResp)
            GOOGLE_DCHECK_NE(&from, this);
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            if (from.has_code()) {
                set_code(from.code());
            }
        }

        void Player2LookerResp::CopyFrom(const ::google::protobuf::Message& from) {
            // @@protoc_insertion_point(generalized_copy_from_start:game.base.Player2LookerResp)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        void Player2LookerResp::CopyFrom(const Player2LookerResp& from) {
            // @@protoc_insertion_point(class_specific_copy_from_start:game.base.Player2LookerResp)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        bool Player2LookerResp::IsInitialized() const {
            return true;
        }

        void Player2LookerResp::Swap(Player2LookerResp* other) {
            if (other == this) return;
            InternalSwap(other);
        }
        void Player2LookerResp::InternalSwap(Player2LookerResp* other) {
            using std::swap;
            swap(code_, other->code_);
            swap(_has_bits_[0], other->_has_bits_[0]);
            _internal_metadata_.Swap(&other->_internal_metadata_);
            swap(_cached_size_, other->_cached_size_);
        }

        ::google::protobuf::Metadata Player2LookerResp::GetMetadata() const {
            protobuf_game_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
            return ::protobuf_game_5fbase_2eproto::file_level_metadata[kIndexInFileMessages];
        }


        // ===================================================================

        void SwitchTableReq::InitAsDefaultInstance() {}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
        const int SwitchTableReq::kUseridFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

        SwitchTableReq::SwitchTableReq()
            : ::google::protobuf::Message(), _internal_metadata_(NULL) {
            if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
                ::protobuf_game_5fbase_2eproto::InitDefaultsSwitchTableReq();
            }
            SharedCtor();
            // @@protoc_insertion_point(constructor:game.base.SwitchTableReq)
        }
        SwitchTableReq::SwitchTableReq(const SwitchTableReq& from)
            : ::google::protobuf::Message(),
            _internal_metadata_(NULL),
            _has_bits_(from._has_bits_),
            _cached_size_(0) {
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            userid_ = from.userid_;
            // @@protoc_insertion_point(copy_constructor:game.base.SwitchTableReq)
        }

        void SwitchTableReq::SharedCtor() {
            _cached_size_ = 0;
            userid_ = 0;
        }

        SwitchTableReq::~SwitchTableReq() {
            // @@protoc_insertion_point(destructor:game.base.SwitchTableReq)
            SharedDtor();
        }

        void SwitchTableReq::SharedDtor() {}

        void SwitchTableReq::SetCachedSize(int size) const {
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
        }
        const ::google::protobuf::Descriptor* SwitchTableReq::descriptor() {
            ::protobuf_game_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
            return ::protobuf_game_5fbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
        }

        const SwitchTableReq& SwitchTableReq::default_instance() {
            ::protobuf_game_5fbase_2eproto::InitDefaultsSwitchTableReq();
            return *internal_default_instance();
        }

        SwitchTableReq* SwitchTableReq::New(::google::protobuf::Arena* arena) const {
            SwitchTableReq* n = new SwitchTableReq;
            if (arena != NULL) {
                arena->Own(n);
            }
            return n;
        }

        void SwitchTableReq::Clear() {
            // @@protoc_insertion_point(message_clear_start:game.base.SwitchTableReq)
            ::google::protobuf::uint32 cached_has_bits = 0;
            // Prevent compiler warnings about cached_has_bits being unused
            (void) cached_has_bits;

            userid_ = 0;
            _has_bits_.Clear();
            _internal_metadata_.Clear();
        }

        bool SwitchTableReq::MergePartialFromCodedStream(
            ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
            ::google::protobuf::uint32 tag;
            // @@protoc_insertion_point(parse_start:game.base.SwitchTableReq)
            for (;;) {
                ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
                tag = p.first;
                if (!p.second) goto handle_unusual;
                switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
                    // optional int32 userid = 1;
                    case 1: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
                            set_has_userid();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &userid_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                    default: {
handle_unusual:
                        if (tag == 0) {
                            goto success;
                        }
                        DO_(::google::protobuf::internal::WireFormat::SkipField(
                            input, tag, _internal_metadata_.mutable_unknown_fields()));
                        break;
                    }
                }
            }
success:
            // @@protoc_insertion_point(parse_success:game.base.SwitchTableReq)
            return true;
failure:
            // @@protoc_insertion_point(parse_failure:game.base.SwitchTableReq)
            return false;
#undef DO_
        }

        void SwitchTableReq::SerializeWithCachedSizes(
            ::google::protobuf::io::CodedOutputStream* output) const {
            // @@protoc_insertion_point(serialize_start:game.base.SwitchTableReq)
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            // optional int32 userid = 1;
            if (cached_has_bits & 0x00000001u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
                    _internal_metadata_.unknown_fields(), output);
            }
            // @@protoc_insertion_point(serialize_end:game.base.SwitchTableReq)
        }

        ::google::protobuf::uint8* SwitchTableReq::InternalSerializeWithCachedSizesToArray(
            bool deterministic, ::google::protobuf::uint8* target) const {
            (void) deterministic; // Unused
            // @@protoc_insertion_point(serialize_to_array_start:game.base.SwitchTableReq)
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            // optional int32 userid = 1;
            if (cached_has_bits & 0x00000001u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                    _internal_metadata_.unknown_fields(), target);
            }
            // @@protoc_insertion_point(serialize_to_array_end:game.base.SwitchTableReq)
            return target;
        }

        size_t SwitchTableReq::ByteSizeLong() const {
            // @@protoc_insertion_point(message_byte_size_start:game.base.SwitchTableReq)
            size_t total_size = 0;

            if (_internal_metadata_.have_unknown_fields()) {
                total_size +=
                    ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
                    _internal_metadata_.unknown_fields());
            }
            // optional int32 userid = 1;
            if (has_userid()) {
                total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::Int32Size(
                    this->userid());
            }

            int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = cached_size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
            return total_size;
        }

        void SwitchTableReq::MergeFrom(const ::google::protobuf::Message& from) {
            // @@protoc_insertion_point(generalized_merge_from_start:game.base.SwitchTableReq)
            GOOGLE_DCHECK_NE(&from, this);
            const SwitchTableReq* source =
                ::google::protobuf::internal::DynamicCastToGenerated<const SwitchTableReq>(
                &from);
            if (source == NULL) {
                // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.base.SwitchTableReq)
                ::google::protobuf::internal::ReflectionOps::Merge(from, this);
            } else {
                // @@protoc_insertion_point(generalized_merge_from_cast_success:game.base.SwitchTableReq)
                MergeFrom(*source);
            }
        }

        void SwitchTableReq::MergeFrom(const SwitchTableReq& from) {
            // @@protoc_insertion_point(class_specific_merge_from_start:game.base.SwitchTableReq)
            GOOGLE_DCHECK_NE(&from, this);
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            if (from.has_userid()) {
                set_userid(from.userid());
            }
        }

        void SwitchTableReq::CopyFrom(const ::google::protobuf::Message& from) {
            // @@protoc_insertion_point(generalized_copy_from_start:game.base.SwitchTableReq)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        void SwitchTableReq::CopyFrom(const SwitchTableReq& from) {
            // @@protoc_insertion_point(class_specific_copy_from_start:game.base.SwitchTableReq)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        bool SwitchTableReq::IsInitialized() const {
            return true;
        }

        void SwitchTableReq::Swap(SwitchTableReq* other) {
            if (other == this) return;
            InternalSwap(other);
        }
        void SwitchTableReq::InternalSwap(SwitchTableReq* other) {
            using std::swap;
            swap(userid_, other->userid_);
            swap(_has_bits_[0], other->_has_bits_[0]);
            _internal_metadata_.Swap(&other->_internal_metadata_);
            swap(_cached_size_, other->_cached_size_);
        }

        ::google::protobuf::Metadata SwitchTableReq::GetMetadata() const {
            protobuf_game_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
            return ::protobuf_game_5fbase_2eproto::file_level_metadata[kIndexInFileMessages];
        }


        // ===================================================================

        void SwitchTableResp::InitAsDefaultInstance() {}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
        const int SwitchTableResp::kCodeFieldNumber;
        const int SwitchTableResp::kTablenoFieldNumber;
        const int SwitchTableResp::kChairnoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

        SwitchTableResp::SwitchTableResp()
            : ::google::protobuf::Message(), _internal_metadata_(NULL) {
            if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
                ::protobuf_game_5fbase_2eproto::InitDefaultsSwitchTableResp();
            }
            SharedCtor();
            // @@protoc_insertion_point(constructor:game.base.SwitchTableResp)
        }
        SwitchTableResp::SwitchTableResp(const SwitchTableResp& from)
            : ::google::protobuf::Message(),
            _internal_metadata_(NULL),
            _has_bits_(from._has_bits_),
            _cached_size_(0) {
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            ::memcpy(&code_, &from.code_,
                     static_cast<size_t>(reinterpret_cast<char*>(&chairno_) -
                     reinterpret_cast<char*>(&code_)) + sizeof(chairno_));
            // @@protoc_insertion_point(copy_constructor:game.base.SwitchTableResp)
        }

        void SwitchTableResp::SharedCtor() {
            _cached_size_ = 0;
            ::memset(&code_, 0, static_cast<size_t>(
                reinterpret_cast<char*>(&chairno_) -
                reinterpret_cast<char*>(&code_)) + sizeof(chairno_));
        }

        SwitchTableResp::~SwitchTableResp() {
            // @@protoc_insertion_point(destructor:game.base.SwitchTableResp)
            SharedDtor();
        }

        void SwitchTableResp::SharedDtor() {}

        void SwitchTableResp::SetCachedSize(int size) const {
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
        }
        const ::google::protobuf::Descriptor* SwitchTableResp::descriptor() {
            ::protobuf_game_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
            return ::protobuf_game_5fbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
        }

        const SwitchTableResp& SwitchTableResp::default_instance() {
            ::protobuf_game_5fbase_2eproto::InitDefaultsSwitchTableResp();
            return *internal_default_instance();
        }

        SwitchTableResp* SwitchTableResp::New(::google::protobuf::Arena* arena) const {
            SwitchTableResp* n = new SwitchTableResp;
            if (arena != NULL) {
                arena->Own(n);
            }
            return n;
        }

        void SwitchTableResp::Clear() {
            // @@protoc_insertion_point(message_clear_start:game.base.SwitchTableResp)
            ::google::protobuf::uint32 cached_has_bits = 0;
            // Prevent compiler warnings about cached_has_bits being unused
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            if (cached_has_bits & 7u) {
                ::memset(&code_, 0, static_cast<size_t>(
                    reinterpret_cast<char*>(&chairno_) -
                    reinterpret_cast<char*>(&code_)) + sizeof(chairno_));
            }
            _has_bits_.Clear();
            _internal_metadata_.Clear();
        }

        bool SwitchTableResp::MergePartialFromCodedStream(
            ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
            ::google::protobuf::uint32 tag;
            // @@protoc_insertion_point(parse_start:game.base.SwitchTableResp)
            for (;;) {
                ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
                tag = p.first;
                if (!p.second) goto handle_unusual;
                switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
                    // optional int32 code = 1;
                    case 1: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
                            set_has_code();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &code_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // optional int32 tableno = 2;
                    case 2: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
                            set_has_tableno();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &tableno_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // optional int32 chairno = 3;
                    case 3: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
                            set_has_chairno();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &chairno_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                    default: {
handle_unusual:
                        if (tag == 0) {
                            goto success;
                        }
                        DO_(::google::protobuf::internal::WireFormat::SkipField(
                            input, tag, _internal_metadata_.mutable_unknown_fields()));
                        break;
                    }
                }
            }
success:
            // @@protoc_insertion_point(parse_success:game.base.SwitchTableResp)
            return true;
failure:
            // @@protoc_insertion_point(parse_failure:game.base.SwitchTableResp)
            return false;
#undef DO_
        }

        void SwitchTableResp::SerializeWithCachedSizes(
            ::google::protobuf::io::CodedOutputStream* output) const {
            // @@protoc_insertion_point(serialize_start:game.base.SwitchTableResp)
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            // optional int32 code = 1;
            if (cached_has_bits & 0x00000001u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
            }

            // optional int32 tableno = 2;
            if (cached_has_bits & 0x00000002u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tableno(), output);
            }

            // optional int32 chairno = 3;
            if (cached_has_bits & 0x00000004u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->chairno(), output);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
                    _internal_metadata_.unknown_fields(), output);
            }
            // @@protoc_insertion_point(serialize_end:game.base.SwitchTableResp)
        }

        ::google::protobuf::uint8* SwitchTableResp::InternalSerializeWithCachedSizesToArray(
            bool deterministic, ::google::protobuf::uint8* target) const {
            (void) deterministic; // Unused
            // @@protoc_insertion_point(serialize_to_array_start:game.base.SwitchTableResp)
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            // optional int32 code = 1;
            if (cached_has_bits & 0x00000001u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
            }

            // optional int32 tableno = 2;
            if (cached_has_bits & 0x00000002u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tableno(), target);
            }

            // optional int32 chairno = 3;
            if (cached_has_bits & 0x00000004u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->chairno(), target);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                    _internal_metadata_.unknown_fields(), target);
            }
            // @@protoc_insertion_point(serialize_to_array_end:game.base.SwitchTableResp)
            return target;
        }

        size_t SwitchTableResp::ByteSizeLong() const {
            // @@protoc_insertion_point(message_byte_size_start:game.base.SwitchTableResp)
            size_t total_size = 0;

            if (_internal_metadata_.have_unknown_fields()) {
                total_size +=
                    ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
                    _internal_metadata_.unknown_fields());
            }
            if (_has_bits_[0 / 32] & 7u) {
                // optional int32 code = 1;
                if (has_code()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::Int32Size(
                        this->code());
                }

                // optional int32 tableno = 2;
                if (has_tableno()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::Int32Size(
                        this->tableno());
                }

                // optional int32 chairno = 3;
                if (has_chairno()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::Int32Size(
                        this->chairno());
                }

            }
            int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = cached_size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
            return total_size;
        }

        void SwitchTableResp::MergeFrom(const ::google::protobuf::Message& from) {
            // @@protoc_insertion_point(generalized_merge_from_start:game.base.SwitchTableResp)
            GOOGLE_DCHECK_NE(&from, this);
            const SwitchTableResp* source =
                ::google::protobuf::internal::DynamicCastToGenerated<const SwitchTableResp>(
                &from);
            if (source == NULL) {
                // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.base.SwitchTableResp)
                ::google::protobuf::internal::ReflectionOps::Merge(from, this);
            } else {
                // @@protoc_insertion_point(generalized_merge_from_cast_success:game.base.SwitchTableResp)
                MergeFrom(*source);
            }
        }

        void SwitchTableResp::MergeFrom(const SwitchTableResp& from) {
            // @@protoc_insertion_point(class_specific_merge_from_start:game.base.SwitchTableResp)
            GOOGLE_DCHECK_NE(&from, this);
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = from._has_bits_[0];
            if (cached_has_bits & 7u) {
                if (cached_has_bits & 0x00000001u) {
                    code_ = from.code_;
                }
                if (cached_has_bits & 0x00000002u) {
                    tableno_ = from.tableno_;
                }
                if (cached_has_bits & 0x00000004u) {
                    chairno_ = from.chairno_;
                }
                _has_bits_[0] |= cached_has_bits;
            }
        }

        void SwitchTableResp::CopyFrom(const ::google::protobuf::Message& from) {
            // @@protoc_insertion_point(generalized_copy_from_start:game.base.SwitchTableResp)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        void SwitchTableResp::CopyFrom(const SwitchTableResp& from) {
            // @@protoc_insertion_point(class_specific_copy_from_start:game.base.SwitchTableResp)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        bool SwitchTableResp::IsInitialized() const {
            return true;
        }

        void SwitchTableResp::Swap(SwitchTableResp* other) {
            if (other == this) return;
            InternalSwap(other);
        }
        void SwitchTableResp::InternalSwap(SwitchTableResp* other) {
            using std::swap;
            swap(code_, other->code_);
            swap(tableno_, other->tableno_);
            swap(chairno_, other->chairno_);
            swap(_has_bits_[0], other->_has_bits_[0]);
            _internal_metadata_.Swap(&other->_internal_metadata_);
            swap(_cached_size_, other->_cached_size_);
        }

        ::google::protobuf::Metadata SwitchTableResp::GetMetadata() const {
            protobuf_game_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
            return ::protobuf_game_5fbase_2eproto::file_level_metadata[kIndexInFileMessages];
        }


        // ===================================================================

        void TableChatReq::InitAsDefaultInstance() {}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
        const int TableChatReq::kUseridFieldNumber;
        const int TableChatReq::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

        TableChatReq::TableChatReq()
            : ::google::protobuf::Message(), _internal_metadata_(NULL) {
            if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
                ::protobuf_game_5fbase_2eproto::InitDefaultsTableChatReq();
            }
            SharedCtor();
            // @@protoc_insertion_point(constructor:game.base.TableChatReq)
        }
        TableChatReq::TableChatReq(const TableChatReq& from)
            : ::google::protobuf::Message(),
            _internal_metadata_(NULL),
            _has_bits_(from._has_bits_),
            _cached_size_(0) {
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
            if (from.has_msg()) {
                msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
            }
            userid_ = from.userid_;
            // @@protoc_insertion_point(copy_constructor:game.base.TableChatReq)
        }

        void TableChatReq::SharedCtor() {
            _cached_size_ = 0;
            msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
            userid_ = 0;
        }

        TableChatReq::~TableChatReq() {
            // @@protoc_insertion_point(destructor:game.base.TableChatReq)
            SharedDtor();
        }

        void TableChatReq::SharedDtor() {
            msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }

        void TableChatReq::SetCachedSize(int size) const {
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
        }
        const ::google::protobuf::Descriptor* TableChatReq::descriptor() {
            ::protobuf_game_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
            return ::protobuf_game_5fbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
        }

        const TableChatReq& TableChatReq::default_instance() {
            ::protobuf_game_5fbase_2eproto::InitDefaultsTableChatReq();
            return *internal_default_instance();
        }

        TableChatReq* TableChatReq::New(::google::protobuf::Arena* arena) const {
            TableChatReq* n = new TableChatReq;
            if (arena != NULL) {
                arena->Own(n);
            }
            return n;
        }

        void TableChatReq::Clear() {
            // @@protoc_insertion_point(message_clear_start:game.base.TableChatReq)
            ::google::protobuf::uint32 cached_has_bits = 0;
            // Prevent compiler warnings about cached_has_bits being unused
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
                GOOGLE_DCHECK(!msg_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
                (*msg_.UnsafeRawStringPointer())->clear();
            }
            userid_ = 0;
            _has_bits_.Clear();
            _internal_metadata_.Clear();
        }

        bool TableChatReq::MergePartialFromCodedStream(
            ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
            ::google::protobuf::uint32 tag;
            // @@protoc_insertion_point(parse_start:game.base.TableChatReq)
            for (;;) {
                ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
                tag = p.first;
                if (!p.second) goto handle_unusual;
                switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
                    // optional int32 userid = 1;
                    case 1: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
                            set_has_userid();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &userid_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // optional string msg = 2;
                    case 2: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
                            DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                                input, this->mutable_msg()));
                            ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
                                this->msg().data(), static_cast<int>(this->msg().length()),
                                ::google::protobuf::internal::WireFormat::PARSE,
                                "game.base.TableChatReq.msg");
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                    default: {
handle_unusual:
                        if (tag == 0) {
                            goto success;
                        }
                        DO_(::google::protobuf::internal::WireFormat::SkipField(
                            input, tag, _internal_metadata_.mutable_unknown_fields()));
                        break;
                    }
                }
            }
success:
            // @@protoc_insertion_point(parse_success:game.base.TableChatReq)
            return true;
failure:
            // @@protoc_insertion_point(parse_failure:game.base.TableChatReq)
            return false;
#undef DO_
        }

        void TableChatReq::SerializeWithCachedSizes(
            ::google::protobuf::io::CodedOutputStream* output) const {
            // @@protoc_insertion_point(serialize_start:game.base.TableChatReq)
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            // optional int32 userid = 1;
            if (cached_has_bits & 0x00000002u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
            }

            // optional string msg = 2;
            if (cached_has_bits & 0x00000001u) {
                ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
                    this->msg().data(), static_cast<int>(this->msg().length()),
                    ::google::protobuf::internal::WireFormat::SERIALIZE,
                    "game.base.TableChatReq.msg");
                ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
                    2, this->msg(), output);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
                    _internal_metadata_.unknown_fields(), output);
            }
            // @@protoc_insertion_point(serialize_end:game.base.TableChatReq)
        }

        ::google::protobuf::uint8* TableChatReq::InternalSerializeWithCachedSizesToArray(
            bool deterministic, ::google::protobuf::uint8* target) const {
            (void) deterministic; // Unused
            // @@protoc_insertion_point(serialize_to_array_start:game.base.TableChatReq)
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            // optional int32 userid = 1;
            if (cached_has_bits & 0x00000002u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
            }

            // optional string msg = 2;
            if (cached_has_bits & 0x00000001u) {
                ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
                    this->msg().data(), static_cast<int>(this->msg().length()),
                    ::google::protobuf::internal::WireFormat::SERIALIZE,
                    "game.base.TableChatReq.msg");
                target =
                    ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
                    2, this->msg(), target);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                    _internal_metadata_.unknown_fields(), target);
            }
            // @@protoc_insertion_point(serialize_to_array_end:game.base.TableChatReq)
            return target;
        }

        size_t TableChatReq::ByteSizeLong() const {
            // @@protoc_insertion_point(message_byte_size_start:game.base.TableChatReq)
            size_t total_size = 0;

            if (_internal_metadata_.have_unknown_fields()) {
                total_size +=
                    ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
                    _internal_metadata_.unknown_fields());
            }
            if (_has_bits_[0 / 32] & 3u) {
                // optional string msg = 2;
                if (has_msg()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::StringSize(
                        this->msg());
                }

                // optional int32 userid = 1;
                if (has_userid()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::Int32Size(
                        this->userid());
                }

            }
            int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = cached_size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
            return total_size;
        }

        void TableChatReq::MergeFrom(const ::google::protobuf::Message& from) {
            // @@protoc_insertion_point(generalized_merge_from_start:game.base.TableChatReq)
            GOOGLE_DCHECK_NE(&from, this);
            const TableChatReq* source =
                ::google::protobuf::internal::DynamicCastToGenerated<const TableChatReq>(
                &from);
            if (source == NULL) {
                // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.base.TableChatReq)
                ::google::protobuf::internal::ReflectionOps::Merge(from, this);
            } else {
                // @@protoc_insertion_point(generalized_merge_from_cast_success:game.base.TableChatReq)
                MergeFrom(*source);
            }
        }

        void TableChatReq::MergeFrom(const TableChatReq& from) {
            // @@protoc_insertion_point(class_specific_merge_from_start:game.base.TableChatReq)
            GOOGLE_DCHECK_NE(&from, this);
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = from._has_bits_[0];
            if (cached_has_bits & 3u) {
                if (cached_has_bits & 0x00000001u) {
                    set_has_msg();
                    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
                }
                if (cached_has_bits & 0x00000002u) {
                    userid_ = from.userid_;
                }
                _has_bits_[0] |= cached_has_bits;
            }
        }

        void TableChatReq::CopyFrom(const ::google::protobuf::Message& from) {
            // @@protoc_insertion_point(generalized_copy_from_start:game.base.TableChatReq)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        void TableChatReq::CopyFrom(const TableChatReq& from) {
            // @@protoc_insertion_point(class_specific_copy_from_start:game.base.TableChatReq)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        bool TableChatReq::IsInitialized() const {
            return true;
        }

        void TableChatReq::Swap(TableChatReq* other) {
            if (other == this) return;
            InternalSwap(other);
        }
        void TableChatReq::InternalSwap(TableChatReq* other) {
            using std::swap;
            msg_.Swap(&other->msg_);
            swap(userid_, other->userid_);
            swap(_has_bits_[0], other->_has_bits_[0]);
            _internal_metadata_.Swap(&other->_internal_metadata_);
            swap(_cached_size_, other->_cached_size_);
        }

        ::google::protobuf::Metadata TableChatReq::GetMetadata() const {
            protobuf_game_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
            return ::protobuf_game_5fbase_2eproto::file_level_metadata[kIndexInFileMessages];
        }


        // ===================================================================

        void TableChatNotify::InitAsDefaultInstance() {}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
        const int TableChatNotify::kUseridFieldNumber;
        const int TableChatNotify::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

        TableChatNotify::TableChatNotify()
            : ::google::protobuf::Message(), _internal_metadata_(NULL) {
            if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
                ::protobuf_game_5fbase_2eproto::InitDefaultsTableChatNotify();
            }
            SharedCtor();
            // @@protoc_insertion_point(constructor:game.base.TableChatNotify)
        }
        TableChatNotify::TableChatNotify(const TableChatNotify& from)
            : ::google::protobuf::Message(),
            _internal_metadata_(NULL),
            _has_bits_(from._has_bits_),
            _cached_size_(0) {
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
            if (from.has_msg()) {
                msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
            }
            userid_ = from.userid_;
            // @@protoc_insertion_point(copy_constructor:game.base.TableChatNotify)
        }

        void TableChatNotify::SharedCtor() {
            _cached_size_ = 0;
            msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
            userid_ = 0;
        }

        TableChatNotify::~TableChatNotify() {
            // @@protoc_insertion_point(destructor:game.base.TableChatNotify)
            SharedDtor();
        }

        void TableChatNotify::SharedDtor() {
            msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }

        void TableChatNotify::SetCachedSize(int size) const {
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
        }
        const ::google::protobuf::Descriptor* TableChatNotify::descriptor() {
            ::protobuf_game_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
            return ::protobuf_game_5fbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
        }

        const TableChatNotify& TableChatNotify::default_instance() {
            ::protobuf_game_5fbase_2eproto::InitDefaultsTableChatNotify();
            return *internal_default_instance();
        }

        TableChatNotify* TableChatNotify::New(::google::protobuf::Arena* arena) const {
            TableChatNotify* n = new TableChatNotify;
            if (arena != NULL) {
                arena->Own(n);
            }
            return n;
        }

        void TableChatNotify::Clear() {
            // @@protoc_insertion_point(message_clear_start:game.base.TableChatNotify)
            ::google::protobuf::uint32 cached_has_bits = 0;
            // Prevent compiler warnings about cached_has_bits being unused
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
                GOOGLE_DCHECK(!msg_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
                (*msg_.UnsafeRawStringPointer())->clear();
            }
            userid_ = 0;
            _has_bits_.Clear();
            _internal_metadata_.Clear();
        }

        bool TableChatNotify::MergePartialFromCodedStream(
            ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
            ::google::protobuf::uint32 tag;
            // @@protoc_insertion_point(parse_start:game.base.TableChatNotify)
            for (;;) {
                ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
                tag = p.first;
                if (!p.second) goto handle_unusual;
                switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
                    // optional int32 userid = 1;
                    case 1: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
                            set_has_userid();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &userid_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // optional string msg = 2;
                    case 2: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
                            DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                                input, this->mutable_msg()));
                            ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
                                this->msg().data(), static_cast<int>(this->msg().length()),
                                ::google::protobuf::internal::WireFormat::PARSE,
                                "game.base.TableChatNotify.msg");
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                    default: {
handle_unusual:
                        if (tag == 0) {
                            goto success;
                        }
                        DO_(::google::protobuf::internal::WireFormat::SkipField(
                            input, tag, _internal_metadata_.mutable_unknown_fields()));
                        break;
                    }
                }
            }
success:
            // @@protoc_insertion_point(parse_success:game.base.TableChatNotify)
            return true;
failure:
            // @@protoc_insertion_point(parse_failure:game.base.TableChatNotify)
            return false;
#undef DO_
        }

        void TableChatNotify::SerializeWithCachedSizes(
            ::google::protobuf::io::CodedOutputStream* output) const {
            // @@protoc_insertion_point(serialize_start:game.base.TableChatNotify)
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            // optional int32 userid = 1;
            if (cached_has_bits & 0x00000002u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
            }

            // optional string msg = 2;
            if (cached_has_bits & 0x00000001u) {
                ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
                    this->msg().data(), static_cast<int>(this->msg().length()),
                    ::google::protobuf::internal::WireFormat::SERIALIZE,
                    "game.base.TableChatNotify.msg");
                ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
                    2, this->msg(), output);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
                    _internal_metadata_.unknown_fields(), output);
            }
            // @@protoc_insertion_point(serialize_end:game.base.TableChatNotify)
        }

        ::google::protobuf::uint8* TableChatNotify::InternalSerializeWithCachedSizesToArray(
            bool deterministic, ::google::protobuf::uint8* target) const {
            (void) deterministic; // Unused
            // @@protoc_insertion_point(serialize_to_array_start:game.base.TableChatNotify)
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            // optional int32 userid = 1;
            if (cached_has_bits & 0x00000002u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
            }

            // optional string msg = 2;
            if (cached_has_bits & 0x00000001u) {
                ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
                    this->msg().data(), static_cast<int>(this->msg().length()),
                    ::google::protobuf::internal::WireFormat::SERIALIZE,
                    "game.base.TableChatNotify.msg");
                target =
                    ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
                    2, this->msg(), target);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                    _internal_metadata_.unknown_fields(), target);
            }
            // @@protoc_insertion_point(serialize_to_array_end:game.base.TableChatNotify)
            return target;
        }

        size_t TableChatNotify::ByteSizeLong() const {
            // @@protoc_insertion_point(message_byte_size_start:game.base.TableChatNotify)
            size_t total_size = 0;

            if (_internal_metadata_.have_unknown_fields()) {
                total_size +=
                    ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
                    _internal_metadata_.unknown_fields());
            }
            if (_has_bits_[0 / 32] & 3u) {
                // optional string msg = 2;
                if (has_msg()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::StringSize(
                        this->msg());
                }

                // optional int32 userid = 1;
                if (has_userid()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::Int32Size(
                        this->userid());
                }

            }
            int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = cached_size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
            return total_size;
        }

        void TableChatNotify::MergeFrom(const ::google::protobuf::Message& from) {
            // @@protoc_insertion_point(generalized_merge_from_start:game.base.TableChatNotify)
            GOOGLE_DCHECK_NE(&from, this);
            const TableChatNotify* source =
                ::google::protobuf::internal::DynamicCastToGenerated<const TableChatNotify>(
                &from);
            if (source == NULL) {
                // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.base.TableChatNotify)
                ::google::protobuf::internal::ReflectionOps::Merge(from, this);
            } else {
                // @@protoc_insertion_point(generalized_merge_from_cast_success:game.base.TableChatNotify)
                MergeFrom(*source);
            }
        }

        void TableChatNotify::MergeFrom(const TableChatNotify& from) {
            // @@protoc_insertion_point(class_specific_merge_from_start:game.base.TableChatNotify)
            GOOGLE_DCHECK_NE(&from, this);
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = from._has_bits_[0];
            if (cached_has_bits & 3u) {
                if (cached_has_bits & 0x00000001u) {
                    set_has_msg();
                    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
                }
                if (cached_has_bits & 0x00000002u) {
                    userid_ = from.userid_;
                }
                _has_bits_[0] |= cached_has_bits;
            }
        }

        void TableChatNotify::CopyFrom(const ::google::protobuf::Message& from) {
            // @@protoc_insertion_point(generalized_copy_from_start:game.base.TableChatNotify)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        void TableChatNotify::CopyFrom(const TableChatNotify& from) {
            // @@protoc_insertion_point(class_specific_copy_from_start:game.base.TableChatNotify)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        bool TableChatNotify::IsInitialized() const {
            return true;
        }

        void TableChatNotify::Swap(TableChatNotify* other) {
            if (other == this) return;
            InternalSwap(other);
        }
        void TableChatNotify::InternalSwap(TableChatNotify* other) {
            using std::swap;
            msg_.Swap(&other->msg_);
            swap(userid_, other->userid_);
            swap(_has_bits_[0], other->_has_bits_[0]);
            _internal_metadata_.Swap(&other->_internal_metadata_);
            swap(_cached_size_, other->_cached_size_);
        }

        ::google::protobuf::Metadata TableChatNotify::GetMetadata() const {
            protobuf_game_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
            return ::protobuf_game_5fbase_2eproto::file_level_metadata[kIndexInFileMessages];
        }


        // ===================================================================

        void TableChatResp::InitAsDefaultInstance() {}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
        const int TableChatResp::kCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

        TableChatResp::TableChatResp()
            : ::google::protobuf::Message(), _internal_metadata_(NULL) {
            if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
                ::protobuf_game_5fbase_2eproto::InitDefaultsTableChatResp();
            }
            SharedCtor();
            // @@protoc_insertion_point(constructor:game.base.TableChatResp)
        }
        TableChatResp::TableChatResp(const TableChatResp& from)
            : ::google::protobuf::Message(),
            _internal_metadata_(NULL),
            _has_bits_(from._has_bits_),
            _cached_size_(0) {
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            code_ = from.code_;
            // @@protoc_insertion_point(copy_constructor:game.base.TableChatResp)
        }

        void TableChatResp::SharedCtor() {
            _cached_size_ = 0;
            code_ = 0;
        }

        TableChatResp::~TableChatResp() {
            // @@protoc_insertion_point(destructor:game.base.TableChatResp)
            SharedDtor();
        }

        void TableChatResp::SharedDtor() {}

        void TableChatResp::SetCachedSize(int size) const {
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
        }
        const ::google::protobuf::Descriptor* TableChatResp::descriptor() {
            ::protobuf_game_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
            return ::protobuf_game_5fbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
        }

        const TableChatResp& TableChatResp::default_instance() {
            ::protobuf_game_5fbase_2eproto::InitDefaultsTableChatResp();
            return *internal_default_instance();
        }

        TableChatResp* TableChatResp::New(::google::protobuf::Arena* arena) const {
            TableChatResp* n = new TableChatResp;
            if (arena != NULL) {
                arena->Own(n);
            }
            return n;
        }

        void TableChatResp::Clear() {
            // @@protoc_insertion_point(message_clear_start:game.base.TableChatResp)
            ::google::protobuf::uint32 cached_has_bits = 0;
            // Prevent compiler warnings about cached_has_bits being unused
            (void) cached_has_bits;

            code_ = 0;
            _has_bits_.Clear();
            _internal_metadata_.Clear();
        }

        bool TableChatResp::MergePartialFromCodedStream(
            ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
            ::google::protobuf::uint32 tag;
            // @@protoc_insertion_point(parse_start:game.base.TableChatResp)
            for (;;) {
                ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
                tag = p.first;
                if (!p.second) goto handle_unusual;
                switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
                    // optional int32 code = 1;
                    case 1: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
                            set_has_code();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &code_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                    default: {
handle_unusual:
                        if (tag == 0) {
                            goto success;
                        }
                        DO_(::google::protobuf::internal::WireFormat::SkipField(
                            input, tag, _internal_metadata_.mutable_unknown_fields()));
                        break;
                    }
                }
            }
success:
            // @@protoc_insertion_point(parse_success:game.base.TableChatResp)
            return true;
failure:
            // @@protoc_insertion_point(parse_failure:game.base.TableChatResp)
            return false;
#undef DO_
        }

        void TableChatResp::SerializeWithCachedSizes(
            ::google::protobuf::io::CodedOutputStream* output) const {
            // @@protoc_insertion_point(serialize_start:game.base.TableChatResp)
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            // optional int32 code = 1;
            if (cached_has_bits & 0x00000001u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
                    _internal_metadata_.unknown_fields(), output);
            }
            // @@protoc_insertion_point(serialize_end:game.base.TableChatResp)
        }

        ::google::protobuf::uint8* TableChatResp::InternalSerializeWithCachedSizesToArray(
            bool deterministic, ::google::protobuf::uint8* target) const {
            (void) deterministic; // Unused
            // @@protoc_insertion_point(serialize_to_array_start:game.base.TableChatResp)
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            // optional int32 code = 1;
            if (cached_has_bits & 0x00000001u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                    _internal_metadata_.unknown_fields(), target);
            }
            // @@protoc_insertion_point(serialize_to_array_end:game.base.TableChatResp)
            return target;
        }

        size_t TableChatResp::ByteSizeLong() const {
            // @@protoc_insertion_point(message_byte_size_start:game.base.TableChatResp)
            size_t total_size = 0;

            if (_internal_metadata_.have_unknown_fields()) {
                total_size +=
                    ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
                    _internal_metadata_.unknown_fields());
            }
            // optional int32 code = 1;
            if (has_code()) {
                total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::Int32Size(
                    this->code());
            }

            int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = cached_size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
            return total_size;
        }

        void TableChatResp::MergeFrom(const ::google::protobuf::Message& from) {
            // @@protoc_insertion_point(generalized_merge_from_start:game.base.TableChatResp)
            GOOGLE_DCHECK_NE(&from, this);
            const TableChatResp* source =
                ::google::protobuf::internal::DynamicCastToGenerated<const TableChatResp>(
                &from);
            if (source == NULL) {
                // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.base.TableChatResp)
                ::google::protobuf::internal::ReflectionOps::Merge(from, this);
            } else {
                // @@protoc_insertion_point(generalized_merge_from_cast_success:game.base.TableChatResp)
                MergeFrom(*source);
            }
        }

        void TableChatResp::MergeFrom(const TableChatResp& from) {
            // @@protoc_insertion_point(class_specific_merge_from_start:game.base.TableChatResp)
            GOOGLE_DCHECK_NE(&from, this);
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            if (from.has_code()) {
                set_code(from.code());
            }
        }

        void TableChatResp::CopyFrom(const ::google::protobuf::Message& from) {
            // @@protoc_insertion_point(generalized_copy_from_start:game.base.TableChatResp)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        void TableChatResp::CopyFrom(const TableChatResp& from) {
            // @@protoc_insertion_point(class_specific_copy_from_start:game.base.TableChatResp)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        bool TableChatResp::IsInitialized() const {
            return true;
        }

        void TableChatResp::Swap(TableChatResp* other) {
            if (other == this) return;
            InternalSwap(other);
        }
        void TableChatResp::InternalSwap(TableChatResp* other) {
            using std::swap;
            swap(code_, other->code_);
            swap(_has_bits_[0], other->_has_bits_[0]);
            _internal_metadata_.Swap(&other->_internal_metadata_);
            swap(_cached_size_, other->_cached_size_);
        }

        ::google::protobuf::Metadata TableChatResp::GetMetadata() const {
            protobuf_game_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
            return ::protobuf_game_5fbase_2eproto::file_level_metadata[kIndexInFileMessages];
        }


        // ===================================================================

        void UserActionNotify::InitAsDefaultInstance() {
            ::game::base::_UserActionNotify_default_instance_._instance.get_mutable()->user_ = const_cast<::game::base::User*>(
                ::game::base::User::internal_default_instance());
        }
#if !defined(_MSC_VER) || _MSC_VER >= 1900
        const int UserActionNotify::kActionFieldNumber;
        const int UserActionNotify::kUserFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

        UserActionNotify::UserActionNotify()
            : ::google::protobuf::Message(), _internal_metadata_(NULL) {
            if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
                ::protobuf_game_5fbase_2eproto::InitDefaultsUserActionNotify();
            }
            SharedCtor();
            // @@protoc_insertion_point(constructor:game.base.UserActionNotify)
        }
        UserActionNotify::UserActionNotify(const UserActionNotify& from)
            : ::google::protobuf::Message(),
            _internal_metadata_(NULL),
            _has_bits_(from._has_bits_),
            _cached_size_(0) {
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            if (from.has_user()) {
                user_ = new ::game::base::User(*from.user_);
            } else {
                user_ = NULL;
            }
            action_ = from.action_;
            // @@protoc_insertion_point(copy_constructor:game.base.UserActionNotify)
        }

        void UserActionNotify::SharedCtor() {
            _cached_size_ = 0;
            ::memset(&user_, 0, static_cast<size_t>(
                reinterpret_cast<char*>(&action_) -
                reinterpret_cast<char*>(&user_)) + sizeof(action_));
        }

        UserActionNotify::~UserActionNotify() {
            // @@protoc_insertion_point(destructor:game.base.UserActionNotify)
            SharedDtor();
        }

        void UserActionNotify::SharedDtor() {
            if (this != internal_default_instance()) delete user_;
        }

        void UserActionNotify::SetCachedSize(int size) const {
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
        }
        const ::google::protobuf::Descriptor* UserActionNotify::descriptor() {
            ::protobuf_game_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
            return ::protobuf_game_5fbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
        }

        const UserActionNotify& UserActionNotify::default_instance() {
            ::protobuf_game_5fbase_2eproto::InitDefaultsUserActionNotify();
            return *internal_default_instance();
        }

        UserActionNotify* UserActionNotify::New(::google::protobuf::Arena* arena) const {
            UserActionNotify* n = new UserActionNotify;
            if (arena != NULL) {
                arena->Own(n);
            }
            return n;
        }

        void UserActionNotify::Clear() {
            // @@protoc_insertion_point(message_clear_start:game.base.UserActionNotify)
            ::google::protobuf::uint32 cached_has_bits = 0;
            // Prevent compiler warnings about cached_has_bits being unused
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
                GOOGLE_DCHECK(user_ != NULL);
                user_->Clear();
            }
            action_ = 0;
            _has_bits_.Clear();
            _internal_metadata_.Clear();
        }

        bool UserActionNotify::MergePartialFromCodedStream(
            ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
            ::google::protobuf::uint32 tag;
            // @@protoc_insertion_point(parse_start:game.base.UserActionNotify)
            for (;;) {
                ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
                tag = p.first;
                if (!p.second) goto handle_unusual;
                switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
                    // optional int32 action = 1;
                    case 1: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
                            set_has_action();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &action_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // optional .game.base.User user = 2;
                    case 2: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
                            DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                                input, mutable_user()));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                    default: {
handle_unusual:
                        if (tag == 0) {
                            goto success;
                        }
                        DO_(::google::protobuf::internal::WireFormat::SkipField(
                            input, tag, _internal_metadata_.mutable_unknown_fields()));
                        break;
                    }
                }
            }
success:
            // @@protoc_insertion_point(parse_success:game.base.UserActionNotify)
            return true;
failure:
            // @@protoc_insertion_point(parse_failure:game.base.UserActionNotify)
            return false;
#undef DO_
        }

        void UserActionNotify::SerializeWithCachedSizes(
            ::google::protobuf::io::CodedOutputStream* output) const {
            // @@protoc_insertion_point(serialize_start:game.base.UserActionNotify)
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            // optional int32 action = 1;
            if (cached_has_bits & 0x00000002u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->action(), output);
            }

            // optional .game.base.User user = 2;
            if (cached_has_bits & 0x00000001u) {
                ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
                    2, *this->user_, output);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
                    _internal_metadata_.unknown_fields(), output);
            }
            // @@protoc_insertion_point(serialize_end:game.base.UserActionNotify)
        }

        ::google::protobuf::uint8* UserActionNotify::InternalSerializeWithCachedSizesToArray(
            bool deterministic, ::google::protobuf::uint8* target) const {
            (void) deterministic; // Unused
            // @@protoc_insertion_point(serialize_to_array_start:game.base.UserActionNotify)
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            // optional int32 action = 1;
            if (cached_has_bits & 0x00000002u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->action(), target);
            }

            // optional .game.base.User user = 2;
            if (cached_has_bits & 0x00000001u) {
                target = ::google::protobuf::internal::WireFormatLite::
                    InternalWriteMessageToArray(
                    2, *this->user_, deterministic, target);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                    _internal_metadata_.unknown_fields(), target);
            }
            // @@protoc_insertion_point(serialize_to_array_end:game.base.UserActionNotify)
            return target;
        }

        size_t UserActionNotify::ByteSizeLong() const {
            // @@protoc_insertion_point(message_byte_size_start:game.base.UserActionNotify)
            size_t total_size = 0;

            if (_internal_metadata_.have_unknown_fields()) {
                total_size +=
                    ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
                    _internal_metadata_.unknown_fields());
            }
            if (_has_bits_[0 / 32] & 3u) {
                // optional .game.base.User user = 2;
                if (has_user()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::MessageSize(
                        *this->user_);
                }

                // optional int32 action = 1;
                if (has_action()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::Int32Size(
                        this->action());
                }

            }
            int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = cached_size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
            return total_size;
        }

        void UserActionNotify::MergeFrom(const ::google::protobuf::Message& from) {
            // @@protoc_insertion_point(generalized_merge_from_start:game.base.UserActionNotify)
            GOOGLE_DCHECK_NE(&from, this);
            const UserActionNotify* source =
                ::google::protobuf::internal::DynamicCastToGenerated<const UserActionNotify>(
                &from);
            if (source == NULL) {
                // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.base.UserActionNotify)
                ::google::protobuf::internal::ReflectionOps::Merge(from, this);
            } else {
                // @@protoc_insertion_point(generalized_merge_from_cast_success:game.base.UserActionNotify)
                MergeFrom(*source);
            }
        }

        void UserActionNotify::MergeFrom(const UserActionNotify& from) {
            // @@protoc_insertion_point(class_specific_merge_from_start:game.base.UserActionNotify)
            GOOGLE_DCHECK_NE(&from, this);
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = from._has_bits_[0];
            if (cached_has_bits & 3u) {
                if (cached_has_bits & 0x00000001u) {
                    mutable_user()->::game::base::User::MergeFrom(from.user());
                }
                if (cached_has_bits & 0x00000002u) {
                    action_ = from.action_;
                }
                _has_bits_[0] |= cached_has_bits;
            }
        }

        void UserActionNotify::CopyFrom(const ::google::protobuf::Message& from) {
            // @@protoc_insertion_point(generalized_copy_from_start:game.base.UserActionNotify)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        void UserActionNotify::CopyFrom(const UserActionNotify& from) {
            // @@protoc_insertion_point(class_specific_copy_from_start:game.base.UserActionNotify)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        bool UserActionNotify::IsInitialized() const {
            return true;
        }

        void UserActionNotify::Swap(UserActionNotify* other) {
            if (other == this) return;
            InternalSwap(other);
        }
        void UserActionNotify::InternalSwap(UserActionNotify* other) {
            using std::swap;
            swap(user_, other->user_);
            swap(action_, other->action_);
            swap(_has_bits_[0], other->_has_bits_[0]);
            _internal_metadata_.Swap(&other->_internal_metadata_);
            swap(_cached_size_, other->_cached_size_);
        }

        ::google::protobuf::Metadata UserActionNotify::GetMetadata() const {
            protobuf_game_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
            return ::protobuf_game_5fbase_2eproto::file_level_metadata[kIndexInFileMessages];
        }


        // ===================================================================

        void CountdownStartNotify::InitAsDefaultInstance() {}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
        const int CountdownStartNotify::kTablenoFieldNumber;
        const int CountdownStartNotify::kCountdownSFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

        CountdownStartNotify::CountdownStartNotify()
            : ::google::protobuf::Message(), _internal_metadata_(NULL) {
            if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
                ::protobuf_game_5fbase_2eproto::InitDefaultsCountdownStartNotify();
            }
            SharedCtor();
            // @@protoc_insertion_point(constructor:game.base.CountdownStartNotify)
        }
        CountdownStartNotify::CountdownStartNotify(const CountdownStartNotify& from)
            : ::google::protobuf::Message(),
            _internal_metadata_(NULL),
            _has_bits_(from._has_bits_),
            _cached_size_(0) {
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            ::memcpy(&tableno_, &from.tableno_,
                     static_cast<size_t>(reinterpret_cast<char*>(&countdown_s_) -
                     reinterpret_cast<char*>(&tableno_)) + sizeof(countdown_s_));
            // @@protoc_insertion_point(copy_constructor:game.base.CountdownStartNotify)
        }

        void CountdownStartNotify::SharedCtor() {
            _cached_size_ = 0;
            ::memset(&tableno_, 0, static_cast<size_t>(
                reinterpret_cast<char*>(&countdown_s_) -
                reinterpret_cast<char*>(&tableno_)) + sizeof(countdown_s_));
        }

        CountdownStartNotify::~CountdownStartNotify() {
            // @@protoc_insertion_point(destructor:game.base.CountdownStartNotify)
            SharedDtor();
        }

        void CountdownStartNotify::SharedDtor() {}

        void CountdownStartNotify::SetCachedSize(int size) const {
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
        }
        const ::google::protobuf::Descriptor* CountdownStartNotify::descriptor() {
            ::protobuf_game_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
            return ::protobuf_game_5fbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
        }

        const CountdownStartNotify& CountdownStartNotify::default_instance() {
            ::protobuf_game_5fbase_2eproto::InitDefaultsCountdownStartNotify();
            return *internal_default_instance();
        }

        CountdownStartNotify* CountdownStartNotify::New(::google::protobuf::Arena* arena) const {
            CountdownStartNotify* n = new CountdownStartNotify;
            if (arena != NULL) {
                arena->Own(n);
            }
            return n;
        }

        void CountdownStartNotify::Clear() {
            // @@protoc_insertion_point(message_clear_start:game.base.CountdownStartNotify)
            ::google::protobuf::uint32 cached_has_bits = 0;
            // Prevent compiler warnings about cached_has_bits being unused
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            if (cached_has_bits & 3u) {
                ::memset(&tableno_, 0, static_cast<size_t>(
                    reinterpret_cast<char*>(&countdown_s_) -
                    reinterpret_cast<char*>(&tableno_)) + sizeof(countdown_s_));
            }
            _has_bits_.Clear();
            _internal_metadata_.Clear();
        }

        bool CountdownStartNotify::MergePartialFromCodedStream(
            ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
            ::google::protobuf::uint32 tag;
            // @@protoc_insertion_point(parse_start:game.base.CountdownStartNotify)
            for (;;) {
                ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
                tag = p.first;
                if (!p.second) goto handle_unusual;
                switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
                    // optional int32 tableno = 1;
                    case 1: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
                            set_has_tableno();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &tableno_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // optional int32 countdown_s = 2;
                    case 2: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
                            set_has_countdown_s();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &countdown_s_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                    default: {
handle_unusual:
                        if (tag == 0) {
                            goto success;
                        }
                        DO_(::google::protobuf::internal::WireFormat::SkipField(
                            input, tag, _internal_metadata_.mutable_unknown_fields()));
                        break;
                    }
                }
            }
success:
            // @@protoc_insertion_point(parse_success:game.base.CountdownStartNotify)
            return true;
failure:
            // @@protoc_insertion_point(parse_failure:game.base.CountdownStartNotify)
            return false;
#undef DO_
        }

        void CountdownStartNotify::SerializeWithCachedSizes(
            ::google::protobuf::io::CodedOutputStream* output) const {
            // @@protoc_insertion_point(serialize_start:game.base.CountdownStartNotify)
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            // optional int32 tableno = 1;
            if (cached_has_bits & 0x00000001u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tableno(), output);
            }

            // optional int32 countdown_s = 2;
            if (cached_has_bits & 0x00000002u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->countdown_s(), output);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
                    _internal_metadata_.unknown_fields(), output);
            }
            // @@protoc_insertion_point(serialize_end:game.base.CountdownStartNotify)
        }

        ::google::protobuf::uint8* CountdownStartNotify::InternalSerializeWithCachedSizesToArray(
            bool deterministic, ::google::protobuf::uint8* target) const {
            (void) deterministic; // Unused
            // @@protoc_insertion_point(serialize_to_array_start:game.base.CountdownStartNotify)
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            // optional int32 tableno = 1;
            if (cached_has_bits & 0x00000001u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tableno(), target);
            }

            // optional int32 countdown_s = 2;
            if (cached_has_bits & 0x00000002u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->countdown_s(), target);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                    _internal_metadata_.unknown_fields(), target);
            }
            // @@protoc_insertion_point(serialize_to_array_end:game.base.CountdownStartNotify)
            return target;
        }

        size_t CountdownStartNotify::ByteSizeLong() const {
            // @@protoc_insertion_point(message_byte_size_start:game.base.CountdownStartNotify)
            size_t total_size = 0;

            if (_internal_metadata_.have_unknown_fields()) {
                total_size +=
                    ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
                    _internal_metadata_.unknown_fields());
            }
            if (_has_bits_[0 / 32] & 3u) {
                // optional int32 tableno = 1;
                if (has_tableno()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::Int32Size(
                        this->tableno());
                }

                // optional int32 countdown_s = 2;
                if (has_countdown_s()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::Int32Size(
                        this->countdown_s());
                }

            }
            int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = cached_size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
            return total_size;
        }

        void CountdownStartNotify::MergeFrom(const ::google::protobuf::Message& from) {
            // @@protoc_insertion_point(generalized_merge_from_start:game.base.CountdownStartNotify)
            GOOGLE_DCHECK_NE(&from, this);
            const CountdownStartNotify* source =
                ::google::protobuf::internal::DynamicCastToGenerated<const CountdownStartNotify>(
                &from);
            if (source == NULL) {
                // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.base.CountdownStartNotify)
                ::google::protobuf::internal::ReflectionOps::Merge(from, this);
            } else {
                // @@protoc_insertion_point(generalized_merge_from_cast_success:game.base.CountdownStartNotify)
                MergeFrom(*source);
            }
        }

        void CountdownStartNotify::MergeFrom(const CountdownStartNotify& from) {
            // @@protoc_insertion_point(class_specific_merge_from_start:game.base.CountdownStartNotify)
            GOOGLE_DCHECK_NE(&from, this);
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = from._has_bits_[0];
            if (cached_has_bits & 3u) {
                if (cached_has_bits & 0x00000001u) {
                    tableno_ = from.tableno_;
                }
                if (cached_has_bits & 0x00000002u) {
                    countdown_s_ = from.countdown_s_;
                }
                _has_bits_[0] |= cached_has_bits;
            }
        }

        void CountdownStartNotify::CopyFrom(const ::google::protobuf::Message& from) {
            // @@protoc_insertion_point(generalized_copy_from_start:game.base.CountdownStartNotify)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        void CountdownStartNotify::CopyFrom(const CountdownStartNotify& from) {
            // @@protoc_insertion_point(class_specific_copy_from_start:game.base.CountdownStartNotify)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        bool CountdownStartNotify::IsInitialized() const {
            return true;
        }

        void CountdownStartNotify::Swap(CountdownStartNotify* other) {
            if (other == this) return;
            InternalSwap(other);
        }
        void CountdownStartNotify::InternalSwap(CountdownStartNotify* other) {
            using std::swap;
            swap(tableno_, other->tableno_);
            swap(countdown_s_, other->countdown_s_);
            swap(_has_bits_[0], other->_has_bits_[0]);
            _internal_metadata_.Swap(&other->_internal_metadata_);
            swap(_cached_size_, other->_cached_size_);
        }

        ::google::protobuf::Metadata CountdownStartNotify::GetMetadata() const {
            protobuf_game_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
            return ::protobuf_game_5fbase_2eproto::file_level_metadata[kIndexInFileMessages];
        }


        // ===================================================================

        void CountdownStopNotify::InitAsDefaultInstance() {}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
        const int CountdownStopNotify::kTablenoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

        CountdownStopNotify::CountdownStopNotify()
            : ::google::protobuf::Message(), _internal_metadata_(NULL) {
            if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
                ::protobuf_game_5fbase_2eproto::InitDefaultsCountdownStopNotify();
            }
            SharedCtor();
            // @@protoc_insertion_point(constructor:game.base.CountdownStopNotify)
        }
        CountdownStopNotify::CountdownStopNotify(const CountdownStopNotify& from)
            : ::google::protobuf::Message(),
            _internal_metadata_(NULL),
            _has_bits_(from._has_bits_),
            _cached_size_(0) {
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            tableno_ = from.tableno_;
            // @@protoc_insertion_point(copy_constructor:game.base.CountdownStopNotify)
        }

        void CountdownStopNotify::SharedCtor() {
            _cached_size_ = 0;
            tableno_ = 0;
        }

        CountdownStopNotify::~CountdownStopNotify() {
            // @@protoc_insertion_point(destructor:game.base.CountdownStopNotify)
            SharedDtor();
        }

        void CountdownStopNotify::SharedDtor() {}

        void CountdownStopNotify::SetCachedSize(int size) const {
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
        }
        const ::google::protobuf::Descriptor* CountdownStopNotify::descriptor() {
            ::protobuf_game_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
            return ::protobuf_game_5fbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
        }

        const CountdownStopNotify& CountdownStopNotify::default_instance() {
            ::protobuf_game_5fbase_2eproto::InitDefaultsCountdownStopNotify();
            return *internal_default_instance();
        }

        CountdownStopNotify* CountdownStopNotify::New(::google::protobuf::Arena* arena) const {
            CountdownStopNotify* n = new CountdownStopNotify;
            if (arena != NULL) {
                arena->Own(n);
            }
            return n;
        }

        void CountdownStopNotify::Clear() {
            // @@protoc_insertion_point(message_clear_start:game.base.CountdownStopNotify)
            ::google::protobuf::uint32 cached_has_bits = 0;
            // Prevent compiler warnings about cached_has_bits being unused
            (void) cached_has_bits;

            tableno_ = 0;
            _has_bits_.Clear();
            _internal_metadata_.Clear();
        }

        bool CountdownStopNotify::MergePartialFromCodedStream(
            ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
            ::google::protobuf::uint32 tag;
            // @@protoc_insertion_point(parse_start:game.base.CountdownStopNotify)
            for (;;) {
                ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
                tag = p.first;
                if (!p.second) goto handle_unusual;
                switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
                    // optional int32 tableno = 1;
                    case 1: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
                            set_has_tableno();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &tableno_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                    default: {
handle_unusual:
                        if (tag == 0) {
                            goto success;
                        }
                        DO_(::google::protobuf::internal::WireFormat::SkipField(
                            input, tag, _internal_metadata_.mutable_unknown_fields()));
                        break;
                    }
                }
            }
success:
            // @@protoc_insertion_point(parse_success:game.base.CountdownStopNotify)
            return true;
failure:
            // @@protoc_insertion_point(parse_failure:game.base.CountdownStopNotify)
            return false;
#undef DO_
        }

        void CountdownStopNotify::SerializeWithCachedSizes(
            ::google::protobuf::io::CodedOutputStream* output) const {
            // @@protoc_insertion_point(serialize_start:game.base.CountdownStopNotify)
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            // optional int32 tableno = 1;
            if (cached_has_bits & 0x00000001u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tableno(), output);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
                    _internal_metadata_.unknown_fields(), output);
            }
            // @@protoc_insertion_point(serialize_end:game.base.CountdownStopNotify)
        }

        ::google::protobuf::uint8* CountdownStopNotify::InternalSerializeWithCachedSizesToArray(
            bool deterministic, ::google::protobuf::uint8* target) const {
            (void) deterministic; // Unused
            // @@protoc_insertion_point(serialize_to_array_start:game.base.CountdownStopNotify)
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            // optional int32 tableno = 1;
            if (cached_has_bits & 0x00000001u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tableno(), target);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                    _internal_metadata_.unknown_fields(), target);
            }
            // @@protoc_insertion_point(serialize_to_array_end:game.base.CountdownStopNotify)
            return target;
        }

        size_t CountdownStopNotify::ByteSizeLong() const {
            // @@protoc_insertion_point(message_byte_size_start:game.base.CountdownStopNotify)
            size_t total_size = 0;

            if (_internal_metadata_.have_unknown_fields()) {
                total_size +=
                    ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
                    _internal_metadata_.unknown_fields());
            }
            // optional int32 tableno = 1;
            if (has_tableno()) {
                total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::Int32Size(
                    this->tableno());
            }

            int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = cached_size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
            return total_size;
        }

        void CountdownStopNotify::MergeFrom(const ::google::protobuf::Message& from) {
            // @@protoc_insertion_point(generalized_merge_from_start:game.base.CountdownStopNotify)
            GOOGLE_DCHECK_NE(&from, this);
            const CountdownStopNotify* source =
                ::google::protobuf::internal::DynamicCastToGenerated<const CountdownStopNotify>(
                &from);
            if (source == NULL) {
                // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.base.CountdownStopNotify)
                ::google::protobuf::internal::ReflectionOps::Merge(from, this);
            } else {
                // @@protoc_insertion_point(generalized_merge_from_cast_success:game.base.CountdownStopNotify)
                MergeFrom(*source);
            }
        }

        void CountdownStopNotify::MergeFrom(const CountdownStopNotify& from) {
            // @@protoc_insertion_point(class_specific_merge_from_start:game.base.CountdownStopNotify)
            GOOGLE_DCHECK_NE(&from, this);
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            if (from.has_tableno()) {
                set_tableno(from.tableno());
            }
        }

        void CountdownStopNotify::CopyFrom(const ::google::protobuf::Message& from) {
            // @@protoc_insertion_point(generalized_copy_from_start:game.base.CountdownStopNotify)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        void CountdownStopNotify::CopyFrom(const CountdownStopNotify& from) {
            // @@protoc_insertion_point(class_specific_copy_from_start:game.base.CountdownStopNotify)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        bool CountdownStopNotify::IsInitialized() const {
            return true;
        }

        void CountdownStopNotify::Swap(CountdownStopNotify* other) {
            if (other == this) return;
            InternalSwap(other);
        }
        void CountdownStopNotify::InternalSwap(CountdownStopNotify* other) {
            using std::swap;
            swap(tableno_, other->tableno_);
            swap(_has_bits_[0], other->_has_bits_[0]);
            _internal_metadata_.Swap(&other->_internal_metadata_);
            swap(_cached_size_, other->_cached_size_);
        }

        ::google::protobuf::Metadata CountdownStopNotify::GetMetadata() const {
            protobuf_game_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
            return ::protobuf_game_5fbase_2eproto::file_level_metadata[kIndexInFileMessages];
        }


        // ===================================================================

        void GameStartNotify::InitAsDefaultInstance() {}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
        const int GameStartNotify::kTablenoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

        GameStartNotify::GameStartNotify()
            : ::google::protobuf::Message(), _internal_metadata_(NULL) {
            if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
                ::protobuf_game_5fbase_2eproto::InitDefaultsGameStartNotify();
            }
            SharedCtor();
            // @@protoc_insertion_point(constructor:game.base.GameStartNotify)
        }
        GameStartNotify::GameStartNotify(const GameStartNotify& from)
            : ::google::protobuf::Message(),
            _internal_metadata_(NULL),
            _has_bits_(from._has_bits_),
            _cached_size_(0) {
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            tableno_ = from.tableno_;
            // @@protoc_insertion_point(copy_constructor:game.base.GameStartNotify)
        }

        void GameStartNotify::SharedCtor() {
            _cached_size_ = 0;
            tableno_ = 0;
        }

        GameStartNotify::~GameStartNotify() {
            // @@protoc_insertion_point(destructor:game.base.GameStartNotify)
            SharedDtor();
        }

        void GameStartNotify::SharedDtor() {}

        void GameStartNotify::SetCachedSize(int size) const {
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
        }
        const ::google::protobuf::Descriptor* GameStartNotify::descriptor() {
            ::protobuf_game_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
            return ::protobuf_game_5fbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
        }

        const GameStartNotify& GameStartNotify::default_instance() {
            ::protobuf_game_5fbase_2eproto::InitDefaultsGameStartNotify();
            return *internal_default_instance();
        }

        GameStartNotify* GameStartNotify::New(::google::protobuf::Arena* arena) const {
            GameStartNotify* n = new GameStartNotify;
            if (arena != NULL) {
                arena->Own(n);
            }
            return n;
        }

        void GameStartNotify::Clear() {
            // @@protoc_insertion_point(message_clear_start:game.base.GameStartNotify)
            ::google::protobuf::uint32 cached_has_bits = 0;
            // Prevent compiler warnings about cached_has_bits being unused
            (void) cached_has_bits;

            tableno_ = 0;
            _has_bits_.Clear();
            _internal_metadata_.Clear();
        }

        bool GameStartNotify::MergePartialFromCodedStream(
            ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
            ::google::protobuf::uint32 tag;
            // @@protoc_insertion_point(parse_start:game.base.GameStartNotify)
            for (;;) {
                ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
                tag = p.first;
                if (!p.second) goto handle_unusual;
                switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
                    // optional int32 tableno = 1;
                    case 1: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
                            set_has_tableno();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &tableno_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                    default: {
handle_unusual:
                        if (tag == 0) {
                            goto success;
                        }
                        DO_(::google::protobuf::internal::WireFormat::SkipField(
                            input, tag, _internal_metadata_.mutable_unknown_fields()));
                        break;
                    }
                }
            }
success:
            // @@protoc_insertion_point(parse_success:game.base.GameStartNotify)
            return true;
failure:
            // @@protoc_insertion_point(parse_failure:game.base.GameStartNotify)
            return false;
#undef DO_
        }

        void GameStartNotify::SerializeWithCachedSizes(
            ::google::protobuf::io::CodedOutputStream* output) const {
            // @@protoc_insertion_point(serialize_start:game.base.GameStartNotify)
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            // optional int32 tableno = 1;
            if (cached_has_bits & 0x00000001u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tableno(), output);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
                    _internal_metadata_.unknown_fields(), output);
            }
            // @@protoc_insertion_point(serialize_end:game.base.GameStartNotify)
        }

        ::google::protobuf::uint8* GameStartNotify::InternalSerializeWithCachedSizesToArray(
            bool deterministic, ::google::protobuf::uint8* target) const {
            (void) deterministic; // Unused
            // @@protoc_insertion_point(serialize_to_array_start:game.base.GameStartNotify)
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            // optional int32 tableno = 1;
            if (cached_has_bits & 0x00000001u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tableno(), target);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                    _internal_metadata_.unknown_fields(), target);
            }
            // @@protoc_insertion_point(serialize_to_array_end:game.base.GameStartNotify)
            return target;
        }

        size_t GameStartNotify::ByteSizeLong() const {
            // @@protoc_insertion_point(message_byte_size_start:game.base.GameStartNotify)
            size_t total_size = 0;

            if (_internal_metadata_.have_unknown_fields()) {
                total_size +=
                    ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
                    _internal_metadata_.unknown_fields());
            }
            // optional int32 tableno = 1;
            if (has_tableno()) {
                total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::Int32Size(
                    this->tableno());
            }

            int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = cached_size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
            return total_size;
        }

        void GameStartNotify::MergeFrom(const ::google::protobuf::Message& from) {
            // @@protoc_insertion_point(generalized_merge_from_start:game.base.GameStartNotify)
            GOOGLE_DCHECK_NE(&from, this);
            const GameStartNotify* source =
                ::google::protobuf::internal::DynamicCastToGenerated<const GameStartNotify>(
                &from);
            if (source == NULL) {
                // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.base.GameStartNotify)
                ::google::protobuf::internal::ReflectionOps::Merge(from, this);
            } else {
                // @@protoc_insertion_point(generalized_merge_from_cast_success:game.base.GameStartNotify)
                MergeFrom(*source);
            }
        }

        void GameStartNotify::MergeFrom(const GameStartNotify& from) {
            // @@protoc_insertion_point(class_specific_merge_from_start:game.base.GameStartNotify)
            GOOGLE_DCHECK_NE(&from, this);
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            if (from.has_tableno()) {
                set_tableno(from.tableno());
            }
        }

        void GameStartNotify::CopyFrom(const ::google::protobuf::Message& from) {
            // @@protoc_insertion_point(generalized_copy_from_start:game.base.GameStartNotify)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        void GameStartNotify::CopyFrom(const GameStartNotify& from) {
            // @@protoc_insertion_point(class_specific_copy_from_start:game.base.GameStartNotify)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        bool GameStartNotify::IsInitialized() const {
            return true;
        }

        void GameStartNotify::Swap(GameStartNotify* other) {
            if (other == this) return;
            InternalSwap(other);
        }
        void GameStartNotify::InternalSwap(GameStartNotify* other) {
            using std::swap;
            swap(tableno_, other->tableno_);
            swap(_has_bits_[0], other->_has_bits_[0]);
            _internal_metadata_.Swap(&other->_internal_metadata_);
            swap(_cached_size_, other->_cached_size_);
        }

        ::google::protobuf::Metadata GameStartNotify::GetMetadata() const {
            protobuf_game_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
            return ::protobuf_game_5fbase_2eproto::file_level_metadata[kIndexInFileMessages];
        }


        // ===================================================================

        void PlayerGiveupNotify::InitAsDefaultInstance() {}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
        const int PlayerGiveupNotify::kUseridFieldNumber;
        const int PlayerGiveupNotify::kChairnoFieldNumber;
        const int PlayerGiveupNotify::kTablenoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

        PlayerGiveupNotify::PlayerGiveupNotify()
            : ::google::protobuf::Message(), _internal_metadata_(NULL) {
            if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
                ::protobuf_game_5fbase_2eproto::InitDefaultsPlayerGiveupNotify();
            }
            SharedCtor();
            // @@protoc_insertion_point(constructor:game.base.PlayerGiveupNotify)
        }
        PlayerGiveupNotify::PlayerGiveupNotify(const PlayerGiveupNotify& from)
            : ::google::protobuf::Message(),
            _internal_metadata_(NULL),
            _has_bits_(from._has_bits_),
            _cached_size_(0) {
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            ::memcpy(&userid_, &from.userid_,
                     static_cast<size_t>(reinterpret_cast<char*>(&tableno_) -
                     reinterpret_cast<char*>(&userid_)) + sizeof(tableno_));
            // @@protoc_insertion_point(copy_constructor:game.base.PlayerGiveupNotify)
        }

        void PlayerGiveupNotify::SharedCtor() {
            _cached_size_ = 0;
            ::memset(&userid_, 0, static_cast<size_t>(
                reinterpret_cast<char*>(&tableno_) -
                reinterpret_cast<char*>(&userid_)) + sizeof(tableno_));
        }

        PlayerGiveupNotify::~PlayerGiveupNotify() {
            // @@protoc_insertion_point(destructor:game.base.PlayerGiveupNotify)
            SharedDtor();
        }

        void PlayerGiveupNotify::SharedDtor() {}

        void PlayerGiveupNotify::SetCachedSize(int size) const {
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
        }
        const ::google::protobuf::Descriptor* PlayerGiveupNotify::descriptor() {
            ::protobuf_game_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
            return ::protobuf_game_5fbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
        }

        const PlayerGiveupNotify& PlayerGiveupNotify::default_instance() {
            ::protobuf_game_5fbase_2eproto::InitDefaultsPlayerGiveupNotify();
            return *internal_default_instance();
        }

        PlayerGiveupNotify* PlayerGiveupNotify::New(::google::protobuf::Arena* arena) const {
            PlayerGiveupNotify* n = new PlayerGiveupNotify;
            if (arena != NULL) {
                arena->Own(n);
            }
            return n;
        }

        void PlayerGiveupNotify::Clear() {
            // @@protoc_insertion_point(message_clear_start:game.base.PlayerGiveupNotify)
            ::google::protobuf::uint32 cached_has_bits = 0;
            // Prevent compiler warnings about cached_has_bits being unused
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            if (cached_has_bits & 7u) {
                ::memset(&userid_, 0, static_cast<size_t>(
                    reinterpret_cast<char*>(&tableno_) -
                    reinterpret_cast<char*>(&userid_)) + sizeof(tableno_));
            }
            _has_bits_.Clear();
            _internal_metadata_.Clear();
        }

        bool PlayerGiveupNotify::MergePartialFromCodedStream(
            ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
            ::google::protobuf::uint32 tag;
            // @@protoc_insertion_point(parse_start:game.base.PlayerGiveupNotify)
            for (;;) {
                ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
                tag = p.first;
                if (!p.second) goto handle_unusual;
                switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
                    // optional int32 userid = 1;
                    case 1: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
                            set_has_userid();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &userid_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // optional int32 chairno = 2;
                    case 2: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
                            set_has_chairno();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &chairno_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // optional int32 tableno = 3;
                    case 3: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
                            set_has_tableno();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &tableno_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                    default: {
handle_unusual:
                        if (tag == 0) {
                            goto success;
                        }
                        DO_(::google::protobuf::internal::WireFormat::SkipField(
                            input, tag, _internal_metadata_.mutable_unknown_fields()));
                        break;
                    }
                }
            }
success:
            // @@protoc_insertion_point(parse_success:game.base.PlayerGiveupNotify)
            return true;
failure:
            // @@protoc_insertion_point(parse_failure:game.base.PlayerGiveupNotify)
            return false;
#undef DO_
        }

        void PlayerGiveupNotify::SerializeWithCachedSizes(
            ::google::protobuf::io::CodedOutputStream* output) const {
            // @@protoc_insertion_point(serialize_start:game.base.PlayerGiveupNotify)
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            // optional int32 userid = 1;
            if (cached_has_bits & 0x00000001u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
            }

            // optional int32 chairno = 2;
            if (cached_has_bits & 0x00000002u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->chairno(), output);
            }

            // optional int32 tableno = 3;
            if (cached_has_bits & 0x00000004u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->tableno(), output);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
                    _internal_metadata_.unknown_fields(), output);
            }
            // @@protoc_insertion_point(serialize_end:game.base.PlayerGiveupNotify)
        }

        ::google::protobuf::uint8* PlayerGiveupNotify::InternalSerializeWithCachedSizesToArray(
            bool deterministic, ::google::protobuf::uint8* target) const {
            (void) deterministic; // Unused
            // @@protoc_insertion_point(serialize_to_array_start:game.base.PlayerGiveupNotify)
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            // optional int32 userid = 1;
            if (cached_has_bits & 0x00000001u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
            }

            // optional int32 chairno = 2;
            if (cached_has_bits & 0x00000002u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->chairno(), target);
            }

            // optional int32 tableno = 3;
            if (cached_has_bits & 0x00000004u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->tableno(), target);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                    _internal_metadata_.unknown_fields(), target);
            }
            // @@protoc_insertion_point(serialize_to_array_end:game.base.PlayerGiveupNotify)
            return target;
        }

        size_t PlayerGiveupNotify::ByteSizeLong() const {
            // @@protoc_insertion_point(message_byte_size_start:game.base.PlayerGiveupNotify)
            size_t total_size = 0;

            if (_internal_metadata_.have_unknown_fields()) {
                total_size +=
                    ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
                    _internal_metadata_.unknown_fields());
            }
            if (_has_bits_[0 / 32] & 7u) {
                // optional int32 userid = 1;
                if (has_userid()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::Int32Size(
                        this->userid());
                }

                // optional int32 chairno = 2;
                if (has_chairno()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::Int32Size(
                        this->chairno());
                }

                // optional int32 tableno = 3;
                if (has_tableno()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::Int32Size(
                        this->tableno());
                }

            }
            int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = cached_size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
            return total_size;
        }

        void PlayerGiveupNotify::MergeFrom(const ::google::protobuf::Message& from) {
            // @@protoc_insertion_point(generalized_merge_from_start:game.base.PlayerGiveupNotify)
            GOOGLE_DCHECK_NE(&from, this);
            const PlayerGiveupNotify* source =
                ::google::protobuf::internal::DynamicCastToGenerated<const PlayerGiveupNotify>(
                &from);
            if (source == NULL) {
                // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.base.PlayerGiveupNotify)
                ::google::protobuf::internal::ReflectionOps::Merge(from, this);
            } else {
                // @@protoc_insertion_point(generalized_merge_from_cast_success:game.base.PlayerGiveupNotify)
                MergeFrom(*source);
            }
        }

        void PlayerGiveupNotify::MergeFrom(const PlayerGiveupNotify& from) {
            // @@protoc_insertion_point(class_specific_merge_from_start:game.base.PlayerGiveupNotify)
            GOOGLE_DCHECK_NE(&from, this);
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = from._has_bits_[0];
            if (cached_has_bits & 7u) {
                if (cached_has_bits & 0x00000001u) {
                    userid_ = from.userid_;
                }
                if (cached_has_bits & 0x00000002u) {
                    chairno_ = from.chairno_;
                }
                if (cached_has_bits & 0x00000004u) {
                    tableno_ = from.tableno_;
                }
                _has_bits_[0] |= cached_has_bits;
            }
        }

        void PlayerGiveupNotify::CopyFrom(const ::google::protobuf::Message& from) {
            // @@protoc_insertion_point(generalized_copy_from_start:game.base.PlayerGiveupNotify)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        void PlayerGiveupNotify::CopyFrom(const PlayerGiveupNotify& from) {
            // @@protoc_insertion_point(class_specific_copy_from_start:game.base.PlayerGiveupNotify)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        bool PlayerGiveupNotify::IsInitialized() const {
            return true;
        }

        void PlayerGiveupNotify::Swap(PlayerGiveupNotify* other) {
            if (other == this) return;
            InternalSwap(other);
        }
        void PlayerGiveupNotify::InternalSwap(PlayerGiveupNotify* other) {
            using std::swap;
            swap(userid_, other->userid_);
            swap(chairno_, other->chairno_);
            swap(tableno_, other->tableno_);
            swap(_has_bits_[0], other->_has_bits_[0]);
            _internal_metadata_.Swap(&other->_internal_metadata_);
            swap(_cached_size_, other->_cached_size_);
        }

        ::google::protobuf::Metadata PlayerGiveupNotify::GetMetadata() const {
            protobuf_game_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
            return ::protobuf_game_5fbase_2eproto::file_level_metadata[kIndexInFileMessages];
        }


        // ===================================================================

        void StartGameReq::InitAsDefaultInstance() {}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
        const int StartGameReq::kRoomidFieldNumber;
        const int StartGameReq::kTablenoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

        StartGameReq::StartGameReq()
            : ::google::protobuf::Message(), _internal_metadata_(NULL) {
            if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
                ::protobuf_game_5fbase_2eproto::InitDefaultsStartGameReq();
            }
            SharedCtor();
            // @@protoc_insertion_point(constructor:game.base.StartGameReq)
        }
        StartGameReq::StartGameReq(const StartGameReq& from)
            : ::google::protobuf::Message(),
            _internal_metadata_(NULL),
            _has_bits_(from._has_bits_),
            _cached_size_(0) {
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            ::memcpy(&roomid_, &from.roomid_,
                     static_cast<size_t>(reinterpret_cast<char*>(&tableno_) -
                     reinterpret_cast<char*>(&roomid_)) + sizeof(tableno_));
            // @@protoc_insertion_point(copy_constructor:game.base.StartGameReq)
        }

        void StartGameReq::SharedCtor() {
            _cached_size_ = 0;
            ::memset(&roomid_, 0, static_cast<size_t>(
                reinterpret_cast<char*>(&tableno_) -
                reinterpret_cast<char*>(&roomid_)) + sizeof(tableno_));
        }

        StartGameReq::~StartGameReq() {
            // @@protoc_insertion_point(destructor:game.base.StartGameReq)
            SharedDtor();
        }

        void StartGameReq::SharedDtor() {}

        void StartGameReq::SetCachedSize(int size) const {
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
        }
        const ::google::protobuf::Descriptor* StartGameReq::descriptor() {
            ::protobuf_game_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
            return ::protobuf_game_5fbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
        }

        const StartGameReq& StartGameReq::default_instance() {
            ::protobuf_game_5fbase_2eproto::InitDefaultsStartGameReq();
            return *internal_default_instance();
        }

        StartGameReq* StartGameReq::New(::google::protobuf::Arena* arena) const {
            StartGameReq* n = new StartGameReq;
            if (arena != NULL) {
                arena->Own(n);
            }
            return n;
        }

        void StartGameReq::Clear() {
            // @@protoc_insertion_point(message_clear_start:game.base.StartGameReq)
            ::google::protobuf::uint32 cached_has_bits = 0;
            // Prevent compiler warnings about cached_has_bits being unused
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            if (cached_has_bits & 3u) {
                ::memset(&roomid_, 0, static_cast<size_t>(
                    reinterpret_cast<char*>(&tableno_) -
                    reinterpret_cast<char*>(&roomid_)) + sizeof(tableno_));
            }
            _has_bits_.Clear();
            _internal_metadata_.Clear();
        }

        bool StartGameReq::MergePartialFromCodedStream(
            ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
            ::google::protobuf::uint32 tag;
            // @@protoc_insertion_point(parse_start:game.base.StartGameReq)
            for (;;) {
                ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
                tag = p.first;
                if (!p.second) goto handle_unusual;
                switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
                    // optional int32 roomid = 1;
                    case 1: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
                            set_has_roomid();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &roomid_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // optional int32 tableno = 2;
                    case 2: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
                            set_has_tableno();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &tableno_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                    default: {
handle_unusual:
                        if (tag == 0) {
                            goto success;
                        }
                        DO_(::google::protobuf::internal::WireFormat::SkipField(
                            input, tag, _internal_metadata_.mutable_unknown_fields()));
                        break;
                    }
                }
            }
success:
            // @@protoc_insertion_point(parse_success:game.base.StartGameReq)
            return true;
failure:
            // @@protoc_insertion_point(parse_failure:game.base.StartGameReq)
            return false;
#undef DO_
        }

        void StartGameReq::SerializeWithCachedSizes(
            ::google::protobuf::io::CodedOutputStream* output) const {
            // @@protoc_insertion_point(serialize_start:game.base.StartGameReq)
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            // optional int32 roomid = 1;
            if (cached_has_bits & 0x00000001u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
            }

            // optional int32 tableno = 2;
            if (cached_has_bits & 0x00000002u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tableno(), output);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
                    _internal_metadata_.unknown_fields(), output);
            }
            // @@protoc_insertion_point(serialize_end:game.base.StartGameReq)
        }

        ::google::protobuf::uint8* StartGameReq::InternalSerializeWithCachedSizesToArray(
            bool deterministic, ::google::protobuf::uint8* target) const {
            (void) deterministic; // Unused
            // @@protoc_insertion_point(serialize_to_array_start:game.base.StartGameReq)
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            // optional int32 roomid = 1;
            if (cached_has_bits & 0x00000001u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
            }

            // optional int32 tableno = 2;
            if (cached_has_bits & 0x00000002u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tableno(), target);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                    _internal_metadata_.unknown_fields(), target);
            }
            // @@protoc_insertion_point(serialize_to_array_end:game.base.StartGameReq)
            return target;
        }

        size_t StartGameReq::ByteSizeLong() const {
            // @@protoc_insertion_point(message_byte_size_start:game.base.StartGameReq)
            size_t total_size = 0;

            if (_internal_metadata_.have_unknown_fields()) {
                total_size +=
                    ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
                    _internal_metadata_.unknown_fields());
            }
            if (_has_bits_[0 / 32] & 3u) {
                // optional int32 roomid = 1;
                if (has_roomid()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::Int32Size(
                        this->roomid());
                }

                // optional int32 tableno = 2;
                if (has_tableno()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::Int32Size(
                        this->tableno());
                }

            }
            int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = cached_size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
            return total_size;
        }

        void StartGameReq::MergeFrom(const ::google::protobuf::Message& from) {
            // @@protoc_insertion_point(generalized_merge_from_start:game.base.StartGameReq)
            GOOGLE_DCHECK_NE(&from, this);
            const StartGameReq* source =
                ::google::protobuf::internal::DynamicCastToGenerated<const StartGameReq>(
                &from);
            if (source == NULL) {
                // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.base.StartGameReq)
                ::google::protobuf::internal::ReflectionOps::Merge(from, this);
            } else {
                // @@protoc_insertion_point(generalized_merge_from_cast_success:game.base.StartGameReq)
                MergeFrom(*source);
            }
        }

        void StartGameReq::MergeFrom(const StartGameReq& from) {
            // @@protoc_insertion_point(class_specific_merge_from_start:game.base.StartGameReq)
            GOOGLE_DCHECK_NE(&from, this);
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = from._has_bits_[0];
            if (cached_has_bits & 3u) {
                if (cached_has_bits & 0x00000001u) {
                    roomid_ = from.roomid_;
                }
                if (cached_has_bits & 0x00000002u) {
                    tableno_ = from.tableno_;
                }
                _has_bits_[0] |= cached_has_bits;
            }
        }

        void StartGameReq::CopyFrom(const ::google::protobuf::Message& from) {
            // @@protoc_insertion_point(generalized_copy_from_start:game.base.StartGameReq)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        void StartGameReq::CopyFrom(const StartGameReq& from) {
            // @@protoc_insertion_point(class_specific_copy_from_start:game.base.StartGameReq)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        bool StartGameReq::IsInitialized() const {
            return true;
        }

        void StartGameReq::Swap(StartGameReq* other) {
            if (other == this) return;
            InternalSwap(other);
        }
        void StartGameReq::InternalSwap(StartGameReq* other) {
            using std::swap;
            swap(roomid_, other->roomid_);
            swap(tableno_, other->tableno_);
            swap(_has_bits_[0], other->_has_bits_[0]);
            _internal_metadata_.Swap(&other->_internal_metadata_);
            swap(_cached_size_, other->_cached_size_);
        }

        ::google::protobuf::Metadata StartGameReq::GetMetadata() const {
            protobuf_game_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
            return ::protobuf_game_5fbase_2eproto::file_level_metadata[kIndexInFileMessages];
        }


        // ===================================================================

        void GameResultNotify::InitAsDefaultInstance() {
            ::game::base::_GameResultNotify_default_instance_._instance.get_mutable()->custom_data_ = const_cast<::game::base::BytesData*>(
                ::game::base::BytesData::internal_default_instance());
        }
#if !defined(_MSC_VER) || _MSC_VER >= 1900
        const int GameResultNotify::kTablenoFieldNumber;
        const int GameResultNotify::kBoutCountFieldNumber;
        const int GameResultNotify::kBankerChairFieldNumber;
        const int GameResultNotify::kBaseDepositFieldNumber;
        const int GameResultNotify::kUserResultsFieldNumber;
        const int GameResultNotify::kCustomDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

        GameResultNotify::GameResultNotify()
            : ::google::protobuf::Message(), _internal_metadata_(NULL) {
            if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
                ::protobuf_game_5fbase_2eproto::InitDefaultsGameResultNotify();
            }
            SharedCtor();
            // @@protoc_insertion_point(constructor:game.base.GameResultNotify)
        }
        GameResultNotify::GameResultNotify(const GameResultNotify& from)
            : ::google::protobuf::Message(),
            _internal_metadata_(NULL),
            _has_bits_(from._has_bits_),
            _cached_size_(0),
            user_results_(from.user_results_) {
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            if (from.has_custom_data()) {
                custom_data_ = new ::game::base::BytesData(*from.custom_data_);
            } else {
                custom_data_ = NULL;
            }
            ::memcpy(&tableno_, &from.tableno_,
                     static_cast<size_t>(reinterpret_cast<char*>(&banker_chair_) -
                     reinterpret_cast<char*>(&tableno_)) + sizeof(banker_chair_));
            // @@protoc_insertion_point(copy_constructor:game.base.GameResultNotify)
        }

        void GameResultNotify::SharedCtor() {
            _cached_size_ = 0;
            ::memset(&custom_data_, 0, static_cast<size_t>(
                reinterpret_cast<char*>(&banker_chair_) -
                reinterpret_cast<char*>(&custom_data_)) + sizeof(banker_chair_));
        }

        GameResultNotify::~GameResultNotify() {
            // @@protoc_insertion_point(destructor:game.base.GameResultNotify)
            SharedDtor();
        }

        void GameResultNotify::SharedDtor() {
            if (this != internal_default_instance()) delete custom_data_;
        }

        void GameResultNotify::SetCachedSize(int size) const {
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
        }
        const ::google::protobuf::Descriptor* GameResultNotify::descriptor() {
            ::protobuf_game_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
            return ::protobuf_game_5fbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
        }

        const GameResultNotify& GameResultNotify::default_instance() {
            ::protobuf_game_5fbase_2eproto::InitDefaultsGameResultNotify();
            return *internal_default_instance();
        }

        GameResultNotify* GameResultNotify::New(::google::protobuf::Arena* arena) const {
            GameResultNotify* n = new GameResultNotify;
            if (arena != NULL) {
                arena->Own(n);
            }
            return n;
        }

        void GameResultNotify::Clear() {
            // @@protoc_insertion_point(message_clear_start:game.base.GameResultNotify)
            ::google::protobuf::uint32 cached_has_bits = 0;
            // Prevent compiler warnings about cached_has_bits being unused
            (void) cached_has_bits;

            user_results_.Clear();
            cached_has_bits = _has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
                GOOGLE_DCHECK(custom_data_ != NULL);
                custom_data_->Clear();
            }
            if (cached_has_bits & 30u) {
                ::memset(&tableno_, 0, static_cast<size_t>(
                    reinterpret_cast<char*>(&banker_chair_) -
                    reinterpret_cast<char*>(&tableno_)) + sizeof(banker_chair_));
            }
            _has_bits_.Clear();
            _internal_metadata_.Clear();
        }

        bool GameResultNotify::MergePartialFromCodedStream(
            ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
            ::google::protobuf::uint32 tag;
            // @@protoc_insertion_point(parse_start:game.base.GameResultNotify)
            for (;;) {
                ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
                tag = p.first;
                if (!p.second) goto handle_unusual;
                switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
                    // optional int32 tableno = 1;
                    case 1: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
                            set_has_tableno();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &tableno_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // optional int32 bout_count = 2;
                    case 2: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
                            set_has_bout_count();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &bout_count_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // optional int32 banker_chair = 3;
                    case 3: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
                            set_has_banker_chair();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &banker_chair_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // optional int64 base_deposit = 4;
                    case 4: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
                            set_has_base_deposit();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                                input, &base_deposit_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // repeated .game.base.UserResult user_results = 5;
                    case 5: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
                            DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_user_results()));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // optional .game.base.BytesData custom_data = 6;
                    case 6: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
                            DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                                input, mutable_custom_data()));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                    default: {
handle_unusual:
                        if (tag == 0) {
                            goto success;
                        }
                        DO_(::google::protobuf::internal::WireFormat::SkipField(
                            input, tag, _internal_metadata_.mutable_unknown_fields()));
                        break;
                    }
                }
            }
success:
            // @@protoc_insertion_point(parse_success:game.base.GameResultNotify)
            return true;
failure:
            // @@protoc_insertion_point(parse_failure:game.base.GameResultNotify)
            return false;
#undef DO_
        }

        void GameResultNotify::SerializeWithCachedSizes(
            ::google::protobuf::io::CodedOutputStream* output) const {
            // @@protoc_insertion_point(serialize_start:game.base.GameResultNotify)
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            // optional int32 tableno = 1;
            if (cached_has_bits & 0x00000002u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tableno(), output);
            }

            // optional int32 bout_count = 2;
            if (cached_has_bits & 0x00000004u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bout_count(), output);
            }

            // optional int32 banker_chair = 3;
            if (cached_has_bits & 0x00000010u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->banker_chair(), output);
            }

            // optional int64 base_deposit = 4;
            if (cached_has_bits & 0x00000008u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->base_deposit(), output);
            }

            // repeated .game.base.UserResult user_results = 5;
            for (unsigned int i = 0,
                 n = static_cast<unsigned int>(this->user_results_size()); i < n; i++) {
                ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
                    5, this->user_results(static_cast<int>(i)), output);
            }

            // optional .game.base.BytesData custom_data = 6;
            if (cached_has_bits & 0x00000001u) {
                ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
                    6, *this->custom_data_, output);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
                    _internal_metadata_.unknown_fields(), output);
            }
            // @@protoc_insertion_point(serialize_end:game.base.GameResultNotify)
        }

        ::google::protobuf::uint8* GameResultNotify::InternalSerializeWithCachedSizesToArray(
            bool deterministic, ::google::protobuf::uint8* target) const {
            (void) deterministic; // Unused
            // @@protoc_insertion_point(serialize_to_array_start:game.base.GameResultNotify)
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            // optional int32 tableno = 1;
            if (cached_has_bits & 0x00000002u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tableno(), target);
            }

            // optional int32 bout_count = 2;
            if (cached_has_bits & 0x00000004u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->bout_count(), target);
            }

            // optional int32 banker_chair = 3;
            if (cached_has_bits & 0x00000010u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->banker_chair(), target);
            }

            // optional int64 base_deposit = 4;
            if (cached_has_bits & 0x00000008u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->base_deposit(), target);
            }

            // repeated .game.base.UserResult user_results = 5;
            for (unsigned int i = 0,
                 n = static_cast<unsigned int>(this->user_results_size()); i < n; i++) {
                target = ::google::protobuf::internal::WireFormatLite::
                    InternalWriteMessageToArray(
                    5, this->user_results(static_cast<int>(i)), deterministic, target);
            }

            // optional .game.base.BytesData custom_data = 6;
            if (cached_has_bits & 0x00000001u) {
                target = ::google::protobuf::internal::WireFormatLite::
                    InternalWriteMessageToArray(
                    6, *this->custom_data_, deterministic, target);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                    _internal_metadata_.unknown_fields(), target);
            }
            // @@protoc_insertion_point(serialize_to_array_end:game.base.GameResultNotify)
            return target;
        }

        size_t GameResultNotify::ByteSizeLong() const {
            // @@protoc_insertion_point(message_byte_size_start:game.base.GameResultNotify)
            size_t total_size = 0;

            if (_internal_metadata_.have_unknown_fields()) {
                total_size +=
                    ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
                    _internal_metadata_.unknown_fields());
            }
            // repeated .game.base.UserResult user_results = 5;
  {
      unsigned int count = static_cast<unsigned int>(this->user_results_size());
      total_size += 1UL * count;
      for (unsigned int i = 0; i < count; i++) {
          total_size +=
              ::google::protobuf::internal::WireFormatLite::MessageSize(
              this->user_results(static_cast<int>(i)));
      }
  }

  if (_has_bits_[0 / 32] & 31u) {
      // optional .game.base.BytesData custom_data = 6;
      if (has_custom_data()) {
          total_size += 1 +
              ::google::protobuf::internal::WireFormatLite::MessageSize(
              *this->custom_data_);
      }

      // optional int32 tableno = 1;
      if (has_tableno()) {
          total_size += 1 +
              ::google::protobuf::internal::WireFormatLite::Int32Size(
              this->tableno());
      }

      // optional int32 bout_count = 2;
      if (has_bout_count()) {
          total_size += 1 +
              ::google::protobuf::internal::WireFormatLite::Int32Size(
              this->bout_count());
      }

      // optional int64 base_deposit = 4;
      if (has_base_deposit()) {
          total_size += 1 +
              ::google::protobuf::internal::WireFormatLite::Int64Size(
              this->base_deposit());
      }

      // optional int32 banker_chair = 3;
      if (has_banker_chair()) {
          total_size += 1 +
              ::google::protobuf::internal::WireFormatLite::Int32Size(
              this->banker_chair());
      }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
        }

        void GameResultNotify::MergeFrom(const ::google::protobuf::Message& from) {
            // @@protoc_insertion_point(generalized_merge_from_start:game.base.GameResultNotify)
            GOOGLE_DCHECK_NE(&from, this);
            const GameResultNotify* source =
                ::google::protobuf::internal::DynamicCastToGenerated<const GameResultNotify>(
                &from);
            if (source == NULL) {
                // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.base.GameResultNotify)
                ::google::protobuf::internal::ReflectionOps::Merge(from, this);
            } else {
                // @@protoc_insertion_point(generalized_merge_from_cast_success:game.base.GameResultNotify)
                MergeFrom(*source);
            }
        }

        void GameResultNotify::MergeFrom(const GameResultNotify& from) {
            // @@protoc_insertion_point(class_specific_merge_from_start:game.base.GameResultNotify)
            GOOGLE_DCHECK_NE(&from, this);
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            user_results_.MergeFrom(from.user_results_);
            cached_has_bits = from._has_bits_[0];
            if (cached_has_bits & 31u) {
                if (cached_has_bits & 0x00000001u) {
                    mutable_custom_data()->::game::base::BytesData::MergeFrom(from.custom_data());
                }
                if (cached_has_bits & 0x00000002u) {
                    tableno_ = from.tableno_;
                }
                if (cached_has_bits & 0x00000004u) {
                    bout_count_ = from.bout_count_;
                }
                if (cached_has_bits & 0x00000008u) {
                    base_deposit_ = from.base_deposit_;
                }
                if (cached_has_bits & 0x00000010u) {
                    banker_chair_ = from.banker_chair_;
                }
                _has_bits_[0] |= cached_has_bits;
            }
        }

        void GameResultNotify::CopyFrom(const ::google::protobuf::Message& from) {
            // @@protoc_insertion_point(generalized_copy_from_start:game.base.GameResultNotify)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        void GameResultNotify::CopyFrom(const GameResultNotify& from) {
            // @@protoc_insertion_point(class_specific_copy_from_start:game.base.GameResultNotify)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        bool GameResultNotify::IsInitialized() const {
            return true;
        }

        void GameResultNotify::Swap(GameResultNotify* other) {
            if (other == this) return;
            InternalSwap(other);
        }
        void GameResultNotify::InternalSwap(GameResultNotify* other) {
            using std::swap;
            user_results_.InternalSwap(&other->user_results_);
            swap(custom_data_, other->custom_data_);
            swap(tableno_, other->tableno_);
            swap(bout_count_, other->bout_count_);
            swap(base_deposit_, other->base_deposit_);
            swap(banker_chair_, other->banker_chair_);
            swap(_has_bits_[0], other->_has_bits_[0]);
            _internal_metadata_.Swap(&other->_internal_metadata_);
            swap(_cached_size_, other->_cached_size_);
        }

        ::google::protobuf::Metadata GameResultNotify::GetMetadata() const {
            protobuf_game_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
            return ::protobuf_game_5fbase_2eproto::file_level_metadata[kIndexInFileMessages];
        }


        // ===================================================================

        void RobotSvrValidateReq::InitAsDefaultInstance() {}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
        const int RobotSvrValidateReq::kClientIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

        RobotSvrValidateReq::RobotSvrValidateReq()
            : ::google::protobuf::Message(), _internal_metadata_(NULL) {
            if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
                ::protobuf_game_5fbase_2eproto::InitDefaultsRobotSvrValidateReq();
            }
            SharedCtor();
            // @@protoc_insertion_point(constructor:game.base.RobotSvrValidateReq)
        }
        RobotSvrValidateReq::RobotSvrValidateReq(const RobotSvrValidateReq& from)
            : ::google::protobuf::Message(),
            _internal_metadata_(NULL),
            _has_bits_(from._has_bits_),
            _cached_size_(0) {
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            client_id_ = from.client_id_;
            // @@protoc_insertion_point(copy_constructor:game.base.RobotSvrValidateReq)
        }

        void RobotSvrValidateReq::SharedCtor() {
            _cached_size_ = 0;
            client_id_ = 0;
        }

        RobotSvrValidateReq::~RobotSvrValidateReq() {
            // @@protoc_insertion_point(destructor:game.base.RobotSvrValidateReq)
            SharedDtor();
        }

        void RobotSvrValidateReq::SharedDtor() {}

        void RobotSvrValidateReq::SetCachedSize(int size) const {
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
        }
        const ::google::protobuf::Descriptor* RobotSvrValidateReq::descriptor() {
            ::protobuf_game_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
            return ::protobuf_game_5fbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
        }

        const RobotSvrValidateReq& RobotSvrValidateReq::default_instance() {
            ::protobuf_game_5fbase_2eproto::InitDefaultsRobotSvrValidateReq();
            return *internal_default_instance();
        }

        RobotSvrValidateReq* RobotSvrValidateReq::New(::google::protobuf::Arena* arena) const {
            RobotSvrValidateReq* n = new RobotSvrValidateReq;
            if (arena != NULL) {
                arena->Own(n);
            }
            return n;
        }

        void RobotSvrValidateReq::Clear() {
            // @@protoc_insertion_point(message_clear_start:game.base.RobotSvrValidateReq)
            ::google::protobuf::uint32 cached_has_bits = 0;
            // Prevent compiler warnings about cached_has_bits being unused
            (void) cached_has_bits;

            client_id_ = 0;
            _has_bits_.Clear();
            _internal_metadata_.Clear();
        }

        bool RobotSvrValidateReq::MergePartialFromCodedStream(
            ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
            ::google::protobuf::uint32 tag;
            // @@protoc_insertion_point(parse_start:game.base.RobotSvrValidateReq)
            for (;;) {
                ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
                tag = p.first;
                if (!p.second) goto handle_unusual;
                switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
                    // optional int32 client_id = 1;
                    case 1: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
                            set_has_client_id();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &client_id_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                    default: {
handle_unusual:
                        if (tag == 0) {
                            goto success;
                        }
                        DO_(::google::protobuf::internal::WireFormat::SkipField(
                            input, tag, _internal_metadata_.mutable_unknown_fields()));
                        break;
                    }
                }
            }
success:
            // @@protoc_insertion_point(parse_success:game.base.RobotSvrValidateReq)
            return true;
failure:
            // @@protoc_insertion_point(parse_failure:game.base.RobotSvrValidateReq)
            return false;
#undef DO_
        }

        void RobotSvrValidateReq::SerializeWithCachedSizes(
            ::google::protobuf::io::CodedOutputStream* output) const {
            // @@protoc_insertion_point(serialize_start:game.base.RobotSvrValidateReq)
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            // optional int32 client_id = 1;
            if (cached_has_bits & 0x00000001u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->client_id(), output);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
                    _internal_metadata_.unknown_fields(), output);
            }
            // @@protoc_insertion_point(serialize_end:game.base.RobotSvrValidateReq)
        }

        ::google::protobuf::uint8* RobotSvrValidateReq::InternalSerializeWithCachedSizesToArray(
            bool deterministic, ::google::protobuf::uint8* target) const {
            (void) deterministic; // Unused
            // @@protoc_insertion_point(serialize_to_array_start:game.base.RobotSvrValidateReq)
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            // optional int32 client_id = 1;
            if (cached_has_bits & 0x00000001u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->client_id(), target);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                    _internal_metadata_.unknown_fields(), target);
            }
            // @@protoc_insertion_point(serialize_to_array_end:game.base.RobotSvrValidateReq)
            return target;
        }

        size_t RobotSvrValidateReq::ByteSizeLong() const {
            // @@protoc_insertion_point(message_byte_size_start:game.base.RobotSvrValidateReq)
            size_t total_size = 0;

            if (_internal_metadata_.have_unknown_fields()) {
                total_size +=
                    ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
                    _internal_metadata_.unknown_fields());
            }
            // optional int32 client_id = 1;
            if (has_client_id()) {
                total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::Int32Size(
                    this->client_id());
            }

            int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = cached_size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
            return total_size;
        }

        void RobotSvrValidateReq::MergeFrom(const ::google::protobuf::Message& from) {
            // @@protoc_insertion_point(generalized_merge_from_start:game.base.RobotSvrValidateReq)
            GOOGLE_DCHECK_NE(&from, this);
            const RobotSvrValidateReq* source =
                ::google::protobuf::internal::DynamicCastToGenerated<const RobotSvrValidateReq>(
                &from);
            if (source == NULL) {
                // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.base.RobotSvrValidateReq)
                ::google::protobuf::internal::ReflectionOps::Merge(from, this);
            } else {
                // @@protoc_insertion_point(generalized_merge_from_cast_success:game.base.RobotSvrValidateReq)
                MergeFrom(*source);
            }
        }

        void RobotSvrValidateReq::MergeFrom(const RobotSvrValidateReq& from) {
            // @@protoc_insertion_point(class_specific_merge_from_start:game.base.RobotSvrValidateReq)
            GOOGLE_DCHECK_NE(&from, this);
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            if (from.has_client_id()) {
                set_client_id(from.client_id());
            }
        }

        void RobotSvrValidateReq::CopyFrom(const ::google::protobuf::Message& from) {
            // @@protoc_insertion_point(generalized_copy_from_start:game.base.RobotSvrValidateReq)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        void RobotSvrValidateReq::CopyFrom(const RobotSvrValidateReq& from) {
            // @@protoc_insertion_point(class_specific_copy_from_start:game.base.RobotSvrValidateReq)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        bool RobotSvrValidateReq::IsInitialized() const {
            return true;
        }

        void RobotSvrValidateReq::Swap(RobotSvrValidateReq* other) {
            if (other == this) return;
            InternalSwap(other);
        }
        void RobotSvrValidateReq::InternalSwap(RobotSvrValidateReq* other) {
            using std::swap;
            swap(client_id_, other->client_id_);
            swap(_has_bits_[0], other->_has_bits_[0]);
            _internal_metadata_.Swap(&other->_internal_metadata_);
            swap(_cached_size_, other->_cached_size_);
        }

        ::google::protobuf::Metadata RobotSvrValidateReq::GetMetadata() const {
            protobuf_game_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
            return ::protobuf_game_5fbase_2eproto::file_level_metadata[kIndexInFileMessages];
        }


        // ===================================================================

        void RobotSvrValidateResp::InitAsDefaultInstance() {}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
        const int RobotSvrValidateResp::kCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

        RobotSvrValidateResp::RobotSvrValidateResp()
            : ::google::protobuf::Message(), _internal_metadata_(NULL) {
            if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
                ::protobuf_game_5fbase_2eproto::InitDefaultsRobotSvrValidateResp();
            }
            SharedCtor();
            // @@protoc_insertion_point(constructor:game.base.RobotSvrValidateResp)
        }
        RobotSvrValidateResp::RobotSvrValidateResp(const RobotSvrValidateResp& from)
            : ::google::protobuf::Message(),
            _internal_metadata_(NULL),
            _has_bits_(from._has_bits_),
            _cached_size_(0) {
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            code_ = from.code_;
            // @@protoc_insertion_point(copy_constructor:game.base.RobotSvrValidateResp)
        }

        void RobotSvrValidateResp::SharedCtor() {
            _cached_size_ = 0;
            code_ = 0;
        }

        RobotSvrValidateResp::~RobotSvrValidateResp() {
            // @@protoc_insertion_point(destructor:game.base.RobotSvrValidateResp)
            SharedDtor();
        }

        void RobotSvrValidateResp::SharedDtor() {}

        void RobotSvrValidateResp::SetCachedSize(int size) const {
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
        }
        const ::google::protobuf::Descriptor* RobotSvrValidateResp::descriptor() {
            ::protobuf_game_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
            return ::protobuf_game_5fbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
        }

        const RobotSvrValidateResp& RobotSvrValidateResp::default_instance() {
            ::protobuf_game_5fbase_2eproto::InitDefaultsRobotSvrValidateResp();
            return *internal_default_instance();
        }

        RobotSvrValidateResp* RobotSvrValidateResp::New(::google::protobuf::Arena* arena) const {
            RobotSvrValidateResp* n = new RobotSvrValidateResp;
            if (arena != NULL) {
                arena->Own(n);
            }
            return n;
        }

        void RobotSvrValidateResp::Clear() {
            // @@protoc_insertion_point(message_clear_start:game.base.RobotSvrValidateResp)
            ::google::protobuf::uint32 cached_has_bits = 0;
            // Prevent compiler warnings about cached_has_bits being unused
            (void) cached_has_bits;

            code_ = 0;
            _has_bits_.Clear();
            _internal_metadata_.Clear();
        }

        bool RobotSvrValidateResp::MergePartialFromCodedStream(
            ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
            ::google::protobuf::uint32 tag;
            // @@protoc_insertion_point(parse_start:game.base.RobotSvrValidateResp)
            for (;;) {
                ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
                tag = p.first;
                if (!p.second) goto handle_unusual;
                switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
                    // optional int32 code = 1;
                    case 1: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
                            set_has_code();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &code_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                    default: {
handle_unusual:
                        if (tag == 0) {
                            goto success;
                        }
                        DO_(::google::protobuf::internal::WireFormat::SkipField(
                            input, tag, _internal_metadata_.mutable_unknown_fields()));
                        break;
                    }
                }
            }
success:
            // @@protoc_insertion_point(parse_success:game.base.RobotSvrValidateResp)
            return true;
failure:
            // @@protoc_insertion_point(parse_failure:game.base.RobotSvrValidateResp)
            return false;
#undef DO_
        }

        void RobotSvrValidateResp::SerializeWithCachedSizes(
            ::google::protobuf::io::CodedOutputStream* output) const {
            // @@protoc_insertion_point(serialize_start:game.base.RobotSvrValidateResp)
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            // optional int32 code = 1;
            if (cached_has_bits & 0x00000001u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
                    _internal_metadata_.unknown_fields(), output);
            }
            // @@protoc_insertion_point(serialize_end:game.base.RobotSvrValidateResp)
        }

        ::google::protobuf::uint8* RobotSvrValidateResp::InternalSerializeWithCachedSizesToArray(
            bool deterministic, ::google::protobuf::uint8* target) const {
            (void) deterministic; // Unused
            // @@protoc_insertion_point(serialize_to_array_start:game.base.RobotSvrValidateResp)
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            // optional int32 code = 1;
            if (cached_has_bits & 0x00000001u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                    _internal_metadata_.unknown_fields(), target);
            }
            // @@protoc_insertion_point(serialize_to_array_end:game.base.RobotSvrValidateResp)
            return target;
        }

        size_t RobotSvrValidateResp::ByteSizeLong() const {
            // @@protoc_insertion_point(message_byte_size_start:game.base.RobotSvrValidateResp)
            size_t total_size = 0;

            if (_internal_metadata_.have_unknown_fields()) {
                total_size +=
                    ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
                    _internal_metadata_.unknown_fields());
            }
            // optional int32 code = 1;
            if (has_code()) {
                total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::Int32Size(
                    this->code());
            }

            int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = cached_size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
            return total_size;
        }

        void RobotSvrValidateResp::MergeFrom(const ::google::protobuf::Message& from) {
            // @@protoc_insertion_point(generalized_merge_from_start:game.base.RobotSvrValidateResp)
            GOOGLE_DCHECK_NE(&from, this);
            const RobotSvrValidateResp* source =
                ::google::protobuf::internal::DynamicCastToGenerated<const RobotSvrValidateResp>(
                &from);
            if (source == NULL) {
                // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.base.RobotSvrValidateResp)
                ::google::protobuf::internal::ReflectionOps::Merge(from, this);
            } else {
                // @@protoc_insertion_point(generalized_merge_from_cast_success:game.base.RobotSvrValidateResp)
                MergeFrom(*source);
            }
        }

        void RobotSvrValidateResp::MergeFrom(const RobotSvrValidateResp& from) {
            // @@protoc_insertion_point(class_specific_merge_from_start:game.base.RobotSvrValidateResp)
            GOOGLE_DCHECK_NE(&from, this);
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            if (from.has_code()) {
                set_code(from.code());
            }
        }

        void RobotSvrValidateResp::CopyFrom(const ::google::protobuf::Message& from) {
            // @@protoc_insertion_point(generalized_copy_from_start:game.base.RobotSvrValidateResp)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        void RobotSvrValidateResp::CopyFrom(const RobotSvrValidateResp& from) {
            // @@protoc_insertion_point(class_specific_copy_from_start:game.base.RobotSvrValidateResp)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        bool RobotSvrValidateResp::IsInitialized() const {
            return true;
        }

        void RobotSvrValidateResp::Swap(RobotSvrValidateResp* other) {
            if (other == this) return;
            InternalSwap(other);
        }
        void RobotSvrValidateResp::InternalSwap(RobotSvrValidateResp* other) {
            using std::swap;
            swap(code_, other->code_);
            swap(_has_bits_[0], other->_has_bits_[0]);
            _internal_metadata_.Swap(&other->_internal_metadata_);
            swap(_cached_size_, other->_cached_size_);
        }

        ::google::protobuf::Metadata RobotSvrValidateResp::GetMetadata() const {
            protobuf_game_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
            return ::protobuf_game_5fbase_2eproto::file_level_metadata[kIndexInFileMessages];
        }


        // ===================================================================

        void GetGameUsersReq::InitAsDefaultInstance() {}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
        const int GetGameUsersReq::kClientidFieldNumber;
        const int GetGameUsersReq::kRoomidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

        GetGameUsersReq::GetGameUsersReq()
            : ::google::protobuf::Message(), _internal_metadata_(NULL) {
            if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
                ::protobuf_game_5fbase_2eproto::InitDefaultsGetGameUsersReq();
            }
            SharedCtor();
            // @@protoc_insertion_point(constructor:game.base.GetGameUsersReq)
        }
        GetGameUsersReq::GetGameUsersReq(const GetGameUsersReq& from)
            : ::google::protobuf::Message(),
            _internal_metadata_(NULL),
            _has_bits_(from._has_bits_),
            _cached_size_(0) {
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            ::memcpy(&clientid_, &from.clientid_,
                     static_cast<size_t>(reinterpret_cast<char*>(&roomid_) -
                     reinterpret_cast<char*>(&clientid_)) + sizeof(roomid_));
            // @@protoc_insertion_point(copy_constructor:game.base.GetGameUsersReq)
        }

        void GetGameUsersReq::SharedCtor() {
            _cached_size_ = 0;
            ::memset(&clientid_, 0, static_cast<size_t>(
                reinterpret_cast<char*>(&roomid_) -
                reinterpret_cast<char*>(&clientid_)) + sizeof(roomid_));
        }

        GetGameUsersReq::~GetGameUsersReq() {
            // @@protoc_insertion_point(destructor:game.base.GetGameUsersReq)
            SharedDtor();
        }

        void GetGameUsersReq::SharedDtor() {}

        void GetGameUsersReq::SetCachedSize(int size) const {
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
        }
        const ::google::protobuf::Descriptor* GetGameUsersReq::descriptor() {
            ::protobuf_game_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
            return ::protobuf_game_5fbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
        }

        const GetGameUsersReq& GetGameUsersReq::default_instance() {
            ::protobuf_game_5fbase_2eproto::InitDefaultsGetGameUsersReq();
            return *internal_default_instance();
        }

        GetGameUsersReq* GetGameUsersReq::New(::google::protobuf::Arena* arena) const {
            GetGameUsersReq* n = new GetGameUsersReq;
            if (arena != NULL) {
                arena->Own(n);
            }
            return n;
        }

        void GetGameUsersReq::Clear() {
            // @@protoc_insertion_point(message_clear_start:game.base.GetGameUsersReq)
            ::google::protobuf::uint32 cached_has_bits = 0;
            // Prevent compiler warnings about cached_has_bits being unused
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            if (cached_has_bits & 3u) {
                ::memset(&clientid_, 0, static_cast<size_t>(
                    reinterpret_cast<char*>(&roomid_) -
                    reinterpret_cast<char*>(&clientid_)) + sizeof(roomid_));
            }
            _has_bits_.Clear();
            _internal_metadata_.Clear();
        }

        bool GetGameUsersReq::MergePartialFromCodedStream(
            ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
            ::google::protobuf::uint32 tag;
            // @@protoc_insertion_point(parse_start:game.base.GetGameUsersReq)
            for (;;) {
                ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
                tag = p.first;
                if (!p.second) goto handle_unusual;
                switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
                    // optional int32 clientid = 1;
                    case 1: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
                            set_has_clientid();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &clientid_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // optional int32 roomid = 2;
                    case 2: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
                            set_has_roomid();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &roomid_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                    default: {
handle_unusual:
                        if (tag == 0) {
                            goto success;
                        }
                        DO_(::google::protobuf::internal::WireFormat::SkipField(
                            input, tag, _internal_metadata_.mutable_unknown_fields()));
                        break;
                    }
                }
            }
success:
            // @@protoc_insertion_point(parse_success:game.base.GetGameUsersReq)
            return true;
failure:
            // @@protoc_insertion_point(parse_failure:game.base.GetGameUsersReq)
            return false;
#undef DO_
        }

        void GetGameUsersReq::SerializeWithCachedSizes(
            ::google::protobuf::io::CodedOutputStream* output) const {
            // @@protoc_insertion_point(serialize_start:game.base.GetGameUsersReq)
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            // optional int32 clientid = 1;
            if (cached_has_bits & 0x00000001u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->clientid(), output);
            }

            // optional int32 roomid = 2;
            if (cached_has_bits & 0x00000002u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roomid(), output);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
                    _internal_metadata_.unknown_fields(), output);
            }
            // @@protoc_insertion_point(serialize_end:game.base.GetGameUsersReq)
        }

        ::google::protobuf::uint8* GetGameUsersReq::InternalSerializeWithCachedSizesToArray(
            bool deterministic, ::google::protobuf::uint8* target) const {
            (void) deterministic; // Unused
            // @@protoc_insertion_point(serialize_to_array_start:game.base.GetGameUsersReq)
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            // optional int32 clientid = 1;
            if (cached_has_bits & 0x00000001u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->clientid(), target);
            }

            // optional int32 roomid = 2;
            if (cached_has_bits & 0x00000002u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roomid(), target);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                    _internal_metadata_.unknown_fields(), target);
            }
            // @@protoc_insertion_point(serialize_to_array_end:game.base.GetGameUsersReq)
            return target;
        }

        size_t GetGameUsersReq::ByteSizeLong() const {
            // @@protoc_insertion_point(message_byte_size_start:game.base.GetGameUsersReq)
            size_t total_size = 0;

            if (_internal_metadata_.have_unknown_fields()) {
                total_size +=
                    ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
                    _internal_metadata_.unknown_fields());
            }
            if (_has_bits_[0 / 32] & 3u) {
                // optional int32 clientid = 1;
                if (has_clientid()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::Int32Size(
                        this->clientid());
                }

                // optional int32 roomid = 2;
                if (has_roomid()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::Int32Size(
                        this->roomid());
                }

            }
            int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = cached_size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
            return total_size;
        }

        void GetGameUsersReq::MergeFrom(const ::google::protobuf::Message& from) {
            // @@protoc_insertion_point(generalized_merge_from_start:game.base.GetGameUsersReq)
            GOOGLE_DCHECK_NE(&from, this);
            const GetGameUsersReq* source =
                ::google::protobuf::internal::DynamicCastToGenerated<const GetGameUsersReq>(
                &from);
            if (source == NULL) {
                // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.base.GetGameUsersReq)
                ::google::protobuf::internal::ReflectionOps::Merge(from, this);
            } else {
                // @@protoc_insertion_point(generalized_merge_from_cast_success:game.base.GetGameUsersReq)
                MergeFrom(*source);
            }
        }

        void GetGameUsersReq::MergeFrom(const GetGameUsersReq& from) {
            // @@protoc_insertion_point(class_specific_merge_from_start:game.base.GetGameUsersReq)
            GOOGLE_DCHECK_NE(&from, this);
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = from._has_bits_[0];
            if (cached_has_bits & 3u) {
                if (cached_has_bits & 0x00000001u) {
                    clientid_ = from.clientid_;
                }
                if (cached_has_bits & 0x00000002u) {
                    roomid_ = from.roomid_;
                }
                _has_bits_[0] |= cached_has_bits;
            }
        }

        void GetGameUsersReq::CopyFrom(const ::google::protobuf::Message& from) {
            // @@protoc_insertion_point(generalized_copy_from_start:game.base.GetGameUsersReq)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        void GetGameUsersReq::CopyFrom(const GetGameUsersReq& from) {
            // @@protoc_insertion_point(class_specific_copy_from_start:game.base.GetGameUsersReq)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        bool GetGameUsersReq::IsInitialized() const {
            return true;
        }

        void GetGameUsersReq::Swap(GetGameUsersReq* other) {
            if (other == this) return;
            InternalSwap(other);
        }
        void GetGameUsersReq::InternalSwap(GetGameUsersReq* other) {
            using std::swap;
            swap(clientid_, other->clientid_);
            swap(roomid_, other->roomid_);
            swap(_has_bits_[0], other->_has_bits_[0]);
            _internal_metadata_.Swap(&other->_internal_metadata_);
            swap(_cached_size_, other->_cached_size_);
        }

        ::google::protobuf::Metadata GetGameUsersReq::GetMetadata() const {
            protobuf_game_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
            return ::protobuf_game_5fbase_2eproto::file_level_metadata[kIndexInFileMessages];
        }


        // ===================================================================

        void GetGameUsersResp::InitAsDefaultInstance() {}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
        const int GetGameUsersResp::kCodeFieldNumber;
        const int GetGameUsersResp::kRoomsFieldNumber;
        const int GetGameUsersResp::kUsersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

        GetGameUsersResp::GetGameUsersResp()
            : ::google::protobuf::Message(), _internal_metadata_(NULL) {
            if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
                ::protobuf_game_5fbase_2eproto::InitDefaultsGetGameUsersResp();
            }
            SharedCtor();
            // @@protoc_insertion_point(constructor:game.base.GetGameUsersResp)
        }
        GetGameUsersResp::GetGameUsersResp(const GetGameUsersResp& from)
            : ::google::protobuf::Message(),
            _internal_metadata_(NULL),
            _has_bits_(from._has_bits_),
            _cached_size_(0),
            rooms_(from.rooms_),
            users_(from.users_) {
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            code_ = from.code_;
            // @@protoc_insertion_point(copy_constructor:game.base.GetGameUsersResp)
        }

        void GetGameUsersResp::SharedCtor() {
            _cached_size_ = 0;
            code_ = 0;
        }

        GetGameUsersResp::~GetGameUsersResp() {
            // @@protoc_insertion_point(destructor:game.base.GetGameUsersResp)
            SharedDtor();
        }

        void GetGameUsersResp::SharedDtor() {}

        void GetGameUsersResp::SetCachedSize(int size) const {
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
        }
        const ::google::protobuf::Descriptor* GetGameUsersResp::descriptor() {
            ::protobuf_game_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
            return ::protobuf_game_5fbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
        }

        const GetGameUsersResp& GetGameUsersResp::default_instance() {
            ::protobuf_game_5fbase_2eproto::InitDefaultsGetGameUsersResp();
            return *internal_default_instance();
        }

        GetGameUsersResp* GetGameUsersResp::New(::google::protobuf::Arena* arena) const {
            GetGameUsersResp* n = new GetGameUsersResp;
            if (arena != NULL) {
                arena->Own(n);
            }
            return n;
        }

        void GetGameUsersResp::Clear() {
            // @@protoc_insertion_point(message_clear_start:game.base.GetGameUsersResp)
            ::google::protobuf::uint32 cached_has_bits = 0;
            // Prevent compiler warnings about cached_has_bits being unused
            (void) cached_has_bits;

            rooms_.Clear();
            users_.Clear();
            code_ = 0;
            _has_bits_.Clear();
            _internal_metadata_.Clear();
        }

        bool GetGameUsersResp::MergePartialFromCodedStream(
            ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
            ::google::protobuf::uint32 tag;
            // @@protoc_insertion_point(parse_start:game.base.GetGameUsersResp)
            for (;;) {
                ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
                tag = p.first;
                if (!p.second) goto handle_unusual;
                switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
                    // optional int32 code = 1;
                    case 1: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
                            set_has_code();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &code_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // repeated .game.base.Room rooms = 2;
                    case 2: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
                            DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_rooms()));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // repeated .game.base.User users = 3;
                    case 3: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
                            DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_users()));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                    default: {
handle_unusual:
                        if (tag == 0) {
                            goto success;
                        }
                        DO_(::google::protobuf::internal::WireFormat::SkipField(
                            input, tag, _internal_metadata_.mutable_unknown_fields()));
                        break;
                    }
                }
            }
success:
            // @@protoc_insertion_point(parse_success:game.base.GetGameUsersResp)
            return true;
failure:
            // @@protoc_insertion_point(parse_failure:game.base.GetGameUsersResp)
            return false;
#undef DO_
        }

        void GetGameUsersResp::SerializeWithCachedSizes(
            ::google::protobuf::io::CodedOutputStream* output) const {
            // @@protoc_insertion_point(serialize_start:game.base.GetGameUsersResp)
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            // optional int32 code = 1;
            if (cached_has_bits & 0x00000001u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
            }

            // repeated .game.base.Room rooms = 2;
            for (unsigned int i = 0,
                 n = static_cast<unsigned int>(this->rooms_size()); i < n; i++) {
                ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
                    2, this->rooms(static_cast<int>(i)), output);
            }

            // repeated .game.base.User users = 3;
            for (unsigned int i = 0,
                 n = static_cast<unsigned int>(this->users_size()); i < n; i++) {
                ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
                    3, this->users(static_cast<int>(i)), output);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
                    _internal_metadata_.unknown_fields(), output);
            }
            // @@protoc_insertion_point(serialize_end:game.base.GetGameUsersResp)
        }

        ::google::protobuf::uint8* GetGameUsersResp::InternalSerializeWithCachedSizesToArray(
            bool deterministic, ::google::protobuf::uint8* target) const {
            (void) deterministic; // Unused
            // @@protoc_insertion_point(serialize_to_array_start:game.base.GetGameUsersResp)
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            // optional int32 code = 1;
            if (cached_has_bits & 0x00000001u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
            }

            // repeated .game.base.Room rooms = 2;
            for (unsigned int i = 0,
                 n = static_cast<unsigned int>(this->rooms_size()); i < n; i++) {
                target = ::google::protobuf::internal::WireFormatLite::
                    InternalWriteMessageToArray(
                    2, this->rooms(static_cast<int>(i)), deterministic, target);
            }

            // repeated .game.base.User users = 3;
            for (unsigned int i = 0,
                 n = static_cast<unsigned int>(this->users_size()); i < n; i++) {
                target = ::google::protobuf::internal::WireFormatLite::
                    InternalWriteMessageToArray(
                    3, this->users(static_cast<int>(i)), deterministic, target);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                    _internal_metadata_.unknown_fields(), target);
            }
            // @@protoc_insertion_point(serialize_to_array_end:game.base.GetGameUsersResp)
            return target;
        }

        size_t GetGameUsersResp::ByteSizeLong() const {
            // @@protoc_insertion_point(message_byte_size_start:game.base.GetGameUsersResp)
            size_t total_size = 0;

            if (_internal_metadata_.have_unknown_fields()) {
                total_size +=
                    ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
                    _internal_metadata_.unknown_fields());
            }
            // repeated .game.base.Room rooms = 2;
  {
      unsigned int count = static_cast<unsigned int>(this->rooms_size());
      total_size += 1UL * count;
      for (unsigned int i = 0; i < count; i++) {
          total_size +=
              ::google::protobuf::internal::WireFormatLite::MessageSize(
              this->rooms(static_cast<int>(i)));
      }
  }

  // repeated .game.base.User users = 3;
  {
      unsigned int count = static_cast<unsigned int>(this->users_size());
      total_size += 1UL * count;
      for (unsigned int i = 0; i < count; i++) {
          total_size +=
              ::google::protobuf::internal::WireFormatLite::MessageSize(
              this->users(static_cast<int>(i)));
      }
  }

  // optional int32 code = 1;
  if (has_code()) {
      total_size += 1 +
          ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
        }

        void GetGameUsersResp::MergeFrom(const ::google::protobuf::Message& from) {
            // @@protoc_insertion_point(generalized_merge_from_start:game.base.GetGameUsersResp)
            GOOGLE_DCHECK_NE(&from, this);
            const GetGameUsersResp* source =
                ::google::protobuf::internal::DynamicCastToGenerated<const GetGameUsersResp>(
                &from);
            if (source == NULL) {
                // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.base.GetGameUsersResp)
                ::google::protobuf::internal::ReflectionOps::Merge(from, this);
            } else {
                // @@protoc_insertion_point(generalized_merge_from_cast_success:game.base.GetGameUsersResp)
                MergeFrom(*source);
            }
        }

        void GetGameUsersResp::MergeFrom(const GetGameUsersResp& from) {
            // @@protoc_insertion_point(class_specific_merge_from_start:game.base.GetGameUsersResp)
            GOOGLE_DCHECK_NE(&from, this);
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            rooms_.MergeFrom(from.rooms_);
            users_.MergeFrom(from.users_);
            if (from.has_code()) {
                set_code(from.code());
            }
        }

        void GetGameUsersResp::CopyFrom(const ::google::protobuf::Message& from) {
            // @@protoc_insertion_point(generalized_copy_from_start:game.base.GetGameUsersResp)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        void GetGameUsersResp::CopyFrom(const GetGameUsersResp& from) {
            // @@protoc_insertion_point(class_specific_copy_from_start:game.base.GetGameUsersResp)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        bool GetGameUsersResp::IsInitialized() const {
            return true;
        }

        void GetGameUsersResp::Swap(GetGameUsersResp* other) {
            if (other == this) return;
            InternalSwap(other);
        }
        void GetGameUsersResp::InternalSwap(GetGameUsersResp* other) {
            using std::swap;
            rooms_.InternalSwap(&other->rooms_);
            users_.InternalSwap(&other->users_);
            swap(code_, other->code_);
            swap(_has_bits_[0], other->_has_bits_[0]);
            _internal_metadata_.Swap(&other->_internal_metadata_);
            swap(_cached_size_, other->_cached_size_);
        }

        ::google::protobuf::Metadata GetGameUsersResp::GetMetadata() const {
            protobuf_game_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
            return ::protobuf_game_5fbase_2eproto::file_level_metadata[kIndexInFileMessages];
        }


        // ===================================================================

        void RS_UserEnterGameNotify::InitAsDefaultInstance() {
            ::game::base::_RS_UserEnterGameNotify_default_instance_._instance.get_mutable()->room_data_ = const_cast<::game::base::RoomData*>(
                ::game::base::RoomData::internal_default_instance());
        }
#if !defined(_MSC_VER) || _MSC_VER >= 1900
        const int RS_UserEnterGameNotify::kUseridFieldNumber;
        const int RS_UserEnterGameNotify::kTablenoFieldNumber;
        const int RS_UserEnterGameNotify::kChairnoFieldNumber;
        const int RS_UserEnterGameNotify::kUserTypeFieldNumber;
        const int RS_UserEnterGameNotify::kRoomDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

        RS_UserEnterGameNotify::RS_UserEnterGameNotify()
            : ::google::protobuf::Message(), _internal_metadata_(NULL) {
            if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
                ::protobuf_game_5fbase_2eproto::InitDefaultsRS_UserEnterGameNotify();
            }
            SharedCtor();
            // @@protoc_insertion_point(constructor:game.base.RS_UserEnterGameNotify)
        }
        RS_UserEnterGameNotify::RS_UserEnterGameNotify(const RS_UserEnterGameNotify& from)
            : ::google::protobuf::Message(),
            _internal_metadata_(NULL),
            _has_bits_(from._has_bits_),
            _cached_size_(0) {
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            if (from.has_room_data()) {
                room_data_ = new ::game::base::RoomData(*from.room_data_);
            } else {
                room_data_ = NULL;
            }
            ::memcpy(&userid_, &from.userid_,
                     static_cast<size_t>(reinterpret_cast<char*>(&user_type_) -
                     reinterpret_cast<char*>(&userid_)) + sizeof(user_type_));
            // @@protoc_insertion_point(copy_constructor:game.base.RS_UserEnterGameNotify)
        }

        void RS_UserEnterGameNotify::SharedCtor() {
            _cached_size_ = 0;
            ::memset(&room_data_, 0, static_cast<size_t>(
                reinterpret_cast<char*>(&user_type_) -
                reinterpret_cast<char*>(&room_data_)) + sizeof(user_type_));
        }

        RS_UserEnterGameNotify::~RS_UserEnterGameNotify() {
            // @@protoc_insertion_point(destructor:game.base.RS_UserEnterGameNotify)
            SharedDtor();
        }

        void RS_UserEnterGameNotify::SharedDtor() {
            if (this != internal_default_instance()) delete room_data_;
        }

        void RS_UserEnterGameNotify::SetCachedSize(int size) const {
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
        }
        const ::google::protobuf::Descriptor* RS_UserEnterGameNotify::descriptor() {
            ::protobuf_game_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
            return ::protobuf_game_5fbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
        }

        const RS_UserEnterGameNotify& RS_UserEnterGameNotify::default_instance() {
            ::protobuf_game_5fbase_2eproto::InitDefaultsRS_UserEnterGameNotify();
            return *internal_default_instance();
        }

        RS_UserEnterGameNotify* RS_UserEnterGameNotify::New(::google::protobuf::Arena* arena) const {
            RS_UserEnterGameNotify* n = new RS_UserEnterGameNotify;
            if (arena != NULL) {
                arena->Own(n);
            }
            return n;
        }

        void RS_UserEnterGameNotify::Clear() {
            // @@protoc_insertion_point(message_clear_start:game.base.RS_UserEnterGameNotify)
            ::google::protobuf::uint32 cached_has_bits = 0;
            // Prevent compiler warnings about cached_has_bits being unused
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
                GOOGLE_DCHECK(room_data_ != NULL);
                room_data_->Clear();
            }
            if (cached_has_bits & 30u) {
                ::memset(&userid_, 0, static_cast<size_t>(
                    reinterpret_cast<char*>(&user_type_) -
                    reinterpret_cast<char*>(&userid_)) + sizeof(user_type_));
            }
            _has_bits_.Clear();
            _internal_metadata_.Clear();
        }

        bool RS_UserEnterGameNotify::MergePartialFromCodedStream(
            ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
            ::google::protobuf::uint32 tag;
            // @@protoc_insertion_point(parse_start:game.base.RS_UserEnterGameNotify)
            for (;;) {
                ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
                tag = p.first;
                if (!p.second) goto handle_unusual;
                switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
                    // optional int32 userid = 1;
                    case 1: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
                            set_has_userid();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &userid_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // optional int32 tableno = 2;
                    case 2: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
                            set_has_tableno();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &tableno_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // optional int32 chairno = 3;
                    case 3: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
                            set_has_chairno();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &chairno_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // optional int32 user_type = 4;
                    case 4: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
                            set_has_user_type();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &user_type_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // optional .game.base.RoomData room_data = 5;
                    case 5: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
                            DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                                input, mutable_room_data()));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                    default: {
handle_unusual:
                        if (tag == 0) {
                            goto success;
                        }
                        DO_(::google::protobuf::internal::WireFormat::SkipField(
                            input, tag, _internal_metadata_.mutable_unknown_fields()));
                        break;
                    }
                }
            }
success:
            // @@protoc_insertion_point(parse_success:game.base.RS_UserEnterGameNotify)
            return true;
failure:
            // @@protoc_insertion_point(parse_failure:game.base.RS_UserEnterGameNotify)
            return false;
#undef DO_
        }

        void RS_UserEnterGameNotify::SerializeWithCachedSizes(
            ::google::protobuf::io::CodedOutputStream* output) const {
            // @@protoc_insertion_point(serialize_start:game.base.RS_UserEnterGameNotify)
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            // optional int32 userid = 1;
            if (cached_has_bits & 0x00000002u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
            }

            // optional int32 tableno = 2;
            if (cached_has_bits & 0x00000004u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tableno(), output);
            }

            // optional int32 chairno = 3;
            if (cached_has_bits & 0x00000008u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->chairno(), output);
            }

            // optional int32 user_type = 4;
            if (cached_has_bits & 0x00000010u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->user_type(), output);
            }

            // optional .game.base.RoomData room_data = 5;
            if (cached_has_bits & 0x00000001u) {
                ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
                    5, *this->room_data_, output);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
                    _internal_metadata_.unknown_fields(), output);
            }
            // @@protoc_insertion_point(serialize_end:game.base.RS_UserEnterGameNotify)
        }

        ::google::protobuf::uint8* RS_UserEnterGameNotify::InternalSerializeWithCachedSizesToArray(
            bool deterministic, ::google::protobuf::uint8* target) const {
            (void) deterministic; // Unused
            // @@protoc_insertion_point(serialize_to_array_start:game.base.RS_UserEnterGameNotify)
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            // optional int32 userid = 1;
            if (cached_has_bits & 0x00000002u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
            }

            // optional int32 tableno = 2;
            if (cached_has_bits & 0x00000004u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tableno(), target);
            }

            // optional int32 chairno = 3;
            if (cached_has_bits & 0x00000008u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->chairno(), target);
            }

            // optional int32 user_type = 4;
            if (cached_has_bits & 0x00000010u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->user_type(), target);
            }

            // optional .game.base.RoomData room_data = 5;
            if (cached_has_bits & 0x00000001u) {
                target = ::google::protobuf::internal::WireFormatLite::
                    InternalWriteMessageToArray(
                    5, *this->room_data_, deterministic, target);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                    _internal_metadata_.unknown_fields(), target);
            }
            // @@protoc_insertion_point(serialize_to_array_end:game.base.RS_UserEnterGameNotify)
            return target;
        }

        size_t RS_UserEnterGameNotify::ByteSizeLong() const {
            // @@protoc_insertion_point(message_byte_size_start:game.base.RS_UserEnterGameNotify)
            size_t total_size = 0;

            if (_internal_metadata_.have_unknown_fields()) {
                total_size +=
                    ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
                    _internal_metadata_.unknown_fields());
            }
            if (_has_bits_[0 / 32] & 31u) {
                // optional .game.base.RoomData room_data = 5;
                if (has_room_data()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::MessageSize(
                        *this->room_data_);
                }

                // optional int32 userid = 1;
                if (has_userid()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::Int32Size(
                        this->userid());
                }

                // optional int32 tableno = 2;
                if (has_tableno()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::Int32Size(
                        this->tableno());
                }

                // optional int32 chairno = 3;
                if (has_chairno()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::Int32Size(
                        this->chairno());
                }

                // optional int32 user_type = 4;
                if (has_user_type()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::Int32Size(
                        this->user_type());
                }

            }
            int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = cached_size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
            return total_size;
        }

        void RS_UserEnterGameNotify::MergeFrom(const ::google::protobuf::Message& from) {
            // @@protoc_insertion_point(generalized_merge_from_start:game.base.RS_UserEnterGameNotify)
            GOOGLE_DCHECK_NE(&from, this);
            const RS_UserEnterGameNotify* source =
                ::google::protobuf::internal::DynamicCastToGenerated<const RS_UserEnterGameNotify>(
                &from);
            if (source == NULL) {
                // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.base.RS_UserEnterGameNotify)
                ::google::protobuf::internal::ReflectionOps::Merge(from, this);
            } else {
                // @@protoc_insertion_point(generalized_merge_from_cast_success:game.base.RS_UserEnterGameNotify)
                MergeFrom(*source);
            }
        }

        void RS_UserEnterGameNotify::MergeFrom(const RS_UserEnterGameNotify& from) {
            // @@protoc_insertion_point(class_specific_merge_from_start:game.base.RS_UserEnterGameNotify)
            GOOGLE_DCHECK_NE(&from, this);
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = from._has_bits_[0];
            if (cached_has_bits & 31u) {
                if (cached_has_bits & 0x00000001u) {
                    mutable_room_data()->::game::base::RoomData::MergeFrom(from.room_data());
                }
                if (cached_has_bits & 0x00000002u) {
                    userid_ = from.userid_;
                }
                if (cached_has_bits & 0x00000004u) {
                    tableno_ = from.tableno_;
                }
                if (cached_has_bits & 0x00000008u) {
                    chairno_ = from.chairno_;
                }
                if (cached_has_bits & 0x00000010u) {
                    user_type_ = from.user_type_;
                }
                _has_bits_[0] |= cached_has_bits;
            }
        }

        void RS_UserEnterGameNotify::CopyFrom(const ::google::protobuf::Message& from) {
            // @@protoc_insertion_point(generalized_copy_from_start:game.base.RS_UserEnterGameNotify)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        void RS_UserEnterGameNotify::CopyFrom(const RS_UserEnterGameNotify& from) {
            // @@protoc_insertion_point(class_specific_copy_from_start:game.base.RS_UserEnterGameNotify)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        bool RS_UserEnterGameNotify::IsInitialized() const {
            return true;
        }

        void RS_UserEnterGameNotify::Swap(RS_UserEnterGameNotify* other) {
            if (other == this) return;
            InternalSwap(other);
        }
        void RS_UserEnterGameNotify::InternalSwap(RS_UserEnterGameNotify* other) {
            using std::swap;
            swap(room_data_, other->room_data_);
            swap(userid_, other->userid_);
            swap(tableno_, other->tableno_);
            swap(chairno_, other->chairno_);
            swap(user_type_, other->user_type_);
            swap(_has_bits_[0], other->_has_bits_[0]);
            _internal_metadata_.Swap(&other->_internal_metadata_);
            swap(_cached_size_, other->_cached_size_);
        }

        ::google::protobuf::Metadata RS_UserEnterGameNotify::GetMetadata() const {
            protobuf_game_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
            return ::protobuf_game_5fbase_2eproto::file_level_metadata[kIndexInFileMessages];
        }


        // ===================================================================

        void RS_SwitchLookerPlayerNotify::InitAsDefaultInstance() {}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
        const int RS_SwitchLookerPlayerNotify::kUseridFieldNumber;
        const int RS_SwitchLookerPlayerNotify::kRoomidFieldNumber;
        const int RS_SwitchLookerPlayerNotify::kTablenoFieldNumber;
        const int RS_SwitchLookerPlayerNotify::kChairnoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

        RS_SwitchLookerPlayerNotify::RS_SwitchLookerPlayerNotify()
            : ::google::protobuf::Message(), _internal_metadata_(NULL) {
            if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
                ::protobuf_game_5fbase_2eproto::InitDefaultsRS_SwitchLookerPlayerNotify();
            }
            SharedCtor();
            // @@protoc_insertion_point(constructor:game.base.RS_SwitchLookerPlayerNotify)
        }
        RS_SwitchLookerPlayerNotify::RS_SwitchLookerPlayerNotify(const RS_SwitchLookerPlayerNotify& from)
            : ::google::protobuf::Message(),
            _internal_metadata_(NULL),
            _has_bits_(from._has_bits_),
            _cached_size_(0) {
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            ::memcpy(&userid_, &from.userid_,
                     static_cast<size_t>(reinterpret_cast<char*>(&chairno_) -
                     reinterpret_cast<char*>(&userid_)) + sizeof(chairno_));
            // @@protoc_insertion_point(copy_constructor:game.base.RS_SwitchLookerPlayerNotify)
        }

        void RS_SwitchLookerPlayerNotify::SharedCtor() {
            _cached_size_ = 0;
            ::memset(&userid_, 0, static_cast<size_t>(
                reinterpret_cast<char*>(&chairno_) -
                reinterpret_cast<char*>(&userid_)) + sizeof(chairno_));
        }

        RS_SwitchLookerPlayerNotify::~RS_SwitchLookerPlayerNotify() {
            // @@protoc_insertion_point(destructor:game.base.RS_SwitchLookerPlayerNotify)
            SharedDtor();
        }

        void RS_SwitchLookerPlayerNotify::SharedDtor() {}

        void RS_SwitchLookerPlayerNotify::SetCachedSize(int size) const {
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
        }
        const ::google::protobuf::Descriptor* RS_SwitchLookerPlayerNotify::descriptor() {
            ::protobuf_game_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
            return ::protobuf_game_5fbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
        }

        const RS_SwitchLookerPlayerNotify& RS_SwitchLookerPlayerNotify::default_instance() {
            ::protobuf_game_5fbase_2eproto::InitDefaultsRS_SwitchLookerPlayerNotify();
            return *internal_default_instance();
        }

        RS_SwitchLookerPlayerNotify* RS_SwitchLookerPlayerNotify::New(::google::protobuf::Arena* arena) const {
            RS_SwitchLookerPlayerNotify* n = new RS_SwitchLookerPlayerNotify;
            if (arena != NULL) {
                arena->Own(n);
            }
            return n;
        }

        void RS_SwitchLookerPlayerNotify::Clear() {
            // @@protoc_insertion_point(message_clear_start:game.base.RS_SwitchLookerPlayerNotify)
            ::google::protobuf::uint32 cached_has_bits = 0;
            // Prevent compiler warnings about cached_has_bits being unused
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            if (cached_has_bits & 15u) {
                ::memset(&userid_, 0, static_cast<size_t>(
                    reinterpret_cast<char*>(&chairno_) -
                    reinterpret_cast<char*>(&userid_)) + sizeof(chairno_));
            }
            _has_bits_.Clear();
            _internal_metadata_.Clear();
        }

        bool RS_SwitchLookerPlayerNotify::MergePartialFromCodedStream(
            ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
            ::google::protobuf::uint32 tag;
            // @@protoc_insertion_point(parse_start:game.base.RS_SwitchLookerPlayerNotify)
            for (;;) {
                ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
                tag = p.first;
                if (!p.second) goto handle_unusual;
                switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
                    // optional int32 userid = 1;
                    case 1: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
                            set_has_userid();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &userid_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // optional int32 roomid = 2;
                    case 2: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
                            set_has_roomid();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &roomid_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // optional int32 tableno = 3;
                    case 3: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
                            set_has_tableno();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &tableno_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // optional int32 chairno = 4;
                    case 4: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
                            set_has_chairno();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &chairno_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                    default: {
handle_unusual:
                        if (tag == 0) {
                            goto success;
                        }
                        DO_(::google::protobuf::internal::WireFormat::SkipField(
                            input, tag, _internal_metadata_.mutable_unknown_fields()));
                        break;
                    }
                }
            }
success:
            // @@protoc_insertion_point(parse_success:game.base.RS_SwitchLookerPlayerNotify)
            return true;
failure:
            // @@protoc_insertion_point(parse_failure:game.base.RS_SwitchLookerPlayerNotify)
            return false;
#undef DO_
        }

        void RS_SwitchLookerPlayerNotify::SerializeWithCachedSizes(
            ::google::protobuf::io::CodedOutputStream* output) const {
            // @@protoc_insertion_point(serialize_start:game.base.RS_SwitchLookerPlayerNotify)
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            // optional int32 userid = 1;
            if (cached_has_bits & 0x00000001u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
            }

            // optional int32 roomid = 2;
            if (cached_has_bits & 0x00000002u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roomid(), output);
            }

            // optional int32 tableno = 3;
            if (cached_has_bits & 0x00000004u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->tableno(), output);
            }

            // optional int32 chairno = 4;
            if (cached_has_bits & 0x00000008u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->chairno(), output);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
                    _internal_metadata_.unknown_fields(), output);
            }
            // @@protoc_insertion_point(serialize_end:game.base.RS_SwitchLookerPlayerNotify)
        }

        ::google::protobuf::uint8* RS_SwitchLookerPlayerNotify::InternalSerializeWithCachedSizesToArray(
            bool deterministic, ::google::protobuf::uint8* target) const {
            (void) deterministic; // Unused
            // @@protoc_insertion_point(serialize_to_array_start:game.base.RS_SwitchLookerPlayerNotify)
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            // optional int32 userid = 1;
            if (cached_has_bits & 0x00000001u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
            }

            // optional int32 roomid = 2;
            if (cached_has_bits & 0x00000002u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roomid(), target);
            }

            // optional int32 tableno = 3;
            if (cached_has_bits & 0x00000004u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->tableno(), target);
            }

            // optional int32 chairno = 4;
            if (cached_has_bits & 0x00000008u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->chairno(), target);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                    _internal_metadata_.unknown_fields(), target);
            }
            // @@protoc_insertion_point(serialize_to_array_end:game.base.RS_SwitchLookerPlayerNotify)
            return target;
        }

        size_t RS_SwitchLookerPlayerNotify::ByteSizeLong() const {
            // @@protoc_insertion_point(message_byte_size_start:game.base.RS_SwitchLookerPlayerNotify)
            size_t total_size = 0;

            if (_internal_metadata_.have_unknown_fields()) {
                total_size +=
                    ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
                    _internal_metadata_.unknown_fields());
            }
            if (_has_bits_[0 / 32] & 15u) {
                // optional int32 userid = 1;
                if (has_userid()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::Int32Size(
                        this->userid());
                }

                // optional int32 roomid = 2;
                if (has_roomid()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::Int32Size(
                        this->roomid());
                }

                // optional int32 tableno = 3;
                if (has_tableno()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::Int32Size(
                        this->tableno());
                }

                // optional int32 chairno = 4;
                if (has_chairno()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::Int32Size(
                        this->chairno());
                }

            }
            int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = cached_size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
            return total_size;
        }

        void RS_SwitchLookerPlayerNotify::MergeFrom(const ::google::protobuf::Message& from) {
            // @@protoc_insertion_point(generalized_merge_from_start:game.base.RS_SwitchLookerPlayerNotify)
            GOOGLE_DCHECK_NE(&from, this);
            const RS_SwitchLookerPlayerNotify* source =
                ::google::protobuf::internal::DynamicCastToGenerated<const RS_SwitchLookerPlayerNotify>(
                &from);
            if (source == NULL) {
                // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.base.RS_SwitchLookerPlayerNotify)
                ::google::protobuf::internal::ReflectionOps::Merge(from, this);
            } else {
                // @@protoc_insertion_point(generalized_merge_from_cast_success:game.base.RS_SwitchLookerPlayerNotify)
                MergeFrom(*source);
            }
        }

        void RS_SwitchLookerPlayerNotify::MergeFrom(const RS_SwitchLookerPlayerNotify& from) {
            // @@protoc_insertion_point(class_specific_merge_from_start:game.base.RS_SwitchLookerPlayerNotify)
            GOOGLE_DCHECK_NE(&from, this);
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = from._has_bits_[0];
            if (cached_has_bits & 15u) {
                if (cached_has_bits & 0x00000001u) {
                    userid_ = from.userid_;
                }
                if (cached_has_bits & 0x00000002u) {
                    roomid_ = from.roomid_;
                }
                if (cached_has_bits & 0x00000004u) {
                    tableno_ = from.tableno_;
                }
                if (cached_has_bits & 0x00000008u) {
                    chairno_ = from.chairno_;
                }
                _has_bits_[0] |= cached_has_bits;
            }
        }

        void RS_SwitchLookerPlayerNotify::CopyFrom(const ::google::protobuf::Message& from) {
            // @@protoc_insertion_point(generalized_copy_from_start:game.base.RS_SwitchLookerPlayerNotify)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        void RS_SwitchLookerPlayerNotify::CopyFrom(const RS_SwitchLookerPlayerNotify& from) {
            // @@protoc_insertion_point(class_specific_copy_from_start:game.base.RS_SwitchLookerPlayerNotify)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        bool RS_SwitchLookerPlayerNotify::IsInitialized() const {
            return true;
        }

        void RS_SwitchLookerPlayerNotify::Swap(RS_SwitchLookerPlayerNotify* other) {
            if (other == this) return;
            InternalSwap(other);
        }
        void RS_SwitchLookerPlayerNotify::InternalSwap(RS_SwitchLookerPlayerNotify* other) {
            using std::swap;
            swap(userid_, other->userid_);
            swap(roomid_, other->roomid_);
            swap(tableno_, other->tableno_);
            swap(chairno_, other->chairno_);
            swap(_has_bits_[0], other->_has_bits_[0]);
            _internal_metadata_.Swap(&other->_internal_metadata_);
            swap(_cached_size_, other->_cached_size_);
        }

        ::google::protobuf::Metadata RS_SwitchLookerPlayerNotify::GetMetadata() const {
            protobuf_game_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
            return ::protobuf_game_5fbase_2eproto::file_level_metadata[kIndexInFileMessages];
        }


        // ===================================================================

        void RS_StartGameNotify::InitAsDefaultInstance() {}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
        const int RS_StartGameNotify::kRoomidFieldNumber;
        const int RS_StartGameNotify::kTablenoFieldNumber;
        const int RS_StartGameNotify::kChairsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

        RS_StartGameNotify::RS_StartGameNotify()
            : ::google::protobuf::Message(), _internal_metadata_(NULL) {
            if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
                ::protobuf_game_5fbase_2eproto::InitDefaultsRS_StartGameNotify();
            }
            SharedCtor();
            // @@protoc_insertion_point(constructor:game.base.RS_StartGameNotify)
        }
        RS_StartGameNotify::RS_StartGameNotify(const RS_StartGameNotify& from)
            : ::google::protobuf::Message(),
            _internal_metadata_(NULL),
            _has_bits_(from._has_bits_),
            _cached_size_(0),
            chairs_(from.chairs_) {
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            ::memcpy(&roomid_, &from.roomid_,
                     static_cast<size_t>(reinterpret_cast<char*>(&tableno_) -
                     reinterpret_cast<char*>(&roomid_)) + sizeof(tableno_));
            // @@protoc_insertion_point(copy_constructor:game.base.RS_StartGameNotify)
        }

        void RS_StartGameNotify::SharedCtor() {
            _cached_size_ = 0;
            ::memset(&roomid_, 0, static_cast<size_t>(
                reinterpret_cast<char*>(&tableno_) -
                reinterpret_cast<char*>(&roomid_)) + sizeof(tableno_));
        }

        RS_StartGameNotify::~RS_StartGameNotify() {
            // @@protoc_insertion_point(destructor:game.base.RS_StartGameNotify)
            SharedDtor();
        }

        void RS_StartGameNotify::SharedDtor() {}

        void RS_StartGameNotify::SetCachedSize(int size) const {
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
        }
        const ::google::protobuf::Descriptor* RS_StartGameNotify::descriptor() {
            ::protobuf_game_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
            return ::protobuf_game_5fbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
        }

        const RS_StartGameNotify& RS_StartGameNotify::default_instance() {
            ::protobuf_game_5fbase_2eproto::InitDefaultsRS_StartGameNotify();
            return *internal_default_instance();
        }

        RS_StartGameNotify* RS_StartGameNotify::New(::google::protobuf::Arena* arena) const {
            RS_StartGameNotify* n = new RS_StartGameNotify;
            if (arena != NULL) {
                arena->Own(n);
            }
            return n;
        }

        void RS_StartGameNotify::Clear() {
            // @@protoc_insertion_point(message_clear_start:game.base.RS_StartGameNotify)
            ::google::protobuf::uint32 cached_has_bits = 0;
            // Prevent compiler warnings about cached_has_bits being unused
            (void) cached_has_bits;

            chairs_.Clear();
            cached_has_bits = _has_bits_[0];
            if (cached_has_bits & 3u) {
                ::memset(&roomid_, 0, static_cast<size_t>(
                    reinterpret_cast<char*>(&tableno_) -
                    reinterpret_cast<char*>(&roomid_)) + sizeof(tableno_));
            }
            _has_bits_.Clear();
            _internal_metadata_.Clear();
        }

        bool RS_StartGameNotify::MergePartialFromCodedStream(
            ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
            ::google::protobuf::uint32 tag;
            // @@protoc_insertion_point(parse_start:game.base.RS_StartGameNotify)
            for (;;) {
                ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
                tag = p.first;
                if (!p.second) goto handle_unusual;
                switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
                    // optional int32 roomid = 1;
                    case 1: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
                            set_has_roomid();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &roomid_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // optional int32 tableno = 2;
                    case 2: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
                            set_has_tableno();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &tableno_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // repeated .game.base.ChairInfo chairs = 3;
                    case 3: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
                            DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_chairs()));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                    default: {
handle_unusual:
                        if (tag == 0) {
                            goto success;
                        }
                        DO_(::google::protobuf::internal::WireFormat::SkipField(
                            input, tag, _internal_metadata_.mutable_unknown_fields()));
                        break;
                    }
                }
            }
success:
            // @@protoc_insertion_point(parse_success:game.base.RS_StartGameNotify)
            return true;
failure:
            // @@protoc_insertion_point(parse_failure:game.base.RS_StartGameNotify)
            return false;
#undef DO_
        }

        void RS_StartGameNotify::SerializeWithCachedSizes(
            ::google::protobuf::io::CodedOutputStream* output) const {
            // @@protoc_insertion_point(serialize_start:game.base.RS_StartGameNotify)
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            // optional int32 roomid = 1;
            if (cached_has_bits & 0x00000001u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
            }

            // optional int32 tableno = 2;
            if (cached_has_bits & 0x00000002u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tableno(), output);
            }

            // repeated .game.base.ChairInfo chairs = 3;
            for (unsigned int i = 0,
                 n = static_cast<unsigned int>(this->chairs_size()); i < n; i++) {
                ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
                    3, this->chairs(static_cast<int>(i)), output);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
                    _internal_metadata_.unknown_fields(), output);
            }
            // @@protoc_insertion_point(serialize_end:game.base.RS_StartGameNotify)
        }

        ::google::protobuf::uint8* RS_StartGameNotify::InternalSerializeWithCachedSizesToArray(
            bool deterministic, ::google::protobuf::uint8* target) const {
            (void) deterministic; // Unused
            // @@protoc_insertion_point(serialize_to_array_start:game.base.RS_StartGameNotify)
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            // optional int32 roomid = 1;
            if (cached_has_bits & 0x00000001u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
            }

            // optional int32 tableno = 2;
            if (cached_has_bits & 0x00000002u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tableno(), target);
            }

            // repeated .game.base.ChairInfo chairs = 3;
            for (unsigned int i = 0,
                 n = static_cast<unsigned int>(this->chairs_size()); i < n; i++) {
                target = ::google::protobuf::internal::WireFormatLite::
                    InternalWriteMessageToArray(
                    3, this->chairs(static_cast<int>(i)), deterministic, target);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                    _internal_metadata_.unknown_fields(), target);
            }
            // @@protoc_insertion_point(serialize_to_array_end:game.base.RS_StartGameNotify)
            return target;
        }

        size_t RS_StartGameNotify::ByteSizeLong() const {
            // @@protoc_insertion_point(message_byte_size_start:game.base.RS_StartGameNotify)
            size_t total_size = 0;

            if (_internal_metadata_.have_unknown_fields()) {
                total_size +=
                    ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
                    _internal_metadata_.unknown_fields());
            }
            // repeated .game.base.ChairInfo chairs = 3;
  {
      unsigned int count = static_cast<unsigned int>(this->chairs_size());
      total_size += 1UL * count;
      for (unsigned int i = 0; i < count; i++) {
          total_size +=
              ::google::protobuf::internal::WireFormatLite::MessageSize(
              this->chairs(static_cast<int>(i)));
      }
  }

  if (_has_bits_[0 / 32] & 3u) {
      // optional int32 roomid = 1;
      if (has_roomid()) {
          total_size += 1 +
              ::google::protobuf::internal::WireFormatLite::Int32Size(
              this->roomid());
      }

      // optional int32 tableno = 2;
      if (has_tableno()) {
          total_size += 1 +
              ::google::protobuf::internal::WireFormatLite::Int32Size(
              this->tableno());
      }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
        }

        void RS_StartGameNotify::MergeFrom(const ::google::protobuf::Message& from) {
            // @@protoc_insertion_point(generalized_merge_from_start:game.base.RS_StartGameNotify)
            GOOGLE_DCHECK_NE(&from, this);
            const RS_StartGameNotify* source =
                ::google::protobuf::internal::DynamicCastToGenerated<const RS_StartGameNotify>(
                &from);
            if (source == NULL) {
                // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.base.RS_StartGameNotify)
                ::google::protobuf::internal::ReflectionOps::Merge(from, this);
            } else {
                // @@protoc_insertion_point(generalized_merge_from_cast_success:game.base.RS_StartGameNotify)
                MergeFrom(*source);
            }
        }

        void RS_StartGameNotify::MergeFrom(const RS_StartGameNotify& from) {
            // @@protoc_insertion_point(class_specific_merge_from_start:game.base.RS_StartGameNotify)
            GOOGLE_DCHECK_NE(&from, this);
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            chairs_.MergeFrom(from.chairs_);
            cached_has_bits = from._has_bits_[0];
            if (cached_has_bits & 3u) {
                if (cached_has_bits & 0x00000001u) {
                    roomid_ = from.roomid_;
                }
                if (cached_has_bits & 0x00000002u) {
                    tableno_ = from.tableno_;
                }
                _has_bits_[0] |= cached_has_bits;
            }
        }

        void RS_StartGameNotify::CopyFrom(const ::google::protobuf::Message& from) {
            // @@protoc_insertion_point(generalized_copy_from_start:game.base.RS_StartGameNotify)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        void RS_StartGameNotify::CopyFrom(const RS_StartGameNotify& from) {
            // @@protoc_insertion_point(class_specific_copy_from_start:game.base.RS_StartGameNotify)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        bool RS_StartGameNotify::IsInitialized() const {
            return true;
        }

        void RS_StartGameNotify::Swap(RS_StartGameNotify* other) {
            if (other == this) return;
            InternalSwap(other);
        }
        void RS_StartGameNotify::InternalSwap(RS_StartGameNotify* other) {
            using std::swap;
            chairs_.InternalSwap(&other->chairs_);
            swap(roomid_, other->roomid_);
            swap(tableno_, other->tableno_);
            swap(_has_bits_[0], other->_has_bits_[0]);
            _internal_metadata_.Swap(&other->_internal_metadata_);
            swap(_cached_size_, other->_cached_size_);
        }

        ::google::protobuf::Metadata RS_StartGameNotify::GetMetadata() const {
            protobuf_game_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
            return ::protobuf_game_5fbase_2eproto::file_level_metadata[kIndexInFileMessages];
        }


        // ===================================================================

        void RS_UserRefreshResultNotify::InitAsDefaultInstance() {}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
        const int RS_UserRefreshResultNotify::kUseridFieldNumber;
        const int RS_UserRefreshResultNotify::kRoomidFieldNumber;
        const int RS_UserRefreshResultNotify::kTablenoFieldNumber;
        const int RS_UserRefreshResultNotify::kChairnoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

        RS_UserRefreshResultNotify::RS_UserRefreshResultNotify()
            : ::google::protobuf::Message(), _internal_metadata_(NULL) {
            if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
                ::protobuf_game_5fbase_2eproto::InitDefaultsRS_UserRefreshResultNotify();
            }
            SharedCtor();
            // @@protoc_insertion_point(constructor:game.base.RS_UserRefreshResultNotify)
        }
        RS_UserRefreshResultNotify::RS_UserRefreshResultNotify(const RS_UserRefreshResultNotify& from)
            : ::google::protobuf::Message(),
            _internal_metadata_(NULL),
            _has_bits_(from._has_bits_),
            _cached_size_(0) {
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            ::memcpy(&userid_, &from.userid_,
                     static_cast<size_t>(reinterpret_cast<char*>(&chairno_) -
                     reinterpret_cast<char*>(&userid_)) + sizeof(chairno_));
            // @@protoc_insertion_point(copy_constructor:game.base.RS_UserRefreshResultNotify)
        }

        void RS_UserRefreshResultNotify::SharedCtor() {
            _cached_size_ = 0;
            ::memset(&userid_, 0, static_cast<size_t>(
                reinterpret_cast<char*>(&chairno_) -
                reinterpret_cast<char*>(&userid_)) + sizeof(chairno_));
        }

        RS_UserRefreshResultNotify::~RS_UserRefreshResultNotify() {
            // @@protoc_insertion_point(destructor:game.base.RS_UserRefreshResultNotify)
            SharedDtor();
        }

        void RS_UserRefreshResultNotify::SharedDtor() {}

        void RS_UserRefreshResultNotify::SetCachedSize(int size) const {
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
        }
        const ::google::protobuf::Descriptor* RS_UserRefreshResultNotify::descriptor() {
            ::protobuf_game_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
            return ::protobuf_game_5fbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
        }

        const RS_UserRefreshResultNotify& RS_UserRefreshResultNotify::default_instance() {
            ::protobuf_game_5fbase_2eproto::InitDefaultsRS_UserRefreshResultNotify();
            return *internal_default_instance();
        }

        RS_UserRefreshResultNotify* RS_UserRefreshResultNotify::New(::google::protobuf::Arena* arena) const {
            RS_UserRefreshResultNotify* n = new RS_UserRefreshResultNotify;
            if (arena != NULL) {
                arena->Own(n);
            }
            return n;
        }

        void RS_UserRefreshResultNotify::Clear() {
            // @@protoc_insertion_point(message_clear_start:game.base.RS_UserRefreshResultNotify)
            ::google::protobuf::uint32 cached_has_bits = 0;
            // Prevent compiler warnings about cached_has_bits being unused
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            if (cached_has_bits & 15u) {
                ::memset(&userid_, 0, static_cast<size_t>(
                    reinterpret_cast<char*>(&chairno_) -
                    reinterpret_cast<char*>(&userid_)) + sizeof(chairno_));
            }
            _has_bits_.Clear();
            _internal_metadata_.Clear();
        }

        bool RS_UserRefreshResultNotify::MergePartialFromCodedStream(
            ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
            ::google::protobuf::uint32 tag;
            // @@protoc_insertion_point(parse_start:game.base.RS_UserRefreshResultNotify)
            for (;;) {
                ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
                tag = p.first;
                if (!p.second) goto handle_unusual;
                switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
                    // optional int32 userid = 1;
                    case 1: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
                            set_has_userid();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &userid_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // optional int32 roomid = 2;
                    case 2: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
                            set_has_roomid();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &roomid_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // optional int32 tableno = 3;
                    case 3: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
                            set_has_tableno();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &tableno_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // optional int32 chairno = 4;
                    case 4: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
                            set_has_chairno();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &chairno_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                    default: {
handle_unusual:
                        if (tag == 0) {
                            goto success;
                        }
                        DO_(::google::protobuf::internal::WireFormat::SkipField(
                            input, tag, _internal_metadata_.mutable_unknown_fields()));
                        break;
                    }
                }
            }
success:
            // @@protoc_insertion_point(parse_success:game.base.RS_UserRefreshResultNotify)
            return true;
failure:
            // @@protoc_insertion_point(parse_failure:game.base.RS_UserRefreshResultNotify)
            return false;
#undef DO_
        }

        void RS_UserRefreshResultNotify::SerializeWithCachedSizes(
            ::google::protobuf::io::CodedOutputStream* output) const {
            // @@protoc_insertion_point(serialize_start:game.base.RS_UserRefreshResultNotify)
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            // optional int32 userid = 1;
            if (cached_has_bits & 0x00000001u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
            }

            // optional int32 roomid = 2;
            if (cached_has_bits & 0x00000002u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roomid(), output);
            }

            // optional int32 tableno = 3;
            if (cached_has_bits & 0x00000004u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->tableno(), output);
            }

            // optional int32 chairno = 4;
            if (cached_has_bits & 0x00000008u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->chairno(), output);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
                    _internal_metadata_.unknown_fields(), output);
            }
            // @@protoc_insertion_point(serialize_end:game.base.RS_UserRefreshResultNotify)
        }

        ::google::protobuf::uint8* RS_UserRefreshResultNotify::InternalSerializeWithCachedSizesToArray(
            bool deterministic, ::google::protobuf::uint8* target) const {
            (void) deterministic; // Unused
            // @@protoc_insertion_point(serialize_to_array_start:game.base.RS_UserRefreshResultNotify)
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            // optional int32 userid = 1;
            if (cached_has_bits & 0x00000001u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
            }

            // optional int32 roomid = 2;
            if (cached_has_bits & 0x00000002u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roomid(), target);
            }

            // optional int32 tableno = 3;
            if (cached_has_bits & 0x00000004u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->tableno(), target);
            }

            // optional int32 chairno = 4;
            if (cached_has_bits & 0x00000008u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->chairno(), target);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                    _internal_metadata_.unknown_fields(), target);
            }
            // @@protoc_insertion_point(serialize_to_array_end:game.base.RS_UserRefreshResultNotify)
            return target;
        }

        size_t RS_UserRefreshResultNotify::ByteSizeLong() const {
            // @@protoc_insertion_point(message_byte_size_start:game.base.RS_UserRefreshResultNotify)
            size_t total_size = 0;

            if (_internal_metadata_.have_unknown_fields()) {
                total_size +=
                    ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
                    _internal_metadata_.unknown_fields());
            }
            if (_has_bits_[0 / 32] & 15u) {
                // optional int32 userid = 1;
                if (has_userid()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::Int32Size(
                        this->userid());
                }

                // optional int32 roomid = 2;
                if (has_roomid()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::Int32Size(
                        this->roomid());
                }

                // optional int32 tableno = 3;
                if (has_tableno()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::Int32Size(
                        this->tableno());
                }

                // optional int32 chairno = 4;
                if (has_chairno()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::Int32Size(
                        this->chairno());
                }

            }
            int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = cached_size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
            return total_size;
        }

        void RS_UserRefreshResultNotify::MergeFrom(const ::google::protobuf::Message& from) {
            // @@protoc_insertion_point(generalized_merge_from_start:game.base.RS_UserRefreshResultNotify)
            GOOGLE_DCHECK_NE(&from, this);
            const RS_UserRefreshResultNotify* source =
                ::google::protobuf::internal::DynamicCastToGenerated<const RS_UserRefreshResultNotify>(
                &from);
            if (source == NULL) {
                // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.base.RS_UserRefreshResultNotify)
                ::google::protobuf::internal::ReflectionOps::Merge(from, this);
            } else {
                // @@protoc_insertion_point(generalized_merge_from_cast_success:game.base.RS_UserRefreshResultNotify)
                MergeFrom(*source);
            }
        }

        void RS_UserRefreshResultNotify::MergeFrom(const RS_UserRefreshResultNotify& from) {
            // @@protoc_insertion_point(class_specific_merge_from_start:game.base.RS_UserRefreshResultNotify)
            GOOGLE_DCHECK_NE(&from, this);
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = from._has_bits_[0];
            if (cached_has_bits & 15u) {
                if (cached_has_bits & 0x00000001u) {
                    userid_ = from.userid_;
                }
                if (cached_has_bits & 0x00000002u) {
                    roomid_ = from.roomid_;
                }
                if (cached_has_bits & 0x00000004u) {
                    tableno_ = from.tableno_;
                }
                if (cached_has_bits & 0x00000008u) {
                    chairno_ = from.chairno_;
                }
                _has_bits_[0] |= cached_has_bits;
            }
        }

        void RS_UserRefreshResultNotify::CopyFrom(const ::google::protobuf::Message& from) {
            // @@protoc_insertion_point(generalized_copy_from_start:game.base.RS_UserRefreshResultNotify)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        void RS_UserRefreshResultNotify::CopyFrom(const RS_UserRefreshResultNotify& from) {
            // @@protoc_insertion_point(class_specific_copy_from_start:game.base.RS_UserRefreshResultNotify)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        bool RS_UserRefreshResultNotify::IsInitialized() const {
            return true;
        }

        void RS_UserRefreshResultNotify::Swap(RS_UserRefreshResultNotify* other) {
            if (other == this) return;
            InternalSwap(other);
        }
        void RS_UserRefreshResultNotify::InternalSwap(RS_UserRefreshResultNotify* other) {
            using std::swap;
            swap(userid_, other->userid_);
            swap(roomid_, other->roomid_);
            swap(tableno_, other->tableno_);
            swap(chairno_, other->chairno_);
            swap(_has_bits_[0], other->_has_bits_[0]);
            _internal_metadata_.Swap(&other->_internal_metadata_);
            swap(_cached_size_, other->_cached_size_);
        }

        ::google::protobuf::Metadata RS_UserRefreshResultNotify::GetMetadata() const {
            protobuf_game_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
            return ::protobuf_game_5fbase_2eproto::file_level_metadata[kIndexInFileMessages];
        }


        // ===================================================================

        void RS_RefreshResultNotify::InitAsDefaultInstance() {}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
        const int RS_RefreshResultNotify::kRoomidFieldNumber;
        const int RS_RefreshResultNotify::kTablenoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

        RS_RefreshResultNotify::RS_RefreshResultNotify()
            : ::google::protobuf::Message(), _internal_metadata_(NULL) {
            if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
                ::protobuf_game_5fbase_2eproto::InitDefaultsRS_RefreshResultNotify();
            }
            SharedCtor();
            // @@protoc_insertion_point(constructor:game.base.RS_RefreshResultNotify)
        }
        RS_RefreshResultNotify::RS_RefreshResultNotify(const RS_RefreshResultNotify& from)
            : ::google::protobuf::Message(),
            _internal_metadata_(NULL),
            _has_bits_(from._has_bits_),
            _cached_size_(0) {
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            ::memcpy(&roomid_, &from.roomid_,
                     static_cast<size_t>(reinterpret_cast<char*>(&tableno_) -
                     reinterpret_cast<char*>(&roomid_)) + sizeof(tableno_));
            // @@protoc_insertion_point(copy_constructor:game.base.RS_RefreshResultNotify)
        }

        void RS_RefreshResultNotify::SharedCtor() {
            _cached_size_ = 0;
            ::memset(&roomid_, 0, static_cast<size_t>(
                reinterpret_cast<char*>(&tableno_) -
                reinterpret_cast<char*>(&roomid_)) + sizeof(tableno_));
        }

        RS_RefreshResultNotify::~RS_RefreshResultNotify() {
            // @@protoc_insertion_point(destructor:game.base.RS_RefreshResultNotify)
            SharedDtor();
        }

        void RS_RefreshResultNotify::SharedDtor() {}

        void RS_RefreshResultNotify::SetCachedSize(int size) const {
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
        }
        const ::google::protobuf::Descriptor* RS_RefreshResultNotify::descriptor() {
            ::protobuf_game_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
            return ::protobuf_game_5fbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
        }

        const RS_RefreshResultNotify& RS_RefreshResultNotify::default_instance() {
            ::protobuf_game_5fbase_2eproto::InitDefaultsRS_RefreshResultNotify();
            return *internal_default_instance();
        }

        RS_RefreshResultNotify* RS_RefreshResultNotify::New(::google::protobuf::Arena* arena) const {
            RS_RefreshResultNotify* n = new RS_RefreshResultNotify;
            if (arena != NULL) {
                arena->Own(n);
            }
            return n;
        }

        void RS_RefreshResultNotify::Clear() {
            // @@protoc_insertion_point(message_clear_start:game.base.RS_RefreshResultNotify)
            ::google::protobuf::uint32 cached_has_bits = 0;
            // Prevent compiler warnings about cached_has_bits being unused
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            if (cached_has_bits & 3u) {
                ::memset(&roomid_, 0, static_cast<size_t>(
                    reinterpret_cast<char*>(&tableno_) -
                    reinterpret_cast<char*>(&roomid_)) + sizeof(tableno_));
            }
            _has_bits_.Clear();
            _internal_metadata_.Clear();
        }

        bool RS_RefreshResultNotify::MergePartialFromCodedStream(
            ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
            ::google::protobuf::uint32 tag;
            // @@protoc_insertion_point(parse_start:game.base.RS_RefreshResultNotify)
            for (;;) {
                ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
                tag = p.first;
                if (!p.second) goto handle_unusual;
                switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
                    // optional int32 roomid = 1;
                    case 1: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
                            set_has_roomid();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &roomid_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // optional int32 tableno = 2;
                    case 2: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
                            set_has_tableno();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &tableno_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                    default: {
handle_unusual:
                        if (tag == 0) {
                            goto success;
                        }
                        DO_(::google::protobuf::internal::WireFormat::SkipField(
                            input, tag, _internal_metadata_.mutable_unknown_fields()));
                        break;
                    }
                }
            }
success:
            // @@protoc_insertion_point(parse_success:game.base.RS_RefreshResultNotify)
            return true;
failure:
            // @@protoc_insertion_point(parse_failure:game.base.RS_RefreshResultNotify)
            return false;
#undef DO_
        }

        void RS_RefreshResultNotify::SerializeWithCachedSizes(
            ::google::protobuf::io::CodedOutputStream* output) const {
            // @@protoc_insertion_point(serialize_start:game.base.RS_RefreshResultNotify)
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            // optional int32 roomid = 1;
            if (cached_has_bits & 0x00000001u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
            }

            // optional int32 tableno = 2;
            if (cached_has_bits & 0x00000002u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tableno(), output);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
                    _internal_metadata_.unknown_fields(), output);
            }
            // @@protoc_insertion_point(serialize_end:game.base.RS_RefreshResultNotify)
        }

        ::google::protobuf::uint8* RS_RefreshResultNotify::InternalSerializeWithCachedSizesToArray(
            bool deterministic, ::google::protobuf::uint8* target) const {
            (void) deterministic; // Unused
            // @@protoc_insertion_point(serialize_to_array_start:game.base.RS_RefreshResultNotify)
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            // optional int32 roomid = 1;
            if (cached_has_bits & 0x00000001u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
            }

            // optional int32 tableno = 2;
            if (cached_has_bits & 0x00000002u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tableno(), target);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                    _internal_metadata_.unknown_fields(), target);
            }
            // @@protoc_insertion_point(serialize_to_array_end:game.base.RS_RefreshResultNotify)
            return target;
        }

        size_t RS_RefreshResultNotify::ByteSizeLong() const {
            // @@protoc_insertion_point(message_byte_size_start:game.base.RS_RefreshResultNotify)
            size_t total_size = 0;

            if (_internal_metadata_.have_unknown_fields()) {
                total_size +=
                    ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
                    _internal_metadata_.unknown_fields());
            }
            if (_has_bits_[0 / 32] & 3u) {
                // optional int32 roomid = 1;
                if (has_roomid()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::Int32Size(
                        this->roomid());
                }

                // optional int32 tableno = 2;
                if (has_tableno()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::Int32Size(
                        this->tableno());
                }

            }
            int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = cached_size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
            return total_size;
        }

        void RS_RefreshResultNotify::MergeFrom(const ::google::protobuf::Message& from) {
            // @@protoc_insertion_point(generalized_merge_from_start:game.base.RS_RefreshResultNotify)
            GOOGLE_DCHECK_NE(&from, this);
            const RS_RefreshResultNotify* source =
                ::google::protobuf::internal::DynamicCastToGenerated<const RS_RefreshResultNotify>(
                &from);
            if (source == NULL) {
                // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.base.RS_RefreshResultNotify)
                ::google::protobuf::internal::ReflectionOps::Merge(from, this);
            } else {
                // @@protoc_insertion_point(generalized_merge_from_cast_success:game.base.RS_RefreshResultNotify)
                MergeFrom(*source);
            }
        }

        void RS_RefreshResultNotify::MergeFrom(const RS_RefreshResultNotify& from) {
            // @@protoc_insertion_point(class_specific_merge_from_start:game.base.RS_RefreshResultNotify)
            GOOGLE_DCHECK_NE(&from, this);
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = from._has_bits_[0];
            if (cached_has_bits & 3u) {
                if (cached_has_bits & 0x00000001u) {
                    roomid_ = from.roomid_;
                }
                if (cached_has_bits & 0x00000002u) {
                    tableno_ = from.tableno_;
                }
                _has_bits_[0] |= cached_has_bits;
            }
        }

        void RS_RefreshResultNotify::CopyFrom(const ::google::protobuf::Message& from) {
            // @@protoc_insertion_point(generalized_copy_from_start:game.base.RS_RefreshResultNotify)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        void RS_RefreshResultNotify::CopyFrom(const RS_RefreshResultNotify& from) {
            // @@protoc_insertion_point(class_specific_copy_from_start:game.base.RS_RefreshResultNotify)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        bool RS_RefreshResultNotify::IsInitialized() const {
            return true;
        }

        void RS_RefreshResultNotify::Swap(RS_RefreshResultNotify* other) {
            if (other == this) return;
            InternalSwap(other);
        }
        void RS_RefreshResultNotify::InternalSwap(RS_RefreshResultNotify* other) {
            using std::swap;
            swap(roomid_, other->roomid_);
            swap(tableno_, other->tableno_);
            swap(_has_bits_[0], other->_has_bits_[0]);
            _internal_metadata_.Swap(&other->_internal_metadata_);
            swap(_cached_size_, other->_cached_size_);
        }

        ::google::protobuf::Metadata RS_RefreshResultNotify::GetMetadata() const {
            protobuf_game_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
            return ::protobuf_game_5fbase_2eproto::file_level_metadata[kIndexInFileMessages];
        }


        // ===================================================================

        void RS_UserLeaveGameNotify::InitAsDefaultInstance() {}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
        const int RS_UserLeaveGameNotify::kUseridFieldNumber;
        const int RS_UserLeaveGameNotify::kRoomidFieldNumber;
        const int RS_UserLeaveGameNotify::kTablenoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

        RS_UserLeaveGameNotify::RS_UserLeaveGameNotify()
            : ::google::protobuf::Message(), _internal_metadata_(NULL) {
            if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
                ::protobuf_game_5fbase_2eproto::InitDefaultsRS_UserLeaveGameNotify();
            }
            SharedCtor();
            // @@protoc_insertion_point(constructor:game.base.RS_UserLeaveGameNotify)
        }
        RS_UserLeaveGameNotify::RS_UserLeaveGameNotify(const RS_UserLeaveGameNotify& from)
            : ::google::protobuf::Message(),
            _internal_metadata_(NULL),
            _has_bits_(from._has_bits_),
            _cached_size_(0) {
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            ::memcpy(&userid_, &from.userid_,
                     static_cast<size_t>(reinterpret_cast<char*>(&tableno_) -
                     reinterpret_cast<char*>(&userid_)) + sizeof(tableno_));
            // @@protoc_insertion_point(copy_constructor:game.base.RS_UserLeaveGameNotify)
        }

        void RS_UserLeaveGameNotify::SharedCtor() {
            _cached_size_ = 0;
            ::memset(&userid_, 0, static_cast<size_t>(
                reinterpret_cast<char*>(&tableno_) -
                reinterpret_cast<char*>(&userid_)) + sizeof(tableno_));
        }

        RS_UserLeaveGameNotify::~RS_UserLeaveGameNotify() {
            // @@protoc_insertion_point(destructor:game.base.RS_UserLeaveGameNotify)
            SharedDtor();
        }

        void RS_UserLeaveGameNotify::SharedDtor() {}

        void RS_UserLeaveGameNotify::SetCachedSize(int size) const {
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
        }
        const ::google::protobuf::Descriptor* RS_UserLeaveGameNotify::descriptor() {
            ::protobuf_game_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
            return ::protobuf_game_5fbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
        }

        const RS_UserLeaveGameNotify& RS_UserLeaveGameNotify::default_instance() {
            ::protobuf_game_5fbase_2eproto::InitDefaultsRS_UserLeaveGameNotify();
            return *internal_default_instance();
        }

        RS_UserLeaveGameNotify* RS_UserLeaveGameNotify::New(::google::protobuf::Arena* arena) const {
            RS_UserLeaveGameNotify* n = new RS_UserLeaveGameNotify;
            if (arena != NULL) {
                arena->Own(n);
            }
            return n;
        }

        void RS_UserLeaveGameNotify::Clear() {
            // @@protoc_insertion_point(message_clear_start:game.base.RS_UserLeaveGameNotify)
            ::google::protobuf::uint32 cached_has_bits = 0;
            // Prevent compiler warnings about cached_has_bits being unused
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            if (cached_has_bits & 7u) {
                ::memset(&userid_, 0, static_cast<size_t>(
                    reinterpret_cast<char*>(&tableno_) -
                    reinterpret_cast<char*>(&userid_)) + sizeof(tableno_));
            }
            _has_bits_.Clear();
            _internal_metadata_.Clear();
        }

        bool RS_UserLeaveGameNotify::MergePartialFromCodedStream(
            ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
            ::google::protobuf::uint32 tag;
            // @@protoc_insertion_point(parse_start:game.base.RS_UserLeaveGameNotify)
            for (;;) {
                ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
                tag = p.first;
                if (!p.second) goto handle_unusual;
                switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
                    // optional int32 userid = 1;
                    case 1: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
                            set_has_userid();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &userid_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // optional int32 roomid = 2;
                    case 2: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
                            set_has_roomid();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &roomid_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // optional int32 tableno = 3;
                    case 3: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
                            set_has_tableno();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &tableno_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                    default: {
handle_unusual:
                        if (tag == 0) {
                            goto success;
                        }
                        DO_(::google::protobuf::internal::WireFormat::SkipField(
                            input, tag, _internal_metadata_.mutable_unknown_fields()));
                        break;
                    }
                }
            }
success:
            // @@protoc_insertion_point(parse_success:game.base.RS_UserLeaveGameNotify)
            return true;
failure:
            // @@protoc_insertion_point(parse_failure:game.base.RS_UserLeaveGameNotify)
            return false;
#undef DO_
        }

        void RS_UserLeaveGameNotify::SerializeWithCachedSizes(
            ::google::protobuf::io::CodedOutputStream* output) const {
            // @@protoc_insertion_point(serialize_start:game.base.RS_UserLeaveGameNotify)
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            // optional int32 userid = 1;
            if (cached_has_bits & 0x00000001u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
            }

            // optional int32 roomid = 2;
            if (cached_has_bits & 0x00000002u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roomid(), output);
            }

            // optional int32 tableno = 3;
            if (cached_has_bits & 0x00000004u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->tableno(), output);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
                    _internal_metadata_.unknown_fields(), output);
            }
            // @@protoc_insertion_point(serialize_end:game.base.RS_UserLeaveGameNotify)
        }

        ::google::protobuf::uint8* RS_UserLeaveGameNotify::InternalSerializeWithCachedSizesToArray(
            bool deterministic, ::google::protobuf::uint8* target) const {
            (void) deterministic; // Unused
            // @@protoc_insertion_point(serialize_to_array_start:game.base.RS_UserLeaveGameNotify)
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            // optional int32 userid = 1;
            if (cached_has_bits & 0x00000001u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
            }

            // optional int32 roomid = 2;
            if (cached_has_bits & 0x00000002u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roomid(), target);
            }

            // optional int32 tableno = 3;
            if (cached_has_bits & 0x00000004u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->tableno(), target);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                    _internal_metadata_.unknown_fields(), target);
            }
            // @@protoc_insertion_point(serialize_to_array_end:game.base.RS_UserLeaveGameNotify)
            return target;
        }

        size_t RS_UserLeaveGameNotify::ByteSizeLong() const {
            // @@protoc_insertion_point(message_byte_size_start:game.base.RS_UserLeaveGameNotify)
            size_t total_size = 0;

            if (_internal_metadata_.have_unknown_fields()) {
                total_size +=
                    ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
                    _internal_metadata_.unknown_fields());
            }
            if (_has_bits_[0 / 32] & 7u) {
                // optional int32 userid = 1;
                if (has_userid()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::Int32Size(
                        this->userid());
                }

                // optional int32 roomid = 2;
                if (has_roomid()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::Int32Size(
                        this->roomid());
                }

                // optional int32 tableno = 3;
                if (has_tableno()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::Int32Size(
                        this->tableno());
                }

            }
            int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = cached_size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
            return total_size;
        }

        void RS_UserLeaveGameNotify::MergeFrom(const ::google::protobuf::Message& from) {
            // @@protoc_insertion_point(generalized_merge_from_start:game.base.RS_UserLeaveGameNotify)
            GOOGLE_DCHECK_NE(&from, this);
            const RS_UserLeaveGameNotify* source =
                ::google::protobuf::internal::DynamicCastToGenerated<const RS_UserLeaveGameNotify>(
                &from);
            if (source == NULL) {
                // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.base.RS_UserLeaveGameNotify)
                ::google::protobuf::internal::ReflectionOps::Merge(from, this);
            } else {
                // @@protoc_insertion_point(generalized_merge_from_cast_success:game.base.RS_UserLeaveGameNotify)
                MergeFrom(*source);
            }
        }

        void RS_UserLeaveGameNotify::MergeFrom(const RS_UserLeaveGameNotify& from) {
            // @@protoc_insertion_point(class_specific_merge_from_start:game.base.RS_UserLeaveGameNotify)
            GOOGLE_DCHECK_NE(&from, this);
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = from._has_bits_[0];
            if (cached_has_bits & 7u) {
                if (cached_has_bits & 0x00000001u) {
                    userid_ = from.userid_;
                }
                if (cached_has_bits & 0x00000002u) {
                    roomid_ = from.roomid_;
                }
                if (cached_has_bits & 0x00000004u) {
                    tableno_ = from.tableno_;
                }
                _has_bits_[0] |= cached_has_bits;
            }
        }

        void RS_UserLeaveGameNotify::CopyFrom(const ::google::protobuf::Message& from) {
            // @@protoc_insertion_point(generalized_copy_from_start:game.base.RS_UserLeaveGameNotify)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        void RS_UserLeaveGameNotify::CopyFrom(const RS_UserLeaveGameNotify& from) {
            // @@protoc_insertion_point(class_specific_copy_from_start:game.base.RS_UserLeaveGameNotify)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        bool RS_UserLeaveGameNotify::IsInitialized() const {
            return true;
        }

        void RS_UserLeaveGameNotify::Swap(RS_UserLeaveGameNotify* other) {
            if (other == this) return;
            InternalSwap(other);
        }
        void RS_UserLeaveGameNotify::InternalSwap(RS_UserLeaveGameNotify* other) {
            using std::swap;
            swap(userid_, other->userid_);
            swap(roomid_, other->roomid_);
            swap(tableno_, other->tableno_);
            swap(_has_bits_[0], other->_has_bits_[0]);
            _internal_metadata_.Swap(&other->_internal_metadata_);
            swap(_cached_size_, other->_cached_size_);
        }

        ::google::protobuf::Metadata RS_UserLeaveGameNotify::GetMetadata() const {
            protobuf_game_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
            return ::protobuf_game_5fbase_2eproto::file_level_metadata[kIndexInFileMessages];
        }


        // ===================================================================

        void RS_SwitchTableNotify::InitAsDefaultInstance() {}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
        const int RS_SwitchTableNotify::kUseridFieldNumber;
        const int RS_SwitchTableNotify::kRoomidFieldNumber;
        const int RS_SwitchTableNotify::kOldTablenoFieldNumber;
        const int RS_SwitchTableNotify::kNewTablenoFieldNumber;
        const int RS_SwitchTableNotify::kNewChairnoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

        RS_SwitchTableNotify::RS_SwitchTableNotify()
            : ::google::protobuf::Message(), _internal_metadata_(NULL) {
            if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
                ::protobuf_game_5fbase_2eproto::InitDefaultsRS_SwitchTableNotify();
            }
            SharedCtor();
            // @@protoc_insertion_point(constructor:game.base.RS_SwitchTableNotify)
        }
        RS_SwitchTableNotify::RS_SwitchTableNotify(const RS_SwitchTableNotify& from)
            : ::google::protobuf::Message(),
            _internal_metadata_(NULL),
            _has_bits_(from._has_bits_),
            _cached_size_(0) {
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            ::memcpy(&userid_, &from.userid_,
                     static_cast<size_t>(reinterpret_cast<char*>(&new_chairno_) -
                     reinterpret_cast<char*>(&userid_)) + sizeof(new_chairno_));
            // @@protoc_insertion_point(copy_constructor:game.base.RS_SwitchTableNotify)
        }

        void RS_SwitchTableNotify::SharedCtor() {
            _cached_size_ = 0;
            ::memset(&userid_, 0, static_cast<size_t>(
                reinterpret_cast<char*>(&new_chairno_) -
                reinterpret_cast<char*>(&userid_)) + sizeof(new_chairno_));
        }

        RS_SwitchTableNotify::~RS_SwitchTableNotify() {
            // @@protoc_insertion_point(destructor:game.base.RS_SwitchTableNotify)
            SharedDtor();
        }

        void RS_SwitchTableNotify::SharedDtor() {}

        void RS_SwitchTableNotify::SetCachedSize(int size) const {
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
        }
        const ::google::protobuf::Descriptor* RS_SwitchTableNotify::descriptor() {
            ::protobuf_game_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
            return ::protobuf_game_5fbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
        }

        const RS_SwitchTableNotify& RS_SwitchTableNotify::default_instance() {
            ::protobuf_game_5fbase_2eproto::InitDefaultsRS_SwitchTableNotify();
            return *internal_default_instance();
        }

        RS_SwitchTableNotify* RS_SwitchTableNotify::New(::google::protobuf::Arena* arena) const {
            RS_SwitchTableNotify* n = new RS_SwitchTableNotify;
            if (arena != NULL) {
                arena->Own(n);
            }
            return n;
        }

        void RS_SwitchTableNotify::Clear() {
            // @@protoc_insertion_point(message_clear_start:game.base.RS_SwitchTableNotify)
            ::google::protobuf::uint32 cached_has_bits = 0;
            // Prevent compiler warnings about cached_has_bits being unused
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            if (cached_has_bits & 31u) {
                ::memset(&userid_, 0, static_cast<size_t>(
                    reinterpret_cast<char*>(&new_chairno_) -
                    reinterpret_cast<char*>(&userid_)) + sizeof(new_chairno_));
            }
            _has_bits_.Clear();
            _internal_metadata_.Clear();
        }

        bool RS_SwitchTableNotify::MergePartialFromCodedStream(
            ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
            ::google::protobuf::uint32 tag;
            // @@protoc_insertion_point(parse_start:game.base.RS_SwitchTableNotify)
            for (;;) {
                ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
                tag = p.first;
                if (!p.second) goto handle_unusual;
                switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
                    // optional int32 userid = 1;
                    case 1: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
                            set_has_userid();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &userid_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // optional int32 roomid = 2;
                    case 2: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
                            set_has_roomid();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &roomid_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // optional int32 old_tableno = 3;
                    case 3: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
                            set_has_old_tableno();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &old_tableno_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // optional int32 new_tableno = 4;
                    case 4: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
                            set_has_new_tableno();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &new_tableno_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                            // optional int32 new_chairno = 5;
                    case 5: {
                        if (static_cast<::google::protobuf::uint8>(tag) ==
                            static_cast<::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
                            set_has_new_chairno();
                            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &new_chairno_)));
                        } else {
                            goto handle_unusual;
                        }
                        break;
                    }

                    default: {
handle_unusual:
                        if (tag == 0) {
                            goto success;
                        }
                        DO_(::google::protobuf::internal::WireFormat::SkipField(
                            input, tag, _internal_metadata_.mutable_unknown_fields()));
                        break;
                    }
                }
            }
success:
            // @@protoc_insertion_point(parse_success:game.base.RS_SwitchTableNotify)
            return true;
failure:
            // @@protoc_insertion_point(parse_failure:game.base.RS_SwitchTableNotify)
            return false;
#undef DO_
        }

        void RS_SwitchTableNotify::SerializeWithCachedSizes(
            ::google::protobuf::io::CodedOutputStream* output) const {
            // @@protoc_insertion_point(serialize_start:game.base.RS_SwitchTableNotify)
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            // optional int32 userid = 1;
            if (cached_has_bits & 0x00000001u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
            }

            // optional int32 roomid = 2;
            if (cached_has_bits & 0x00000002u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roomid(), output);
            }

            // optional int32 old_tableno = 3;
            if (cached_has_bits & 0x00000004u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->old_tableno(), output);
            }

            // optional int32 new_tableno = 4;
            if (cached_has_bits & 0x00000008u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->new_tableno(), output);
            }

            // optional int32 new_chairno = 5;
            if (cached_has_bits & 0x00000010u) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->new_chairno(), output);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
                    _internal_metadata_.unknown_fields(), output);
            }
            // @@protoc_insertion_point(serialize_end:game.base.RS_SwitchTableNotify)
        }

        ::google::protobuf::uint8* RS_SwitchTableNotify::InternalSerializeWithCachedSizesToArray(
            bool deterministic, ::google::protobuf::uint8* target) const {
            (void) deterministic; // Unused
            // @@protoc_insertion_point(serialize_to_array_start:game.base.RS_SwitchTableNotify)
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            // optional int32 userid = 1;
            if (cached_has_bits & 0x00000001u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
            }

            // optional int32 roomid = 2;
            if (cached_has_bits & 0x00000002u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roomid(), target);
            }

            // optional int32 old_tableno = 3;
            if (cached_has_bits & 0x00000004u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->old_tableno(), target);
            }

            // optional int32 new_tableno = 4;
            if (cached_has_bits & 0x00000008u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->new_tableno(), target);
            }

            // optional int32 new_chairno = 5;
            if (cached_has_bits & 0x00000010u) {
                target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->new_chairno(), target);
            }

            if (_internal_metadata_.have_unknown_fields()) {
                target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                    _internal_metadata_.unknown_fields(), target);
            }
            // @@protoc_insertion_point(serialize_to_array_end:game.base.RS_SwitchTableNotify)
            return target;
        }

        size_t RS_SwitchTableNotify::ByteSizeLong() const {
            // @@protoc_insertion_point(message_byte_size_start:game.base.RS_SwitchTableNotify)
            size_t total_size = 0;

            if (_internal_metadata_.have_unknown_fields()) {
                total_size +=
                    ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
                    _internal_metadata_.unknown_fields());
            }
            if (_has_bits_[0 / 32] & 31u) {
                // optional int32 userid = 1;
                if (has_userid()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::Int32Size(
                        this->userid());
                }

                // optional int32 roomid = 2;
                if (has_roomid()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::Int32Size(
                        this->roomid());
                }

                // optional int32 old_tableno = 3;
                if (has_old_tableno()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::Int32Size(
                        this->old_tableno());
                }

                // optional int32 new_tableno = 4;
                if (has_new_tableno()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::Int32Size(
                        this->new_tableno());
                }

                // optional int32 new_chairno = 5;
                if (has_new_chairno()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::Int32Size(
                        this->new_chairno());
                }

            }
            int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = cached_size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
            return total_size;
        }

        void RS_SwitchTableNotify::MergeFrom(const ::google::protobuf::Message& from) {
            // @@protoc_insertion_point(generalized_merge_from_start:game.base.RS_SwitchTableNotify)
            GOOGLE_DCHECK_NE(&from, this);
            const RS_SwitchTableNotify* source =
                ::google::protobuf::internal::DynamicCastToGenerated<const RS_SwitchTableNotify>(
                &from);
            if (source == NULL) {
                // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.base.RS_SwitchTableNotify)
                ::google::protobuf::internal::ReflectionOps::Merge(from, this);
            } else {
                // @@protoc_insertion_point(generalized_merge_from_cast_success:game.base.RS_SwitchTableNotify)
                MergeFrom(*source);
            }
        }

        void RS_SwitchTableNotify::MergeFrom(const RS_SwitchTableNotify& from) {
            // @@protoc_insertion_point(class_specific_merge_from_start:game.base.RS_SwitchTableNotify)
            GOOGLE_DCHECK_NE(&from, this);
            _internal_metadata_.MergeFrom(from._internal_metadata_);
            ::google::protobuf::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = from._has_bits_[0];
            if (cached_has_bits & 31u) {
                if (cached_has_bits & 0x00000001u) {
                    userid_ = from.userid_;
                }
                if (cached_has_bits & 0x00000002u) {
                    roomid_ = from.roomid_;
                }
                if (cached_has_bits & 0x00000004u) {
                    old_tableno_ = from.old_tableno_;
                }
                if (cached_has_bits & 0x00000008u) {
                    new_tableno_ = from.new_tableno_;
                }
                if (cached_has_bits & 0x00000010u) {
                    new_chairno_ = from.new_chairno_;
                }
                _has_bits_[0] |= cached_has_bits;
            }
        }

        void RS_SwitchTableNotify::CopyFrom(const ::google::protobuf::Message& from) {
            // @@protoc_insertion_point(generalized_copy_from_start:game.base.RS_SwitchTableNotify)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        void RS_SwitchTableNotify::CopyFrom(const RS_SwitchTableNotify& from) {
            // @@protoc_insertion_point(class_specific_copy_from_start:game.base.RS_SwitchTableNotify)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        bool RS_SwitchTableNotify::IsInitialized() const {
            return true;
        }

        void RS_SwitchTableNotify::Swap(RS_SwitchTableNotify* other) {
            if (other == this) return;
            InternalSwap(other);
        }
        void RS_SwitchTableNotify::InternalSwap(RS_SwitchTableNotify* other) {
            using std::swap;
            swap(userid_, other->userid_);
            swap(roomid_, other->roomid_);
            swap(old_tableno_, other->old_tableno_);
            swap(new_tableno_, other->new_tableno_);
            swap(new_chairno_, other->new_chairno_);
            swap(_has_bits_[0], other->_has_bits_[0]);
            _internal_metadata_.Swap(&other->_internal_metadata_);
            swap(_cached_size_, other->_cached_size_);
        }

        ::google::protobuf::Metadata RS_SwitchTableNotify::GetMetadata() const {
            protobuf_game_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
            return ::protobuf_game_5fbase_2eproto::file_level_metadata[kIndexInFileMessages];
        }


        // @@protoc_insertion_point(namespace_scope)
    }  // namespace base
}  // namespace game

// @@protoc_insertion_point(global_scope)
